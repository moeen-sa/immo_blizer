
freertos_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028d8  0800ffa8  0800ffa8  00010fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012880  08012880  0001420c  2**0
                  CONTENTS
  4 .ARM          00000008  08012880  08012880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012888  08012888  0001420c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012888  08012888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801288c  0801288c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08012890  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001420c  2**0
                  CONTENTS
 10 .bss          00009e00  2000020c  2000020c  0001420c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a00c  2000a00c  0001420c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001420c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eac0  00000000  00000000  0001423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000420f  00000000  00000000  00032cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013bc  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016818  00000000  00000000  00039c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008b82  00000000  00000000  0005047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058ffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008118  00000000  00000000  00059044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0006115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff8c 	.word	0x0800ff8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800ff8c 	.word	0x0800ff8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f001 fcdb 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f907 	bl	8001220 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_StatusTypeDef RES =0;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef UART_RES =0;
 8001016:	2300      	movs	r3, #0
 8001018:	73bb      	strb	r3, [r7, #14]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 fab7 	bl	800158c <MX_GPIO_Init>
  MX_DMA_Init();
 800101e:	f000 fa7f 	bl	8001520 <MX_DMA_Init>
  MX_CAN1_Init();
 8001022:	f000 f9f1 	bl	8001408 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001026:	f000 fa27 	bl	8001478 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800102a:	f000 f963 	bl	80012f4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800102e:	f000 fa4d 	bl	80014cc <MX_USART3_UART_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8001032:	f006 fc65 	bl	8007900 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */

  cluster_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001036:	4b56      	ldr	r3, [pc, #344]	@ (8001190 <main+0x18c>)
 8001038:	2201      	movs	r2, #1
 800103a:	621a      	str	r2, [r3, #32]

  cluster_filter.FilterBank = 0;
 800103c:	4b54      	ldr	r3, [pc, #336]	@ (8001190 <main+0x18c>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]

  cluster_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001042:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <main+0x18c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]

  cluster_filter.FilterIdHigh = 0;
 8001048:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <main+0x18c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]

  cluster_filter.FilterIdLow  =0 ;
 800104e:	4b50      	ldr	r3, [pc, #320]	@ (8001190 <main+0x18c>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]

  cluster_filter.FilterMaskIdHigh = 0;
 8001054:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <main+0x18c>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]

  cluster_filter.FilterMaskIdLow = 0;
 800105a:	4b4d      	ldr	r3, [pc, #308]	@ (8001190 <main+0x18c>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]

  cluster_filter.FilterMode  =  CAN_FILTERMODE_IDMASK;
 8001060:	4b4b      	ldr	r3, [pc, #300]	@ (8001190 <main+0x18c>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]

  cluster_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001066:	4b4a      	ldr	r3, [pc, #296]	@ (8001190 <main+0x18c>)
 8001068:	2201      	movs	r2, #1
 800106a:	61da      	str	r2, [r3, #28]

  RES = HAL_CAN_ConfigFilter(&hcan1, &cluster_filter);
 800106c:	4948      	ldr	r1, [pc, #288]	@ (8001190 <main+0x18c>)
 800106e:	4849      	ldr	r0, [pc, #292]	@ (8001194 <main+0x190>)
 8001070:	f002 fa1c 	bl	80034ac <HAL_CAN_ConfigFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]

 RES = HAL_CAN_Start(&hcan1);
 8001078:	4846      	ldr	r0, [pc, #280]	@ (8001194 <main+0x190>)
 800107a:	f002 faf7 	bl	800366c <HAL_CAN_Start>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]

 RES = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001082:	2102      	movs	r1, #2
 8001084:	4843      	ldr	r0, [pc, #268]	@ (8001194 <main+0x190>)
 8001086:	f002 fd27 	bl	8003ad8 <HAL_CAN_ActivateNotification>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
//*************************************************************
  engine_rpm_header.DLC =8;
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <main+0x194>)
 8001090:	2208      	movs	r2, #8
 8001092:	611a      	str	r2, [r3, #16]
  engine_rpm_header.IDE = CAN_ID_EXT;
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <main+0x194>)
 8001096:	2204      	movs	r2, #4
 8001098:	609a      	str	r2, [r3, #8]
  engine_rpm_header.ExtId = 0XCF00401;
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <main+0x194>)
 800109c:	4a3f      	ldr	r2, [pc, #252]	@ (800119c <main+0x198>)
 800109e:	605a      	str	r2, [r3, #4]
  //**************************************************
  coolant_rpm_header.DLC =8;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <main+0x19c>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	611a      	str	r2, [r3, #16]
  coolant_rpm_header.IDE = CAN_ID_EXT;
 80010a6:	4b3e      	ldr	r3, [pc, #248]	@ (80011a0 <main+0x19c>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	609a      	str	r2, [r3, #8]
  coolant_rpm_header.ExtId = 0X18FE63FE;
 80010ac:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <main+0x19c>)
 80010ae:	4a3d      	ldr	r2, [pc, #244]	@ (80011a4 <main+0x1a0>)
 80010b0:	605a      	str	r2, [r3, #4]
  //***************************************************
  coolant_rpm_header.DLC =8;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <main+0x19c>)
 80010b4:	2208      	movs	r2, #8
 80010b6:	611a      	str	r2, [r3, #16]
  coolant_rpm_header.IDE = CAN_ID_EXT;
 80010b8:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <main+0x19c>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	609a      	str	r2, [r3, #8]
  coolant_rpm_header.ExtId = 0X18FEBDFE;
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <main+0x19c>)
 80010c0:	4a39      	ldr	r2, [pc, #228]	@ (80011a8 <main+0x1a4>)
 80010c2:	605a      	str	r2, [r3, #4]
  //***************************************************
  immo_1.DLC =8;
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <main+0x1a8>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	611a      	str	r2, [r3, #16]
  immo_1.IDE = CAN_ID_EXT;
 80010ca:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <main+0x1a8>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	609a      	str	r2, [r3, #8]
  immo_1.ExtId = 0X1CABBAEE;
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <main+0x1a8>)
 80010d2:	4a37      	ldr	r2, [pc, #220]	@ (80011b0 <main+0x1ac>)
 80010d4:	605a      	str	r2, [r3, #4]
  //***************************************************
  immo_2.DLC =8;
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <main+0x1b0>)
 80010d8:	2208      	movs	r2, #8
 80010da:	611a      	str	r2, [r3, #16]
  immo_2.IDE = CAN_ID_EXT;
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <main+0x1b0>)
 80010de:	2204      	movs	r2, #4
 80010e0:	609a      	str	r2, [r3, #8]
  immo_2.ExtId = 0X1CABBBEE;
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <main+0x1b0>)
 80010e4:	4a34      	ldr	r2, [pc, #208]	@ (80011b8 <main+0x1b4>)
 80010e6:	605a      	str	r2, [r3, #4]
  //***************************************************


  HAL_UART_Receive_IT(&huart1, (uint8_t *)get_data, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	4934      	ldr	r1, [pc, #208]	@ (80011bc <main+0x1b8>)
 80010ec:	4834      	ldr	r0, [pc, #208]	@ (80011c0 <main+0x1bc>)
 80010ee:	f004 fe02 	bl	8005cf6 <HAL_UART_Receive_IT>





     memset(adc_res_string , 0 , 15);
 80010f2:	220f      	movs	r2, #15
 80010f4:	2100      	movs	r1, #0
 80010f6:	4833      	ldr	r0, [pc, #204]	@ (80011c4 <main+0x1c0>)
 80010f8:	f00b fbe7 	bl	800c8ca <memset>
     memset(adc_res , 0 , 5 * sizeof(uint16_t));
 80010fc:	220a      	movs	r2, #10
 80010fe:	2100      	movs	r1, #0
 8001100:	4831      	ldr	r0, [pc, #196]	@ (80011c8 <main+0x1c4>)
 8001102:	f00b fbe2 	bl	800c8ca <memset>

  //  HAL_ADC_Start_DMA(&hadc2, &adc_res, 1);

     HAL_StatusTypeDef adc_hal_res ;

     uint32_t adc_channel_one = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]

     adc_hal_res =  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_res, 5);
 800110a:	2205      	movs	r2, #5
 800110c:	492e      	ldr	r1, [pc, #184]	@ (80011c8 <main+0x1c4>)
 800110e:	482f      	ldr	r0, [pc, #188]	@ (80011cc <main+0x1c8>)
 8001110:	f001 fd02 	bl	8002b18 <HAL_ADC_Start_DMA>
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]

     HAL_UART_Receive_DMA(&huart3,  uart_buff , 12); //tag code are 12 digits!
 8001118:	220c      	movs	r2, #12
 800111a:	492d      	ldr	r1, [pc, #180]	@ (80011d0 <main+0x1cc>)
 800111c:	482d      	ldr	r0, [pc, #180]	@ (80011d4 <main+0x1d0>)
 800111e:	f004 fe0f 	bl	8005d40 <HAL_UART_Receive_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001122:	f006 fc39 	bl	8007998 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001126:	4a2c      	ldr	r2, [pc, #176]	@ (80011d8 <main+0x1d4>)
 8001128:	2100      	movs	r1, #0
 800112a:	482c      	ldr	r0, [pc, #176]	@ (80011dc <main+0x1d8>)
 800112c:	f006 fc7e 	bl	8007a2c <osThreadNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <main+0x1dc>)
 8001134:	6013      	str	r3, [r2, #0]

  /* creation of lcd_drive */
  lcd_driveHandle = osThreadNew(display_data, NULL, &lcd_drive_attributes);
 8001136:	4a2b      	ldr	r2, [pc, #172]	@ (80011e4 <main+0x1e0>)
 8001138:	2100      	movs	r1, #0
 800113a:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <main+0x1e4>)
 800113c:	f006 fc76 	bl	8007a2c <osThreadNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <main+0x1e8>)
 8001144:	6013      	str	r3, [r2, #0]

  /* creation of can_control */
  can_controlHandle = osThreadNew(can_send_data, NULL, &can_control_attributes);
 8001146:	4a2a      	ldr	r2, [pc, #168]	@ (80011f0 <main+0x1ec>)
 8001148:	2100      	movs	r1, #0
 800114a:	482a      	ldr	r0, [pc, #168]	@ (80011f4 <main+0x1f0>)
 800114c:	f006 fc6e 	bl	8007a2c <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <main+0x1f4>)
 8001154:	6013      	str	r3, [r2, #0]

  /* creation of input */
  inputHandle = osThreadNew(get_input_data, NULL, &input_attributes);
 8001156:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <main+0x1f8>)
 8001158:	2100      	movs	r1, #0
 800115a:	4829      	ldr	r0, [pc, #164]	@ (8001200 <main+0x1fc>)
 800115c:	f006 fc66 	bl	8007a2c <osThreadNew>
 8001160:	4603      	mov	r3, r0
 8001162:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <main+0x200>)
 8001164:	6013      	str	r3, [r2, #0]

  /* creation of calculate */
  calculateHandle = osThreadNew(make_engine_data, NULL, &calculate_attributes);
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <main+0x204>)
 8001168:	2100      	movs	r1, #0
 800116a:	4828      	ldr	r0, [pc, #160]	@ (800120c <main+0x208>)
 800116c:	f006 fc5e 	bl	8007a2c <osThreadNew>
 8001170:	4603      	mov	r3, r0
 8001172:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <main+0x20c>)
 8001174:	6013      	str	r3, [r2, #0]

  /* creation of make_immo_data */
  make_immo_dataHandle = osThreadNew(make_immo_data_func, NULL, &make_immo_data_attributes);
 8001176:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <main+0x210>)
 8001178:	2100      	movs	r1, #0
 800117a:	4827      	ldr	r0, [pc, #156]	@ (8001218 <main+0x214>)
 800117c:	f006 fc56 	bl	8007a2c <osThreadNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <main+0x218>)
 8001184:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001186:	f006 fc2b 	bl	80079e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <main+0x186>
 800118e:	bf00      	nop
 8001190:	20005428 	.word	0x20005428
 8001194:	20000534 	.word	0x20000534
 8001198:	20005394 	.word	0x20005394
 800119c:	0cf00401 	.word	0x0cf00401
 80011a0:	200053ac 	.word	0x200053ac
 80011a4:	18fe63fe 	.word	0x18fe63fe
 80011a8:	18febdfe 	.word	0x18febdfe
 80011ac:	200053dc 	.word	0x200053dc
 80011b0:	1cabbaee 	.word	0x1cabbaee
 80011b4:	200053f4 	.word	0x200053f4
 80011b8:	1cabbbee 	.word	0x1cabbbee
 80011bc:	20005454 	.word	0x20005454
 80011c0:	2000055c 	.word	0x2000055c
 80011c4:	20000234 	.word	0x20000234
 80011c8:	20000228 	.word	0x20000228
 80011cc:	2000048c 	.word	0x2000048c
 80011d0:	20000248 	.word	0x20000248
 80011d4:	200005a4 	.word	0x200005a4
 80011d8:	080100dc 	.word	0x080100dc
 80011dc:	08001fd9 	.word	0x08001fd9
 80011e0:	2000064c 	.word	0x2000064c
 80011e4:	08010100 	.word	0x08010100
 80011e8:	08001fe9 	.word	0x08001fe9
 80011ec:	200008f8 	.word	0x200008f8
 80011f0:	08010124 	.word	0x08010124
 80011f4:	080020c9 	.word	0x080020c9
 80011f8:	200011a4 	.word	0x200011a4
 80011fc:	08010148 	.word	0x08010148
 8001200:	080021dd 	.word	0x080021dd
 8001204:	200011a8 	.word	0x200011a8
 8001208:	0801016c 	.word	0x0801016c
 800120c:	080021f1 	.word	0x080021f1
 8001210:	200011ac 	.word	0x200011ac
 8001214:	08010190 	.word	0x08010190
 8001218:	08002225 	.word	0x08002225
 800121c:	200011b0 	.word	0x200011b0

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	@ 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	@ 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00b fb4b 	bl	800c8ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a27      	ldr	r2, [pc, #156]	@ (80012ec <SystemClock_Config+0xcc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <SystemClock_Config+0xd0>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001290:	2319      	movs	r3, #25
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001294:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129e:	2304      	movs	r3, #4
 80012a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd1e 	bl	8004ce8 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012b2:	f001 f806 	bl	80022c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2105      	movs	r1, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 ff7f 	bl	80051d8 <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e0:	f000 ffef 	bl	80022c2 <Error_Handler>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3750      	adds	r7, #80	@ 0x50
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001306:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001308:	4a3d      	ldr	r2, [pc, #244]	@ (8001400 <MX_ADC1_Init+0x10c>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <MX_ADC1_Init+0x108>)
 800130e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <MX_ADC1_Init+0x108>)
 800131c:	2201      	movs	r2, #1
 800131e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001320:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001322:	2201      	movs	r2, #1
 8001324:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132e:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001336:	4a33      	ldr	r2, [pc, #204]	@ (8001404 <MX_ADC1_Init+0x110>)
 8001338:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133a:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <MX_ADC1_Init+0x108>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001342:	2205      	movs	r2, #5
 8001344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001350:	2201      	movs	r2, #1
 8001352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001354:	4829      	ldr	r0, [pc, #164]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001356:	f001 fb9b 	bl	8002a90 <HAL_ADC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 ffaf 	bl	80022c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800136c:	2307      	movs	r3, #7
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001376:	f001 fcfd 	bl	8002d74 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001380:	f000 ff9f 	bl	80022c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001384:	2301      	movs	r3, #1
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	481a      	ldr	r0, [pc, #104]	@ (80013fc <MX_ADC1_Init+0x108>)
 8001392:	f001 fcef 	bl	8002d74 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800139c:	f000 ff91 	bl	80022c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013a4:	2303      	movs	r3, #3
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <MX_ADC1_Init+0x108>)
 80013ae:	f001 fce1 	bl	8002d74 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013b8:	f000 ff83 	bl	80022c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013bc:	2303      	movs	r3, #3
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <MX_ADC1_Init+0x108>)
 80013ca:	f001 fcd3 	bl	8002d74 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80013d4:	f000 ff75 	bl	80022c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013d8:	2304      	movs	r3, #4
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013dc:	2305      	movs	r3, #5
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_ADC1_Init+0x108>)
 80013e6:	f001 fcc5 	bl	8002d74 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80013f0:	f000 ff67 	bl	80022c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000048c 	.word	0x2000048c
 8001400:	40012000 	.word	0x40012000
 8001404:	0f000001 	.word	0x0f000001

08001408 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_CAN1_Init+0x68>)
 800140e:	4a19      	ldr	r2, [pc, #100]	@ (8001474 <MX_CAN1_Init+0x6c>)
 8001410:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001414:	220c      	movs	r2, #12
 8001416:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_CAN1_Init+0x68>)
 800141a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001428:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800142c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001430:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001434:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001438:	2200      	movs	r2, #0
 800143a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_CAN1_Init+0x68>)
 800143e:	2200      	movs	r2, #0
 8001440:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_CAN1_Init+0x68>)
 800144a:	2200      	movs	r2, #0
 800144c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001450:	2200      	movs	r2, #0
 8001452:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_CAN1_Init+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_CAN1_Init+0x68>)
 800145c:	f001 ff2a 	bl	80032b4 <HAL_CAN_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001466:	f000 ff2c 	bl	80022c2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000534 	.word	0x20000534
 8001474:	40006400 	.word	0x40006400

08001478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f004 fb46 	bl	8005b40 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 ff02 	bl	80022c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000055c 	.word	0x2000055c
 80014c8:	40011000 	.word	0x40011000

080014cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_USART3_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USART3_UART_Init+0x4c>)
 8001504:	f004 fb1c 	bl	8005b40 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 fed8 	bl	80022c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200005a4 	.word	0x200005a4
 800151c:	40004800 	.word	0x40004800

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_DMA_Init+0x68>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <MX_DMA_Init+0x68>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_DMA_Init+0x68>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <MX_DMA_Init+0x68>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <MX_DMA_Init+0x68>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <MX_DMA_Init+0x68>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	200c      	movs	r0, #12
 8001564:	f002 fdc6 	bl	80040f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001568:	200c      	movs	r0, #12
 800156a:	f002 fddf 	bl	800412c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2038      	movs	r0, #56	@ 0x38
 8001574:	f002 fdbe 	bl	80040f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001578:	2038      	movs	r0, #56	@ 0x38
 800157a:	f002 fdd7 	bl	800412c <HAL_NVIC_EnableIRQ>

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a41      	ldr	r2, [pc, #260]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b3f      	ldr	r3, [pc, #252]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a3a      	ldr	r2, [pc, #232]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <MX_GPIO_Init+0x124>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a2c      	ldr	r2, [pc, #176]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a25      	ldr	r2, [pc, #148]	@ (80016b0 <MX_GPIO_Init+0x124>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a1e      	ldr	r2, [pc, #120]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_GPIO_Init+0x124>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800164a:	2200      	movs	r2, #0
 800164c:	f64f 4180 	movw	r1, #64640	@ 0xfc80
 8001650:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <MX_GPIO_Init+0x128>)
 8001652:	f003 fb2f 	bl	8004cb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : inc_rpm_Pin */
  GPIO_InitStruct.Pin = inc_rpm_Pin;
 8001656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(inc_rpm_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4813      	ldr	r0, [pc, #76]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 800166c:	f003 f96e 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001670:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8001674:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	480a      	ldr	r0, [pc, #40]	@ (80016b4 <MX_GPIO_Init+0x128>)
 800168a:	f003 f95f 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : dec_rpm_Pin */
  GPIO_InitStruct.Pin = dec_rpm_Pin;
 800168e:	2302      	movs	r3, #2
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(dec_rpm_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <MX_GPIO_Init+0x130>)
 80016a2:	f003 f953 	bl	800494c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	3730      	adds	r7, #48	@ 0x30
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40021000 	.word	0x40021000

080016c0 <handle_rpm>:

/* USER CODE BEGIN 4 */

void handle_rpm(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

	 handle_rpm_increase();
 80016c4:	f000 f804 	bl	80016d0 <handle_rpm_increase>
	 handle_rpm_decrease();
 80016c8:	f000 f826 	bl	8001718 <handle_rpm_decrease>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <handle_rpm_increase>:

void handle_rpm_increase(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0


    if(HAL_GPIO_ReadPin(GPIOE, inc_rpm_Pin) == 0){
 80016d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d8:	480d      	ldr	r0, [pc, #52]	@ (8001710 <handle_rpm_increase+0x40>)
 80016da:	f003 fad3 	bl	8004c84 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <handle_rpm_increase+0x26>
     HAL_Delay(200);
 80016e4:	20c8      	movs	r0, #200	@ 0xc8
 80016e6:	f001 f9af 	bl	8002a48 <HAL_Delay>
     input_rpm += 100;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <handle_rpm_increase+0x44>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	3364      	adds	r3, #100	@ 0x64
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <handle_rpm_increase+0x44>)
 80016f4:	801a      	strh	r2, [r3, #0]
    }
    if(input_rpm>=2500)
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <handle_rpm_increase+0x44>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80016fe:	4293      	cmp	r3, r2
 8001700:	d903      	bls.n	800170a <handle_rpm_increase+0x3a>
   	 input_rpm = 2500;
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <handle_rpm_increase+0x44>)
 8001704:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001708:	801a      	strh	r2, [r3, #0]

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	20000000 	.word	0x20000000

08001718 <handle_rpm_decrease>:
void handle_rpm_decrease(){
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0


    if(HAL_GPIO_ReadPin(GPIOE, dec_rpm_Pin) == 0){
 800171c:	2102      	movs	r1, #2
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <handle_rpm_decrease+0x3c>)
 8001720:	f003 fab0 	bl	8004c84 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d108      	bne.n	800173c <handle_rpm_decrease+0x24>
     HAL_Delay(200);
 800172a:	20c8      	movs	r0, #200	@ 0xc8
 800172c:	f001 f98c 	bl	8002a48 <HAL_Delay>
     input_rpm -= 100;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <handle_rpm_decrease+0x40>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	3b64      	subs	r3, #100	@ 0x64
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <handle_rpm_decrease+0x40>)
 800173a:	801a      	strh	r2, [r3, #0]
    }
    if(input_rpm<=600)
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <handle_rpm_decrease+0x40>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001744:	d803      	bhi.n	800174e <handle_rpm_decrease+0x36>
   	 input_rpm = 600;
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <handle_rpm_decrease+0x40>)
 8001748:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800174c:	801a      	strh	r2, [r3, #0]

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	20000000 	.word	0x20000000

0800175c <make_coolant_value>:

uint16_t make_coolant_value(float _input_){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]

	if(_input_ >= coolant_level1_low && _input_ <= coolant_level1_high)
 8001766:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800183c <make_coolant_value+0xe0>
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	db0a      	blt.n	800178e <make_coolant_value+0x32>
 8001778:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d801      	bhi.n	800178e <make_coolant_value+0x32>
		return 60;
 800178a:	233c      	movs	r3, #60	@ 0x3c
 800178c:	e050      	b.n	8001830 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level2_low && _input_ <= coolant_level3_high)
 800178e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001840 <make_coolant_value+0xe4>
 8001792:	edd7 7a01 	vldr	s15, [r7, #4]
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db0a      	blt.n	80017b6 <make_coolant_value+0x5a>
 80017a0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001844 <make_coolant_value+0xe8>
 80017a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d801      	bhi.n	80017b6 <make_coolant_value+0x5a>
			return 70;
 80017b2:	2346      	movs	r3, #70	@ 0x46
 80017b4:	e03c      	b.n	8001830 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level3_low && _input_ <= coolant_level3_high)
 80017b6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001848 <make_coolant_value+0xec>
 80017ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	db0a      	blt.n	80017de <make_coolant_value+0x82>
 80017c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001844 <make_coolant_value+0xe8>
 80017cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d801      	bhi.n	80017de <make_coolant_value+0x82>
			return 80;
 80017da:	2350      	movs	r3, #80	@ 0x50
 80017dc:	e028      	b.n	8001830 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level4_low && _input_ <= coolant_level4_high)
 80017de:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800184c <make_coolant_value+0xf0>
 80017e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	db0a      	blt.n	8001806 <make_coolant_value+0xaa>
 80017f0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001850 <make_coolant_value+0xf4>
 80017f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d801      	bhi.n	8001806 <make_coolant_value+0xaa>
				return 90;
 8001802:	235a      	movs	r3, #90	@ 0x5a
 8001804:	e014      	b.n	8001830 <make_coolant_value+0xd4>

	if(_input_ >= coolant_level5_low && _input_ <= coolant_level5_high)
 8001806:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001854 <make_coolant_value+0xf8>
 800180a:	edd7 7a01 	vldr	s15, [r7, #4]
 800180e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	db0a      	blt.n	800182e <make_coolant_value+0xd2>
 8001818:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001858 <make_coolant_value+0xfc>
 800181c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d801      	bhi.n	800182e <make_coolant_value+0xd2>
					return 100;
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	e000      	b.n	8001830 <make_coolant_value+0xd4>

	return 0;
 800182e:	2300      	movs	r3, #0


}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	3e99999a 	.word	0x3e99999a
 8001840:	3f19999a 	.word	0x3f19999a
 8001844:	40066666 	.word	0x40066666
 8001848:	3fcccccd 	.word	0x3fcccccd
 800184c:	400ccccd 	.word	0x400ccccd
 8001850:	402ccccd 	.word	0x402ccccd
 8001854:	40333333 	.word	0x40333333
 8001858:	40533333 	.word	0x40533333
 800185c:	00000000 	.word	0x00000000

08001860 <handle_coolant>:

void handle_coolant(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0


	 coolant_value = make_coolant_value((float)((adc_res[0] * 3.3) /4095));
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <handle_coolant+0x60>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6b 	bl	8000544 <__aeabi_i2d>
 800186e:	a310      	add	r3, pc, #64	@ (adr r3, 80018b0 <handle_coolant+0x50>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	a30d      	add	r3, pc, #52	@ (adr r3, 80018b8 <handle_coolant+0x58>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fff1 	bl	800086c <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff f9b9 	bl	8000c08 <__aeabi_d2f>
 8001896:	4603      	mov	r3, r0
 8001898:	ee00 3a10 	vmov	s0, r3
 800189c:	f7ff ff5e 	bl	800175c <make_coolant_value>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <handle_coolant+0x64>)
 80018a6:	801a      	strh	r2, [r3, #0]

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	66666666 	.word	0x66666666
 80018b4:	400a6666 	.word	0x400a6666
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40affe00 	.word	0x40affe00
 80018c0:	20000228 	.word	0x20000228
 80018c4:	20000244 	.word	0x20000244

080018c8 <make_rpm_can_data>:

void make_rpm_can_data(uint16_t _rpm){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]

	_rpm *=8; //based on j1939, factor is divied by 8, so we multiple in 8(https://www.csselectronics.com/pages/j1939-explained-simple-intro-tutorial)
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	80fb      	strh	r3, [r7, #6]
	uint8_t rpm_high_byte = (_rpm >> 8) & 0xFF; //convert 16bit to two  bit numbers
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	73fb      	strb	r3, [r7, #15]
	uint8_t rpm_low_byte = _rpm & 0xFF;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	73bb      	strb	r3, [r7, #14]

	rpm_data[3] = rpm_low_byte;
 80018e4:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <make_rpm_can_data+0x34>)
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	70d3      	strb	r3, [r2, #3]
	rpm_data[4] = rpm_high_byte;
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <make_rpm_can_data+0x34>)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	7113      	strb	r3, [r2, #4]


}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000020 	.word	0x20000020

08001900 <make_coolant_can_data>:

 void make_coolant_can_data(uint16_t _coolant_){
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]

	 _coolant_ -=40; //based on j1939 dbc: https://github.com/nberlette/canbus/blob/main/dbc/j1939.dbc
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	3b28      	subs	r3, #40	@ 0x28
 800190e:	80fb      	strh	r3, [r7, #6]
  uint8_t coolant_high_byte = (_coolant_ >> 8) & 0xFF; //convert 16bit to two  bit numbers
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	73fb      	strb	r3, [r7, #15]
  uint8_t coolant_low_byte = _coolant_ & 0xFF;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	73bb      	strb	r3, [r7, #14]

  coolant_data[2] = coolant_low_byte;
 800191c:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <make_coolant_can_data+0x34>)
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	7093      	strb	r3, [r2, #2]
  coolant_data[3] = coolant_high_byte;
 8001922:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <make_coolant_can_data+0x34>)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	70d3      	strb	r3, [r2, #3]

 }
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000018 	.word	0x20000018

08001938 <make_fan_can_data>:

 void make_fan_can_data(uint16_t _fan_){
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]

	  if(_fan_ <70) {//fan off
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b45      	cmp	r3, #69	@ 0x45
 8001946:	d805      	bhi.n	8001954 <make_fan_can_data+0x1c>

		_fan_ = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 0;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <make_fan_can_data+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e015      	b.n	8001980 <make_fan_can_data+0x48>

	  }

	  else if(_fan_>=70 && _fan_<=90){  //low fan start
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	2b45      	cmp	r3, #69	@ 0x45
 8001958:	d909      	bls.n	800196e <make_fan_can_data+0x36>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b5a      	cmp	r3, #90	@ 0x5a
 800195e:	d806      	bhi.n	800196e <make_fan_can_data+0x36>

		_fan_ = 600;
 8001960:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001964:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 1;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <make_fan_can_data+0x74>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e008      	b.n	8001980 <make_fan_can_data+0x48>

	  }

	  else if( _fan_>90){ //high fan start
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b5a      	cmp	r3, #90	@ 0x5a
 8001972:	d905      	bls.n	8001980 <make_fan_can_data+0x48>

		_fan_ = 1500;
 8001974:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001978:	80fb      	strh	r3, [r7, #6]

		fan_display_status = 2;
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <make_fan_can_data+0x74>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]

	  }



	    _fan_ *=8; //based on j1939, factor is divied by 8, so we multiple in 8(https://www.csselectronics.com/pages/j1939-explained-simple-intro-tutorial)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	80fb      	strh	r3, [r7, #6]
	 	uint8_t fan_rpm_high_byte = (_fan_ >> 8) & 0xFF; //convert 16bit to two  bit numbers
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	73fb      	strb	r3, [r7, #15]
	 	uint8_t fan_rpm_low_byte = _fan_ & 0xFF;
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	73bb      	strb	r3, [r7, #14]

	 	fan_data[2] = fan_rpm_low_byte;
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <make_fan_can_data+0x78>)
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	7093      	strb	r3, [r2, #2]
	 	fan_data[3] = fan_rpm_high_byte;
 8001998:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <make_fan_can_data+0x78>)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	70d3      	strb	r3, [r2, #3]


 }
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000246 	.word	0x20000246
 80019b0:	20000028 	.word	0x20000028

080019b4 <write_fan_status>:

void  write_fan_status(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

	 LCD16X2_Set_Cursor(MyLCD, 1, 14);
 80019b8:	220e      	movs	r2, #14
 80019ba:	2101      	movs	r1, #1
 80019bc:	2000      	movs	r0, #0
 80019be:	f005 fccd 	bl	800735c <LCD16X2_Set_Cursor>

	  if(fan_display_status == 0)
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <write_fan_status+0x48>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <write_fan_status+0x20>
	  LCD16X2_Write_String(MyLCD, "OFF");
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <write_fan_status+0x4c>)
 80019cc:	2000      	movs	r0, #0
 80019ce:	f005 ff77 	bl	80078c0 <LCD16X2_Write_String>
	  else if(fan_display_status == 2)
	 		  LCD16X2_Write_String(MyLCD, "HIGH");



}
 80019d2:	e010      	b.n	80019f6 <write_fan_status+0x42>
	  else if(fan_display_status == 1)
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <write_fan_status+0x48>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d104      	bne.n	80019e6 <write_fan_status+0x32>
		  LCD16X2_Write_String(MyLCD, "LOW");
 80019dc:	4909      	ldr	r1, [pc, #36]	@ (8001a04 <write_fan_status+0x50>)
 80019de:	2000      	movs	r0, #0
 80019e0:	f005 ff6e 	bl	80078c0 <LCD16X2_Write_String>
}
 80019e4:	e007      	b.n	80019f6 <write_fan_status+0x42>
	  else if(fan_display_status == 2)
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <write_fan_status+0x48>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d103      	bne.n	80019f6 <write_fan_status+0x42>
	 		  LCD16X2_Write_String(MyLCD, "HIGH");
 80019ee:	4906      	ldr	r1, [pc, #24]	@ (8001a08 <write_fan_status+0x54>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f005 ff65 	bl	80078c0 <LCD16X2_Write_String>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000246 	.word	0x20000246
 8001a00:	08010000 	.word	0x08010000
 8001a04:	08010004 	.word	0x08010004
 8001a08:	08010008 	.word	0x08010008

08001a0c <get_time>:

void get_time(int *hours , int *minutes , int *seconds){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]

	uint32_t totalSeconds = HAL_GetTick() /1000;
 8001a18:	f001 f80a 	bl	8002a30 <HAL_GetTick>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a17      	ldr	r2, [pc, #92]	@ (8001a7c <get_time+0x70>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	617b      	str	r3, [r7, #20]

	   *hours = totalSeconds / 3600;          // Calculate hours
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <get_time+0x74>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0adb      	lsrs	r3, r3, #11
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	601a      	str	r2, [r3, #0]
	    *minutes = (totalSeconds % 3600) / 60; // Calculate minutes
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <get_time+0x74>)
 8001a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a40:	0adb      	lsrs	r3, r3, #11
 8001a42:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <get_time+0x78>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	601a      	str	r2, [r3, #0]
	    *seconds = totalSeconds % 60;
 8001a5a:	6979      	ldr	r1, [r7, #20]
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <get_time+0x78>)
 8001a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a62:	095a      	lsrs	r2, r3, #5
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	1aca      	subs	r2, r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]

}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	10624dd3 	.word	0x10624dd3
 8001a80:	91a2b3c5 	.word	0x91a2b3c5
 8001a84:	88888889 	.word	0x88888889

08001a88 <make_string_time>:

char * make_string_time(int hour , int minute){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]

	char __hour[5] , __minute[5];

	static char result [15];
	memset(result , 0 , 15);
 8001a92:	220f      	movs	r2, #15
 8001a94:	2100      	movs	r1, #0
 8001a96:	4811      	ldr	r0, [pc, #68]	@ (8001adc <make_string_time+0x54>)
 8001a98:	f00a ff17 	bl	800c8ca <memset>

	itoa(hour , __hour , 10);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f009 fe6b 	bl	800b780 <itoa>
	itoa(minute , __minute , 10);
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	220a      	movs	r2, #10
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6838      	ldr	r0, [r7, #0]
 8001ab4:	f009 fe64 	bl	800b780 <itoa>

	strcpy(result , __hour);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4807      	ldr	r0, [pc, #28]	@ (8001adc <make_string_time+0x54>)
 8001ac0:	f00a fff7 	bl	800cab2 <strcpy>
	strcat(result , __minute);
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <make_string_time+0x54>)
 8001acc:	f00a ff05 	bl	800c8da <strcat>

	return result;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	@ (8001adc <make_string_time+0x54>)

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20005458 	.word	0x20005458

08001ae0 <make_encrypted_data>:
  char * make_encrypted_data(char *plain_text){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

	static char result[16];
	memset(result , 0 , 16);
 8001ae8:	2210      	movs	r2, #16
 8001aea:	2100      	movs	r1, #0
 8001aec:	483c      	ldr	r0, [pc, #240]	@ (8001be0 <make_encrypted_data+0x100>)
 8001aee:	f00a feec 	bl	800c8ca <memset>

	//add padding!
	if(strlen(plain_text)!=16){
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fbcc 	bl	8000290 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d010      	beq.n	8001b20 <make_encrypted_data+0x40>

		for(int i= strlen(plain_text); i<16; i++)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fbc6 	bl	8000290 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e007      	b.n	8001b1a <make_encrypted_data+0x3a>

			plain_text[i]='F';
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	2246      	movs	r2, #70	@ 0x46
 8001b12:	701a      	strb	r2, [r3, #0]
		for(int i= strlen(plain_text); i<16; i++)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	ddf4      	ble.n	8001b0a <make_encrypted_data+0x2a>
	}

    mbedtls_aes_init(&aes);
 8001b20:	4830      	ldr	r0, [pc, #192]	@ (8001be4 <make_encrypted_data+0x104>)
 8001b22:	f008 fce9 	bl	800a4f8 <mbedtls_aes_init>
     mbedtls_aes_setkey_enc(&aes, key, 128);
 8001b26:	2280      	movs	r2, #128	@ 0x80
 8001b28:	492f      	ldr	r1, [pc, #188]	@ (8001be8 <make_encrypted_data+0x108>)
 8001b2a:	482e      	ldr	r0, [pc, #184]	@ (8001be4 <make_encrypted_data+0x104>)
 8001b2c:	f008 fd04 	bl	800a538 <mbedtls_aes_setkey_enc>

	 // mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, 16, iv, (unsigned char *)plain_text, (unsigned char *)result);

	//mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, 16, (unsigned char *)iv, (unsigned char *)plain_text, (unsigned char *)result);

	mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_ENCRYPT, (unsigned char *) plain_text, (unsigned char *)result);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <make_encrypted_data+0x100>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	2101      	movs	r1, #1
 8001b36:	482b      	ldr	r0, [pc, #172]	@ (8001be4 <make_encrypted_data+0x104>)
 8001b38:	f009 fdc8 	bl	800b6cc <mbedtls_aes_crypt_ecb>

 	 strcpy(temp_result , result);
 8001b3c:	4928      	ldr	r1, [pc, #160]	@ (8001be0 <make_encrypted_data+0x100>)
 8001b3e:	482b      	ldr	r0, [pc, #172]	@ (8001bec <make_encrypted_data+0x10c>)
 8001b40:	f00a ffb7 	bl	800cab2 <strcpy>
 	 //for(int i=0; i<16; i++)
 	// sprintf("%02X " , temp_result[i]);
 	 HAL_UART_Transmit(&huart1, (uint8_t *)"input data:", 12, HAL_MAX_DELAY);
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	220c      	movs	r2, #12
 8001b4a:	4929      	ldr	r1, [pc, #164]	@ (8001bf0 <make_encrypted_data+0x110>)
 8001b4c:	4829      	ldr	r0, [pc, #164]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001b4e:	f004 f847 	bl	8005be0 <HAL_UART_Transmit>
 	 	HAL_Delay(500);
 8001b52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b56:	f000 ff77 	bl	8002a48 <HAL_Delay>
 	 	 HAL_UART_Transmit(&huart1, (uint8_t *)plain_text, strlen(plain_text), HAL_MAX_DELAY);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fb98 	bl	8000290 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4822      	ldr	r0, [pc, #136]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001b6c:	f004 f838 	bl	8005be0 <HAL_UART_Transmit>
 	 	 	 	 HAL_Delay(500);
 8001b70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b74:	f000 ff68 	bl	8002a48 <HAL_Delay>
 	 	 HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	491e      	ldr	r1, [pc, #120]	@ (8001bf8 <make_encrypted_data+0x118>)
 8001b80:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001b82:	f004 f82d 	bl	8005be0 <HAL_UART_Transmit>
 	 	 HAL_Delay(500);
 8001b86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b8a:	f000 ff5d 	bl	8002a48 <HAL_Delay>
 	 	 HAL_UART_Transmit(&huart1, (uint8_t *)"coded data:", 12, HAL_MAX_DELAY);
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	220c      	movs	r2, #12
 8001b94:	4919      	ldr	r1, [pc, #100]	@ (8001bfc <make_encrypted_data+0x11c>)
 8001b96:	4817      	ldr	r0, [pc, #92]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001b98:	f004 f822 	bl	8005be0 <HAL_UART_Transmit>
 	 	 	 	HAL_Delay(500);
 8001b9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ba0:	f000 ff52 	bl	8002a48 <HAL_Delay>
 	 HAL_UART_Transmit(&huart1, (uint8_t *)temp_result, 16, HAL_MAX_DELAY);
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	2210      	movs	r2, #16
 8001baa:	4910      	ldr	r1, [pc, #64]	@ (8001bec <make_encrypted_data+0x10c>)
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001bae:	f004 f817 	bl	8005be0 <HAL_UART_Transmit>
 	 HAL_Delay(500);
 8001bb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb6:	f000 ff47 	bl	8002a48 <HAL_Delay>
 	HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <make_encrypted_data+0x118>)
 8001bc2:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <make_encrypted_data+0x114>)
 8001bc4:	f004 f80c 	bl	8005be0 <HAL_UART_Transmit>
 	 HAL_Delay(500);
 8001bc8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bcc:	f000 ff3c 	bl	8002a48 <HAL_Delay>
	 mbedtls_aes_free(&aes);
 8001bd0:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <make_encrypted_data+0x104>)
 8001bd2:	f008 fc9f 	bl	800a514 <mbedtls_aes_free>
    return result;
 8001bd6:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <make_encrypted_data+0x100>)
	}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20005468 	.word	0x20005468
 8001be4:	2000034c 	.word	0x2000034c
 8001be8:	20000004 	.word	0x20000004
 8001bec:	20000464 	.word	0x20000464
 8001bf0:	08010010 	.word	0x08010010
 8001bf4:	2000055c 	.word	0x2000055c
 8001bf8:	0801001c 	.word	0x0801001c
 8001bfc:	08010020 	.word	0x08010020

08001c00 <make_decrypted_data>:

  char *make_decrypted_data(char *cipher_text){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

	 static char result[16];

	    mbedtls_aes_init(&aes);
 8001c08:	4817      	ldr	r0, [pc, #92]	@ (8001c68 <make_decrypted_data+0x68>)
 8001c0a:	f008 fc75 	bl	800a4f8 <mbedtls_aes_init>
	     mbedtls_aes_setkey_dec(&aes, key, 128);
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	4916      	ldr	r1, [pc, #88]	@ (8001c6c <make_decrypted_data+0x6c>)
 8001c12:	4815      	ldr	r0, [pc, #84]	@ (8001c68 <make_decrypted_data+0x68>)
 8001c14:	f008 fe66 	bl	800a8e4 <mbedtls_aes_setkey_dec>

	 mbedtls_aes_crypt_ecb(&aes, MBEDTLS_AES_DECRYPT, (unsigned char *) cipher_text, (unsigned char *)result);
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <make_decrypted_data+0x70>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4812      	ldr	r0, [pc, #72]	@ (8001c68 <make_decrypted_data+0x68>)
 8001c20:	f009 fd54 	bl	800b6cc <mbedtls_aes_crypt_ecb>
	//mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, 16, (unsigned char *)iv, (unsigned char *)cipher_text, (unsigned char *)result);


   HAL_UART_Transmit(&huart1, (uint8_t *)"decoded data:", 13, HAL_MAX_DELAY);
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
 8001c28:	220d      	movs	r2, #13
 8001c2a:	4912      	ldr	r1, [pc, #72]	@ (8001c74 <make_decrypted_data+0x74>)
 8001c2c:	4812      	ldr	r0, [pc, #72]	@ (8001c78 <make_decrypted_data+0x78>)
 8001c2e:	f003 ffd7 	bl	8005be0 <HAL_UART_Transmit>
   	// HAL_Delay(500);

  HAL_UART_Transmit(&huart1, (uint8_t *)result, strlen(result), HAL_MAX_DELAY);
 8001c32:	480f      	ldr	r0, [pc, #60]	@ (8001c70 <make_decrypted_data+0x70>)
 8001c34:	f7fe fb2c 	bl	8000290 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	490b      	ldr	r1, [pc, #44]	@ (8001c70 <make_decrypted_data+0x70>)
 8001c42:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <make_decrypted_data+0x78>)
 8001c44:	f003 ffcc 	bl	8005be0 <HAL_UART_Transmit>
  	 //HAL_Delay(500);
  	 HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	490b      	ldr	r1, [pc, #44]	@ (8001c7c <make_decrypted_data+0x7c>)
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <make_decrypted_data+0x78>)
 8001c52:	f003 ffc5 	bl	8005be0 <HAL_UART_Transmit>
  	 //HAL_Delay(500);

  	 mbedtls_aes_free(&aes);
 8001c56:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <make_decrypted_data+0x68>)
 8001c58:	f008 fc5c 	bl	800a514 <mbedtls_aes_free>

  return result;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <make_decrypted_data+0x70>)

  }
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000034c 	.word	0x2000034c
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20005478 	.word	0x20005478
 8001c74:	0801002c 	.word	0x0801002c
 8001c78:	2000055c 	.word	0x2000055c
 8001c7c:	0801001c 	.word	0x0801001c

08001c80 <send_encrypted_immo_data>:

  void send_encrypted_immo_data(char *cipher_text){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

	  uint8_t first_byte[8];
	  uint8_t second_byte[8];


	  for(int i=0; i<8 ; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8c:	e00c      	b.n	8001ca8 <send_encrypted_immo_data+0x28>
		  first_byte[i] = (uint8_t)cipher_text[i];
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	7819      	ldrb	r1, [r3, #0]
 8001c96:	f107 0214 	add.w	r2, r7, #20
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	4413      	add	r3, r2
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<8 ; i++)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	ddef      	ble.n	8001c8e <send_encrypted_immo_data+0xe>

	  int j=0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
	  for(int i=8; i<16 ; i++){
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e00f      	b.n	8001cd8 <send_encrypted_immo_data+0x58>
	 		  second_byte[j] = (uint8_t)cipher_text[i];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	7819      	ldrb	r1, [r3, #0]
 8001cc0:	f107 020c 	add.w	r2, r7, #12
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	460a      	mov	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
	 		  j++;
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
	  for(int i=8; i<16 ; i++){
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	ddec      	ble.n	8001cb8 <send_encrypted_immo_data+0x38>
	  }

	  HAL_CAN_AddTxMessage(&hcan1, &immo_1, first_byte, &tx_mail_box);
 8001cde:	f107 0214 	add.w	r2, r7, #20
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <send_encrypted_immo_data+0x94>)
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <send_encrypted_immo_data+0x98>)
 8001ce6:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <send_encrypted_immo_data+0x9c>)
 8001ce8:	f001 fd04 	bl	80036f4 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8001cec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cf0:	f000 feaa 	bl	8002a48 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &immo_2, second_byte, &tx_mail_box);
 8001cf4:	f107 020c 	add.w	r2, r7, #12
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <send_encrypted_immo_data+0x94>)
 8001cfa:	4909      	ldr	r1, [pc, #36]	@ (8001d20 <send_encrypted_immo_data+0xa0>)
 8001cfc:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <send_encrypted_immo_data+0x9c>)
 8001cfe:	f001 fcf9 	bl	80036f4 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8001d02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d06:	f000 fe9f 	bl	8002a48 <HAL_Delay>

  }
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20005450 	.word	0x20005450
 8001d18:	200053dc 	.word	0x200053dc
 8001d1c:	20000534 	.word	0x20000534
 8001d20:	200053f4 	.word	0x200053f4

08001d24 <convert_can_message_immo>:

  uint8_t convert_can_message_immo(char *res){
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

	  int j= 8;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	61fb      	str	r3, [r7, #28]

	  uint8_t result = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	76fb      	strb	r3, [r7, #27]

	  const char *m1 = "first immo received\n";
 8001d34:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <convert_can_message_immo+0xa0>)
 8001d36:	60fb      	str	r3, [r7, #12]
	  const char *m2 = "second immo received\n";
 8001d38:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <convert_can_message_immo+0xa4>)
 8001d3a:	60bb      	str	r3, [r7, #8]


	  if(RxHeader.ExtId == 0X1CABBAEE){
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <convert_can_message_immo+0xa8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <convert_can_message_immo+0xac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d117      	bne.n	8001d76 <convert_can_message_immo+0x52>
        for(int i=0; i<8; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e00b      	b.n	8001d64 <convert_can_message_immo+0x40>
        	get_encrypted_immo_data[i] = rx_data[i];
 8001d4c:	4a21      	ldr	r2, [pc, #132]	@ (8001dd4 <convert_can_message_immo+0xb0>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4413      	add	r3, r2
 8001d52:	7819      	ldrb	r1, [r3, #0]
 8001d54:	4a20      	ldr	r2, [pc, #128]	@ (8001dd8 <convert_can_message_immo+0xb4>)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	4413      	add	r3, r2
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<8; i++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	ddf0      	ble.n	8001d4c <convert_can_message_immo+0x28>
        result++;
 8001d6a:	7efb      	ldrb	r3, [r7, #27]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	76fb      	strb	r3, [r7, #27]
       // HAL_UART_Transmit(&huart1, (uint8_t *)rx_data, 8, HAL_MAX_DELAY);
       // HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
       // HAL_Delay(500);
        read_first_byte = 1;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <convert_can_message_immo+0xb8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]

	  }


	  if(RxHeader.ExtId == 0X1CABBBEE){
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <convert_can_message_immo+0xa8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <convert_can_message_immo+0xbc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11a      	bne.n	8001db6 <convert_can_message_immo+0x92>

		  result++;
 8001d80:	7efb      	ldrb	r3, [r7, #27]
 8001d82:	3301      	adds	r3, #1
 8001d84:	76fb      	strb	r3, [r7, #27]

		 // HAL_UART_Transmit(&huart1, (uint8_t *)rx_data, 8, HAL_MAX_DELAY);
		  //HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);


		  for(int i = 0; i<8; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e00e      	b.n	8001daa <convert_can_message_immo+0x86>

			  get_encrypted_immo_data[j] = rx_data[i];
 8001d8c:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <convert_can_message_immo+0xb0>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <convert_can_message_immo+0xb4>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
			  j++;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
		  for(int i = 0; i<8; i++){
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3301      	adds	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b07      	cmp	r3, #7
 8001dae:	dded      	ble.n	8001d8c <convert_can_message_immo+0x68>
		  }
		  read_second_byte = 1;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <convert_can_message_immo+0xc0>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	 	  }

	  return result;
 8001db6:	7efb      	ldrb	r3, [r7, #27]
  }
 8001db8:	4618      	mov	r0, r3
 8001dba:	3724      	adds	r7, #36	@ 0x24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	0801003c 	.word	0x0801003c
 8001dc8:	08010054 	.word	0x08010054
 8001dcc:	2000540c 	.word	0x2000540c
 8001dd0:	1cabbaee 	.word	0x1cabbaee
 8001dd4:	2000525c 	.word	0x2000525c
 8001dd8:	20000478 	.word	0x20000478
 8001ddc:	20000488 	.word	0x20000488
 8001de0:	1cabbbee 	.word	0x1cabbbee
 8001de4:	20000489 	.word	0x20000489

08001de8 <handle_valid_switch_start>:

  void handle_valid_switch_start(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	@ 0x38
 8001dec:	af00      	add	r7, sp, #0


		 char ecu_time[16] = {0}, immo_time[16] = {0};
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
		 char decrypted_data[16]= {0};
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

		 get_time(&_hour, &_minute, &_seconds);
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <handle_valid_switch_start+0x110>)
 8001e20:	4936      	ldr	r1, [pc, #216]	@ (8001efc <handle_valid_switch_start+0x114>)
 8001e22:	4837      	ldr	r0, [pc, #220]	@ (8001f00 <handle_valid_switch_start+0x118>)
 8001e24:	f7ff fdf2 	bl	8001a0c <get_time>
		 strcpy(ecu_time ,make_string_time(_hour, _minute));
 8001e28:	4b35      	ldr	r3, [pc, #212]	@ (8001f00 <handle_valid_switch_start+0x118>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a33      	ldr	r2, [pc, #204]	@ (8001efc <handle_valid_switch_start+0x114>)
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fe28 	bl	8001a88 <make_string_time>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00a fe36 	bl	800cab2 <strcpy>

	    strcpy(decrypted_data , make_decrypted_data(get_encrypted_immo_data));
 8001e46:	482f      	ldr	r0, [pc, #188]	@ (8001f04 <handle_valid_switch_start+0x11c>)
 8001e48:	f7ff feda 	bl	8001c00 <make_decrypted_data>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00a fe2d 	bl	800cab2 <strcpy>

	    for(int i=0; i<16;i++){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e5c:	e012      	b.n	8001e84 <handle_valid_switch_start+0x9c>

	    	    if(decrypted_data[i] == 'F')
 8001e5e:	1d3a      	adds	r2, r7, #4
 8001e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b46      	cmp	r3, #70	@ 0x46
 8001e68:	d010      	beq.n	8001e8c <handle_valid_switch_start+0xa4>
	    	    	break;

	   			 immo_time[i] = decrypted_data[i];
 8001e6a:	1d3a      	adds	r2, r7, #4
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6e:	4413      	add	r3, r2
 8001e70:	7819      	ldrb	r1, [r3, #0]
 8001e72:	f107 0214 	add.w	r2, r7, #20
 8001e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e78:	4413      	add	r3, r2
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	    for(int i=0; i<16;i++){
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e80:	3301      	adds	r3, #1
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	dde9      	ble.n	8001e5e <handle_valid_switch_start+0x76>
 8001e8a:	e000      	b.n	8001e8e <handle_valid_switch_start+0xa6>
	    	    	break;
 8001e8c:	bf00      	nop

	   		 }
	    HAL_UART_Transmit(&huart1, (uint8_t *)"immo time:", 10, HAL_MAX_DELAY);
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	220a      	movs	r2, #10
 8001e94:	491c      	ldr	r1, [pc, #112]	@ (8001f08 <handle_valid_switch_start+0x120>)
 8001e96:	481d      	ldr	r0, [pc, #116]	@ (8001f0c <handle_valid_switch_start+0x124>)
 8001e98:	f003 fea2 	bl	8005be0 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)immo_time, strlen(immo_time), HAL_MAX_DELAY);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe f9f5 	bl	8000290 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	f107 0114 	add.w	r1, r7, #20
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	4816      	ldr	r0, [pc, #88]	@ (8001f0c <handle_valid_switch_start+0x124>)
 8001eb4:	f003 fe94 	bl	8005be0 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4914      	ldr	r1, [pc, #80]	@ (8001f10 <handle_valid_switch_start+0x128>)
 8001ec0:	4812      	ldr	r0, [pc, #72]	@ (8001f0c <handle_valid_switch_start+0x124>)
 8001ec2:	f003 fe8d 	bl	8005be0 <HAL_UART_Transmit>
	    if(strcmp(ecu_time , immo_time)==0){
 8001ec6:	f107 0214 	add.w	r2, r7, #20
 8001eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe f97d 	bl	80001d0 <strcmp>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <handle_valid_switch_start+0x108>

	    	_engine_start_valid_ = OK_PERMISSION;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <handle_valid_switch_start+0x12c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)"VALID SWITCH\n", 13, HAL_MAX_DELAY);
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	220d      	movs	r2, #13
 8001ee8:	490b      	ldr	r1, [pc, #44]	@ (8001f18 <handle_valid_switch_start+0x130>)
 8001eea:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <handle_valid_switch_start+0x124>)
 8001eec:	f003 fe78 	bl	8005be0 <HAL_UART_Transmit>
	    }



  }
 8001ef0:	bf00      	nop
 8001ef2:	3738      	adds	r7, #56	@ 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000348 	.word	0x20000348
 8001efc:	20000344 	.word	0x20000344
 8001f00:	20000340 	.word	0x20000340
 8001f04:	20000478 	.word	0x20000478
 8001f08:	0801006c 	.word	0x0801006c
 8001f0c:	2000055c 	.word	0x2000055c
 8001f10:	0801001c 	.word	0x0801001c
 8001f14:	20000474 	.word	0x20000474
 8001f18:	08010078 	.word	0x08010078

08001f1c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]



   if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx_data) == HAL_OK){
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f001 fcb2 	bl	8003894 <HAL_CAN_GetRxMessage>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
	   get_message = 1;
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
   convert_can_message_immo("salam");
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001f3e:	f7ff fef1 	bl	8001d24 <convert_can_message_immo>
   if(read_first_byte == 1 && read_second_byte == 1)
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d105      	bne.n	8001f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
	   handle_valid_switch_start();
 8001f52:	f7ff ff49 	bl	8001de8 <handle_valid_switch_start>
}


}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000525c 	.word	0x2000525c
 8001f64:	2000540c 	.word	0x2000540c
 8001f68:	2000535d 	.word	0x2000535d
 8001f6c:	08010088 	.word	0x08010088
 8001f70:	20000488 	.word	0x20000488
 8001f74:	20000489 	.word	0x20000489

08001f78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x4c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d118      	bne.n	8001fbc <HAL_UART_RxCpltCallback+0x44>
	{

	UART_BUF_INDEX++;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x50>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x50>)
 8001f94:	701a      	strb	r2, [r3, #0]

	if(UART_BUF_INDEX>=  RX_BUFF_SIZE)
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x50>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2bf7      	cmp	r3, #247	@ 0xf7
 8001f9c:	d902      	bls.n	8001fa4 <HAL_UART_RxCpltCallback+0x2c>
		UART_BUF_INDEX = 0;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

	UART_RX_BUFF[UART_BUF_INDEX] = (char)get_data[0];
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x50>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_UART_RxCpltCallback+0x54>)
 8001fac:	7819      	ldrb	r1, [r3, #0]
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x58>)
 8001fb0:	5499      	strb	r1, [r3, r2]

	HAL_UART_Receive_IT(&huart1, get_data, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4905      	ldr	r1, [pc, #20]	@ (8001fcc <HAL_UART_RxCpltCallback+0x54>)
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <HAL_UART_RxCpltCallback+0x5c>)
 8001fb8:	f003 fe9d 	bl	8005cf6 <HAL_UART_Receive_IT>

	}
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	2000535c 	.word	0x2000535c
 8001fcc:	20005454 	.word	0x20005454
 8001fd0:	20005264 	.word	0x20005264
 8001fd4:	2000055c 	.word	0x2000055c

08001fd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	//  if(immo_read_ok ==2)
	//make_decrypted_data(get_encrypted_immo_data);
	 // HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, 12, HAL_MAX_DELAY);
	  //HAL_Delay(500);

    osDelay(1);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f005 fdb5 	bl	8007b50 <osDelay>
 8001fe6:	e7fb      	b.n	8001fe0 <StartDefaultTask+0x8>

08001fe8 <display_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_data */
void display_data(void *argument)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN display_data */
	 LCD16X2_Init(MyLCD);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f005 f9f3 	bl	80073dc <LCD16X2_Init>
	 LCD16X2_Clear(MyLCD);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f005 f970 	bl	80072dc <LCD16X2_Clear>
  /* Infinite loop */
  for(;;)
  {
	    while(_engine_start_valid_ == NO_PERMISSION){
 8001ffc:	e00c      	b.n	8002018 <display_data+0x30>

	    	LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2101      	movs	r1, #1
 8002002:	2000      	movs	r0, #0
 8002004:	f005 f9aa 	bl	800735c <LCD16X2_Set_Cursor>
	    		  	  LCD16X2_Write_String(MyLCD, "NO VALID SWITCH!");
 8002008:	4927      	ldr	r1, [pc, #156]	@ (80020a8 <display_data+0xc0>)
 800200a:	2000      	movs	r0, #0
 800200c:	f005 fc58 	bl	80078c0 <LCD16X2_Write_String>
	    	HAL_Delay(500);
 8002010:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002014:	f000 fd18 	bl	8002a48 <HAL_Delay>
	    while(_engine_start_valid_ == NO_PERMISSION){
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <display_data+0xc4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <display_data+0x16>
	    }

	   // else  if(_engine_start_valid_ == OK_PERMISSION)
	    {

	  	  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8002020:	2201      	movs	r2, #1
 8002022:	2101      	movs	r1, #1
 8002024:	2000      	movs	r0, #0
 8002026:	f005 f999 	bl	800735c <LCD16X2_Set_Cursor>
	  	  LCD16X2_Write_String(MyLCD, "RPM:");
 800202a:	4921      	ldr	r1, [pc, #132]	@ (80020b0 <display_data+0xc8>)
 800202c:	2000      	movs	r0, #0
 800202e:	f005 fc47 	bl	80078c0 <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	2102      	movs	r1, #2
 8002036:	2000      	movs	r0, #0
 8002038:	f005 f990 	bl	800735c <LCD16X2_Set_Cursor>
	  	  LCD16X2_Write_String(MyLCD, "Coolant:");
 800203c:	491d      	ldr	r1, [pc, #116]	@ (80020b4 <display_data+0xcc>)
 800203e:	2000      	movs	r0, #0
 8002040:	f005 fc3e 	bl	80078c0 <LCD16X2_Write_String>

	  	 LCD16X2_Set_Cursor(MyLCD, 1, 10);
 8002044:	220a      	movs	r2, #10
 8002046:	2101      	movs	r1, #1
 8002048:	2000      	movs	r0, #0
 800204a:	f005 f987 	bl	800735c <LCD16X2_Set_Cursor>
	     LCD16X2_Write_String(MyLCD, "FAN:");
 800204e:	491a      	ldr	r1, [pc, #104]	@ (80020b8 <display_data+0xd0>)
 8002050:	2000      	movs	r0, #0
 8002052:	f005 fc35 	bl	80078c0 <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 1, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	2101      	movs	r1, #1
 800205a:	2000      	movs	r0, #0
 800205c:	f005 f97e 	bl	800735c <LCD16X2_Set_Cursor>
	  	  itoa(input_rpm , adc_res_string , 10);
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <display_data+0xd4>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	220a      	movs	r2, #10
 8002066:	4916      	ldr	r1, [pc, #88]	@ (80020c0 <display_data+0xd8>)
 8002068:	4618      	mov	r0, r3
 800206a:	f009 fb89 	bl	800b780 <itoa>
	  	  LCD16X2_Write_String(MyLCD, adc_res_string);
 800206e:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <display_data+0xd8>)
 8002070:	2000      	movs	r0, #0
 8002072:	f005 fc25 	bl	80078c0 <LCD16X2_Write_String>

	  	  LCD16X2_Set_Cursor(MyLCD, 2, 10);
 8002076:	220a      	movs	r2, #10
 8002078:	2102      	movs	r1, #2
 800207a:	2000      	movs	r0, #0
 800207c:	f005 f96e 	bl	800735c <LCD16X2_Set_Cursor>
	  	  itoa(coolant_value  , adc_res_string , 10);
 8002080:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <display_data+0xdc>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	220a      	movs	r2, #10
 8002086:	490e      	ldr	r1, [pc, #56]	@ (80020c0 <display_data+0xd8>)
 8002088:	4618      	mov	r0, r3
 800208a:	f009 fb79 	bl	800b780 <itoa>
	  	 // snprintf(adc_res_string, sizeof(adc_res_string), "%.1f", (float)((coolant_value * 3.3) /4095));
	  	  LCD16X2_Write_String(MyLCD, adc_res_string);
 800208e:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <display_data+0xd8>)
 8002090:	2000      	movs	r0, #0
 8002092:	f005 fc15 	bl	80078c0 <LCD16X2_Write_String>

	  	  write_fan_status();
 8002096:	f7ff fc8d 	bl	80019b4 <write_fan_status>

	  	 osDelay(100);
 800209a:	2064      	movs	r0, #100	@ 0x64
 800209c:	f005 fd58 	bl	8007b50 <osDelay>

	  	  LCD16X2_Clear(MyLCD);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f005 f91b 	bl	80072dc <LCD16X2_Clear>
	    while(_engine_start_valid_ == NO_PERMISSION){
 80020a6:	e7b7      	b.n	8002018 <display_data+0x30>
 80020a8:	08010090 	.word	0x08010090
 80020ac:	20000474 	.word	0x20000474
 80020b0:	080100a4 	.word	0x080100a4
 80020b4:	080100ac 	.word	0x080100ac
 80020b8:	080100b8 	.word	0x080100b8
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000234 	.word	0x20000234
 80020c4:	20000244 	.word	0x20000244

080020c8 <can_send_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_send_data */
void can_send_data(void *argument)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_send_data */
  /* Infinite loop */
  for(;;)
  {
	   while(_engine_start_valid_ == NO_PERMISSION){
 80020d0:	e002      	b.n	80020d8 <can_send_data+0x10>
	    	   HAL_Delay(50);
 80020d2:	2032      	movs	r0, #50	@ 0x32
 80020d4:	f000 fcb8 	bl	8002a48 <HAL_Delay>
	   while(_engine_start_valid_ == NO_PERMISSION){
 80020d8:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <can_send_data+0xd8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f8      	beq.n	80020d2 <can_send_data+0xa>
	    }
	   //(_engine_start_valid_ == OK_PERMISSION)
			   {
	  /*RES = */HAL_CAN_AddTxMessage(&hcan1, &engine_rpm_header, rpm_data, &tx_mail_box);
 80020e0:	4b30      	ldr	r3, [pc, #192]	@ (80021a4 <can_send_data+0xdc>)
 80020e2:	4a31      	ldr	r2, [pc, #196]	@ (80021a8 <can_send_data+0xe0>)
 80020e4:	4931      	ldr	r1, [pc, #196]	@ (80021ac <can_send_data+0xe4>)
 80020e6:	4832      	ldr	r0, [pc, #200]	@ (80021b0 <can_send_data+0xe8>)
 80020e8:	f001 fb04 	bl	80036f4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 80020ec:	2032      	movs	r0, #50	@ 0x32
 80020ee:	f000 fcab 	bl	8002a48 <HAL_Delay>

		     HAL_CAN_AddTxMessage(&hcan1, &coolant_rpm_header, coolant_data, &tx_mail_box);
 80020f2:	4b2c      	ldr	r3, [pc, #176]	@ (80021a4 <can_send_data+0xdc>)
 80020f4:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <can_send_data+0xec>)
 80020f6:	4930      	ldr	r1, [pc, #192]	@ (80021b8 <can_send_data+0xf0>)
 80020f8:	482d      	ldr	r0, [pc, #180]	@ (80021b0 <can_send_data+0xe8>)
 80020fa:	f001 fafb 	bl	80036f4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 80020fe:	2032      	movs	r0, #50	@ 0x32
 8002100:	f000 fca2 	bl	8002a48 <HAL_Delay>


		     HAL_CAN_AddTxMessage(&hcan1, &fan_rpm_header, fan_data, &tx_mail_box);
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <can_send_data+0xdc>)
 8002106:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <can_send_data+0xf4>)
 8002108:	492d      	ldr	r1, [pc, #180]	@ (80021c0 <can_send_data+0xf8>)
 800210a:	4829      	ldr	r0, [pc, #164]	@ (80021b0 <can_send_data+0xe8>)
 800210c:	f001 faf2 	bl	80036f4 <HAL_CAN_AddTxMessage>
		     HAL_Delay(50);
 8002110:	2032      	movs	r0, #50	@ 0x32
 8002112:	f000 fc99 	bl	8002a48 <HAL_Delay>

		     if(get_message == 1)
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <can_send_data+0xfc>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d1dc      	bne.n	80020d8 <can_send_data+0x10>
		     {
		     get_message = rx_data[0];
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <can_send_data+0x100>)
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <can_send_data+0xfc>)
 8002124:	701a      	strb	r2, [r3, #0]
		     memset(data_to_send , 0 , 45);
 8002126:	222d      	movs	r2, #45	@ 0x2d
 8002128:	2100      	movs	r1, #0
 800212a:	4828      	ldr	r0, [pc, #160]	@ (80021cc <can_send_data+0x104>)
 800212c:	f00a fbcd 	bl	800c8ca <memset>
		     char temp_data[1];

		     for(i=0; i<8; i++){
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <can_send_data+0x108>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e021      	b.n	800217c <can_send_data+0xb4>

		     itoa(rx_data[i] , temp_data , 10);
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <can_send_data+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <can_send_data+0x100>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	4618      	mov	r0, r3
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	220a      	movs	r2, #10
 8002148:	4619      	mov	r1, r3
 800214a:	f009 fb19 	bl	800b780 <itoa>
		     strcat(data_to_send , temp_data);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	481d      	ldr	r0, [pc, #116]	@ (80021cc <can_send_data+0x104>)
 8002156:	f00a fbc0 	bl	800c8da <strcat>
		     strcat(data_to_send , ",");
 800215a:	481c      	ldr	r0, [pc, #112]	@ (80021cc <can_send_data+0x104>)
 800215c:	f7fe f898 	bl	8000290 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <can_send_data+0x104>)
 8002166:	4413      	add	r3, r2
 8002168:	491a      	ldr	r1, [pc, #104]	@ (80021d4 <can_send_data+0x10c>)
 800216a:	461a      	mov	r2, r3
 800216c:	460b      	mov	r3, r1
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	8013      	strh	r3, [r2, #0]
		     for(i=0; i<8; i++){
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <can_send_data+0x108>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <can_send_data+0x108>)
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <can_send_data+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b07      	cmp	r3, #7
 8002182:	ddd9      	ble.n	8002138 <can_send_data+0x70>
		     }
		     strcat(data_to_send, "\n");
 8002184:	4811      	ldr	r0, [pc, #68]	@ (80021cc <can_send_data+0x104>)
 8002186:	f7fe f883 	bl	8000290 <strlen>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <can_send_data+0x104>)
 8002190:	4413      	add	r3, r2
 8002192:	4911      	ldr	r1, [pc, #68]	@ (80021d8 <can_send_data+0x110>)
 8002194:	461a      	mov	r2, r3
 8002196:	460b      	mov	r3, r1
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	8013      	strh	r3, [r2, #0]
	   while(_engine_start_valid_ == NO_PERMISSION){
 800219c:	e79c      	b.n	80020d8 <can_send_data+0x10>
 800219e:	bf00      	nop
 80021a0:	20000474 	.word	0x20000474
 80021a4:	20005450 	.word	0x20005450
 80021a8:	20000020 	.word	0x20000020
 80021ac:	20005394 	.word	0x20005394
 80021b0:	20000534 	.word	0x20000534
 80021b4:	20000018 	.word	0x20000018
 80021b8:	200053ac 	.word	0x200053ac
 80021bc:	20000028 	.word	0x20000028
 80021c0:	200053c4 	.word	0x200053c4
 80021c4:	2000535d 	.word	0x2000535d
 80021c8:	2000525c 	.word	0x2000525c
 80021cc:	20005364 	.word	0x20005364
 80021d0:	20005360 	.word	0x20005360
 80021d4:	080100c0 	.word	0x080100c0
 80021d8:	0801001c 	.word	0x0801001c

080021dc <get_input_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_get_input_data */
void get_input_data(void *argument)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN get_input_data */
  /* Infinite loop */
  for(;;)
  {
     handle_rpm();
 80021e4:	f7ff fa6c 	bl	80016c0 <handle_rpm>
     handle_coolant();
 80021e8:	f7ff fb3a 	bl	8001860 <handle_coolant>
     handle_rpm();
 80021ec:	bf00      	nop
 80021ee:	e7f9      	b.n	80021e4 <get_input_data+0x8>

080021f0 <make_engine_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_make_engine_data */
void make_engine_data(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN make_engine_data */
  /* Infinite loop */
  for(;;)
  {

    make_coolant_can_data(coolant_value);
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <make_engine_data+0x2c>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fb7f 	bl	8001900 <make_coolant_can_data>
    make_rpm_can_data(input_rpm);
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <make_engine_data+0x30>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb5e 	bl	80018c8 <make_rpm_can_data>
    make_fan_can_data(coolant_value);
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <make_engine_data+0x2c>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fb91 	bl	8001938 <make_fan_can_data>
    make_coolant_can_data(coolant_value);
 8002216:	bf00      	nop
 8002218:	e7ee      	b.n	80021f8 <make_engine_data+0x8>
 800221a:	bf00      	nop
 800221c:	20000244 	.word	0x20000244
 8002220:	20000000 	.word	0x20000000

08002224 <make_immo_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_make_immo_data_func */
void make_immo_data_func(void *argument)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b096      	sub	sp, #88	@ 0x58
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN make_immo_data_func */

  /* Infinite loop */
  for(;;)
  {
     if(strcmp(uart_buff , immo_code) == 0){ //valid tag
 800222c:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <make_immo_data_func+0x6c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4818      	ldr	r0, [pc, #96]	@ (8002294 <make_immo_data_func+0x70>)
 8002234:	f7fd ffcc 	bl	80001d0 <strcmp>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d124      	bne.n	8002288 <make_immo_data_func+0x64>
	 get_time(&_hour, &_minute, &_seconds);
 800223e:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <make_immo_data_func+0x74>)
 8002240:	4916      	ldr	r1, [pc, #88]	@ (800229c <make_immo_data_func+0x78>)
 8002242:	4817      	ldr	r0, [pc, #92]	@ (80022a0 <make_immo_data_func+0x7c>)
 8002244:	f7ff fbe2 	bl	8001a0c <get_time>
	 char time_string[15];
	 char data_to_send[64];
	 strcpy(time_string , make_string_time(_hour , _minute));
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <make_immo_data_func+0x7c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <make_immo_data_func+0x78>)
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc18 	bl	8001a88 <make_string_time>
 8002258:	4602      	mov	r2, r0
 800225a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f00a fc26 	bl	800cab2 <strcpy>
	 strcpy(data_to_send ,make_encrypted_data(time_string));
 8002266:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fc38 	bl	8001ae0 <make_encrypted_data>
 8002270:	4602      	mov	r2, r0
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f00a fc1a 	bl	800cab2 <strcpy>
	// make_decrypted_data(data_to_send);
	 send_encrypted_immo_data(data_to_send);
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fcfc 	bl	8001c80 <send_encrypted_immo_data>
     }
	// HAL_UART_Transmit(&huart1, (uint8_t *)data_to_send, strlen(data_to_send), HAL_MAX_DELAY);
	// HAL_Delay(1000);
    osDelay(1);
 8002288:	2001      	movs	r0, #1
 800228a:	f005 fc61 	bl	8007b50 <osDelay>
     if(strcmp(uart_buff , immo_code) == 0){ //valid tag
 800228e:	e7cd      	b.n	800222c <make_immo_data_func+0x8>
 8002290:	20000014 	.word	0x20000014
 8002294:	20000248 	.word	0x20000248
 8002298:	20000348 	.word	0x20000348
 800229c:	20000344 	.word	0x20000344
 80022a0:	20000340 	.word	0x20000340

080022a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022b6:	f000 fba7 	bl	8002a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c6:	b672      	cpsid	i
}
 80022c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ca:	bf00      	nop
 80022cc:	e7fd      	b.n	80022ca <Error_Handler+0x8>
	...

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_MspInit+0x54>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_MspInit+0x54>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_MspInit+0x54>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_MspInit+0x54>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <HAL_MspInit+0x54>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_MspInit+0x54>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	210f      	movs	r1, #15
 8002312:	f06f 0001 	mvn.w	r0, #1
 8002316:	f001 feed 	bl	80040f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2f      	ldr	r2, [pc, #188]	@ (8002404 <HAL_ADC_MspInit+0xdc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d157      	bne.n	80023fa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	6453      	str	r3, [r2, #68]	@ 0x44
 800235a:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_ADC_MspInit+0xe0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002382:	231f      	movs	r3, #31
 8002384:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002386:	2303      	movs	r3, #3
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	481d      	ldr	r0, [pc, #116]	@ (800240c <HAL_ADC_MspInit+0xe4>)
 8002396:	f002 fad9 	bl	800494c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_ADC_MspInit+0xec>)
 800239e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023de:	480c      	ldr	r0, [pc, #48]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023e0:	f001 feb2 	bl	8004148 <HAL_DMA_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80023ea:	f7ff ff6a 	bl	80022c2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a07      	ldr	r2, [pc, #28]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80023f4:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <HAL_ADC_MspInit+0xe8>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012000 	.word	0x40012000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000
 8002410:	200004d4 	.word	0x200004d4
 8002414:	40026410 	.word	0x40026410

08002418 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1d      	ldr	r2, [pc, #116]	@ (80024ac <HAL_CAN_MspInit+0x94>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d133      	bne.n	80024a2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 8002444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_CAN_MspInit+0x98>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002472:	2303      	movs	r3, #3
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002482:	2309      	movs	r3, #9
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <HAL_CAN_MspInit+0x9c>)
 800248e:	f002 fa5d 	bl	800494c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2105      	movs	r1, #5
 8002496:	2014      	movs	r0, #20
 8002498:	f001 fe2c 	bl	80040f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800249c:	2014      	movs	r0, #20
 800249e:	f001 fe45 	bl	800412c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40006400 	.word	0x40006400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020c00 	.word	0x40020c00

080024b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002610 <HAL_UART_MspInit+0x158>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d135      	bne.n	8002546 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	4b4d      	ldr	r3, [pc, #308]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	4b46      	ldr	r3, [pc, #280]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a45      	ldr	r2, [pc, #276]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002512:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002524:	2307      	movs	r3, #7
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	483a      	ldr	r0, [pc, #232]	@ (8002618 <HAL_UART_MspInit+0x160>)
 8002530:	f002 fa0c 	bl	800494c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2105      	movs	r1, #5
 8002538:	2025      	movs	r0, #37	@ 0x25
 800253a:	f001 fddb 	bl	80040f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800253e:	2025      	movs	r0, #37	@ 0x25
 8002540:	f001 fdf4 	bl	800412c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002544:	e060      	b.n	8002608 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a34      	ldr	r2, [pc, #208]	@ (800261c <HAL_UART_MspInit+0x164>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d15b      	bne.n	8002608 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	4a2e      	ldr	r2, [pc, #184]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 800255a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002560:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6313      	str	r3, [r2, #48]	@ 0x30
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <HAL_UART_MspInit+0x15c>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002588:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800259a:	2307      	movs	r3, #7
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	481e      	ldr	r0, [pc, #120]	@ (8002620 <HAL_UART_MspInit+0x168>)
 80025a6:	f002 f9d1 	bl	800494c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002628 <HAL_UART_MspInit+0x170>)
 80025ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025de:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025ec:	480d      	ldr	r0, [pc, #52]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 80025ee:	f001 fdab 	bl	8004148 <HAL_DMA_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_MspInit+0x144>
      Error_Handler();
 80025f8:	f7ff fe63 	bl	80022c2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 8002600:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002602:	4a08      	ldr	r2, [pc, #32]	@ (8002624 <HAL_UART_MspInit+0x16c>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002608:	bf00      	nop
 800260a:	3730      	adds	r7, #48	@ 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40011000 	.word	0x40011000
 8002614:	40023800 	.word	0x40023800
 8002618:	40020000 	.word	0x40020000
 800261c:	40004800 	.word	0x40004800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	200005ec 	.word	0x200005ec
 8002628:	40026028 	.word	0x40026028

0800262c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	@ 0x38
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	4b34      	ldr	r3, [pc, #208]	@ (8002714 <HAL_InitTick+0xe8>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4a33      	ldr	r2, [pc, #204]	@ (8002714 <HAL_InitTick+0xe8>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6413      	str	r3, [r2, #64]	@ 0x40
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_InitTick+0xe8>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002658:	f107 0210 	add.w	r2, r7, #16
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f002 ff98 	bl	8005598 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002672:	f002 ff69 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8002676:	6378      	str	r0, [r7, #52]	@ 0x34
 8002678:	e004      	b.n	8002684 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800267a:	f002 ff65 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800267e:	4603      	mov	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_InitTick+0xec>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	3b01      	subs	r3, #1
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002692:	4b22      	ldr	r3, [pc, #136]	@ (800271c <HAL_InitTick+0xf0>)
 8002694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_InitTick+0xf0>)
 800269c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026a0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80026a2:	4a1e      	ldr	r2, [pc, #120]	@ (800271c <HAL_InitTick+0xf0>)
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_InitTick+0xf0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_InitTick+0xf0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_InitTick+0xf0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80026ba:	4818      	ldr	r0, [pc, #96]	@ (800271c <HAL_InitTick+0xf0>)
 80026bc:	f002 ff9e 	bl	80055fc <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11b      	bne.n	8002706 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80026ce:	4813      	ldr	r0, [pc, #76]	@ (800271c <HAL_InitTick+0xf0>)
 80026d0:	f002 ffee 	bl	80056b0 <HAL_TIM_Base_Start_IT>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80026da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d111      	bne.n	8002706 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026e2:	201c      	movs	r0, #28
 80026e4:	f001 fd22 	bl	800412c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	d808      	bhi.n	8002700 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80026ee:	2200      	movs	r2, #0
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	201c      	movs	r0, #28
 80026f4:	f001 fcfe 	bl	80040f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f8:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <HAL_InitTick+0xf4>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e002      	b.n	8002706 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002706:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800270a:	4618      	mov	r0, r3
 800270c:	3738      	adds	r7, #56	@ 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	431bde83 	.word	0x431bde83
 800271c:	20005488 	.word	0x20005488
 8002720:	20000034 	.word	0x20000034

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <DMA1_Stream1_IRQHandler+0x10>)
 8002762:	f001 fe89 	bl	8004478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200005ec 	.word	0x200005ec

08002770 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <CAN1_RX0_IRQHandler+0x10>)
 8002776:	f001 f9d5 	bl	8003b24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000534 	.word	0x20000534

08002784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <TIM2_IRQHandler+0x10>)
 800278a:	f003 f801 	bl	8005790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20005488 	.word	0x20005488

08002798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800279c:	4802      	ldr	r0, [pc, #8]	@ (80027a8 <USART1_IRQHandler+0x10>)
 800279e:	f003 faf5 	bl	8005d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000055c 	.word	0x2000055c

080027ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <DMA2_Stream0_IRQHandler+0x10>)
 80027b2:	f001 fe61 	bl	8004478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200004d4 	.word	0x200004d4

080027c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_kill>:

int _kill(int pid, int sig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027da:	f00a f93d 	bl	800ca58 <__errno>
 80027de:	4603      	mov	r3, r0
 80027e0:	2216      	movs	r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_exit>:

void _exit (int status)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffe7 	bl	80027d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <_exit+0x12>

08002806 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e00a      	b.n	800282e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002818:	f3af 8000 	nop.w
 800281c:	4601      	mov	r1, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	60ba      	str	r2, [r7, #8]
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	dbf0      	blt.n	8002818 <_read+0x12>
  }

  return len;
 8002836:	687b      	ldr	r3, [r7, #4]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e009      	b.n	8002866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbf1      	blt.n	8002852 <_write+0x12>
  }
  return len;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_close>:

int _close(int file)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a0:	605a      	str	r2, [r3, #4]
  return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_isatty>:

int _isatty(int file)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	@ (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f00a f8a2 	bl	800ca58 <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	@ (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20020000 	.word	0x20020000
 8002940:	00000400 	.word	0x00000400
 8002944:	200054d0 	.word	0x200054d0
 8002948:	2000a010 	.word	0x2000a010

0800294c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002974:	f7ff ffea 	bl	800294c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	@ (80029ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	@ (80029b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	@ (80029bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299e:	f00a f861 	bl	800ca64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7fe fb2f 	bl	8001004 <main>
  bx  lr    
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80029b4:	08012890 	.word	0x08012890
  ldr r2, =_sbss
 80029b8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80029bc:	2000a00c 	.word	0x2000a00c

080029c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_Init+0x40>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <HAL_Init+0x40>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_Init+0x40>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f001 fb76 	bl	80040de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	200f      	movs	r0, #15
 80029f4:	f7ff fe1a 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fc6a 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000038 	.word	0x20000038
 8002a2c:	200054d4 	.word	0x200054d4

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200054d4 	.word	0x200054d4

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000038 	.word	0x20000038

08002a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e033      	b.n	8002b0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fc3a 	bl	8002328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ad6:	f023 0302 	bic.w	r3, r3, #2
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa68 	bl	8002fb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002afe:	e001      	b.n	8002b04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x1e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0e9      	b.n	8002d0a <HAL_ADC_Start_DMA+0x1f2>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d018      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_ADC_Start_DMA+0x1fc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <HAL_ADC_Start_DMA+0x200>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9a      	lsrs	r2, r3, #18
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b8c:	d107      	bne.n	8002b9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b9c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 80a1 	bne.w	8002cf0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f023 0206 	bic.w	r2, r3, #6
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bfa:	e002      	b.n	8002c02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c0a:	4b44      	ldr	r3, [pc, #272]	@ (8002d1c <HAL_ADC_Start_DMA+0x204>)
 8002c0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	4a43      	ldr	r2, [pc, #268]	@ (8002d20 <HAL_ADC_Start_DMA+0x208>)
 8002c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	4a42      	ldr	r2, [pc, #264]	@ (8002d24 <HAL_ADC_Start_DMA+0x20c>)
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	4a41      	ldr	r2, [pc, #260]	@ (8002d28 <HAL_ADC_Start_DMA+0x210>)
 8002c24:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c3e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	334c      	adds	r3, #76	@ 0x4c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f001 fb20 	bl	80042a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d12a      	bne.n	8002cc6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2d      	ldr	r2, [pc, #180]	@ (8002d2c <HAL_ADC_Start_DMA+0x214>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d015      	beq.n	8002ca6 <HAL_ADC_Start_DMA+0x18e>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d30 <HAL_ADC_Start_DMA+0x218>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_Start_DMA+0x178>
 8002c84:	4b25      	ldr	r3, [pc, #148]	@ (8002d1c <HAL_ADC_Start_DMA+0x204>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a27      	ldr	r2, [pc, #156]	@ (8002d34 <HAL_ADC_Start_DMA+0x21c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d136      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_ADC_Start_DMA+0x204>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d130      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d129      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e020      	b.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a18      	ldr	r2, [pc, #96]	@ (8002d2c <HAL_ADC_Start_DMA+0x214>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d11b      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d114      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	e00b      	b.n	8002d08 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000030 	.word	0x20000030
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	080031b1 	.word	0x080031b1
 8002d24:	0800326b 	.word	0x0800326b
 8002d28:	08003287 	.word	0x08003287
 8002d2c:	40012000 	.word	0x40012000
 8002d30:	40012100 	.word	0x40012100
 8002d34:	40012200 	.word	0x40012200

08002d38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e105      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x228>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d925      	bls.n	8002dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	409a      	lsls	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	2207      	movs	r2, #7
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4403      	add	r3, r0
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b05      	subs	r3, #5
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e82:	e04c      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b23      	subs	r3, #35	@ 0x23
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b23      	subs	r3, #35	@ 0x23
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed4:	e023      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b41      	subs	r3, #65	@ 0x41
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b41      	subs	r3, #65	@ 0x41
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x234>)
 8002f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <HAL_ADC_ConfigChannel+0x238>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1cc>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a19      	ldr	r2, [pc, #100]	@ (8002fac <HAL_ADC_ConfigChannel+0x238>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d123      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d003      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x1e6>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b11      	cmp	r3, #17
 8002f58:	d11b      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d111      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x23c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a10      	ldr	r2, [pc, #64]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x240>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	0c9a      	lsrs	r2, r3, #18
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	20000030 	.word	0x20000030
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc0:	4b79      	ldr	r3, [pc, #484]	@ (80031a8 <ADC_Init+0x1f0>)
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	4a58      	ldr	r2, [pc, #352]	@ (80031ac <ADC_Init+0x1f4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800305e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e00f      	b.n	80030b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0202 	bic.w	r2, r2, #2
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
 80030d0:	005a      	lsls	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	3b01      	subs	r3, #1
 8003110:	035a      	lsls	r2, r3, #13
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e007      	b.n	800312c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	3b01      	subs	r3, #1
 8003148:	051a      	lsls	r2, r3, #20
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800316e:	025a      	lsls	r2, r3, #9
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	029a      	lsls	r2, r3, #10
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012300 	.word	0x40012300
 80031ac:	0f000001 	.word	0x0f000001

080031b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d13c      	bne.n	8003244 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12b      	bne.n	800323c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d127      	bne.n	800323c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003204:	2b00      	cmp	r3, #0
 8003206:	d119      	bne.n	800323c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0220 	bic.w	r2, r2, #32
 8003216:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff fd7b 	bl	8002d38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003242:	e00e      	b.n	8003262 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff fd85 	bl	8002d60 <HAL_ADC_ErrorCallback>
}
 8003256:	e004      	b.n	8003262 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff fd67 	bl	8002d4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff fd5a 	bl	8002d60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0ed      	b.n	80034a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f8a0 	bl	8002418 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e8:	f7ff fba2 	bl	8002a30 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032ee:	e012      	b.n	8003316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032f0:	f7ff fb9e 	bl	8002a30 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	d90b      	bls.n	8003316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0c5      	b.n	80034a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0e5      	beq.n	80032f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0202 	bic.w	r2, r2, #2
 8003332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003334:	f7ff fb7c 	bl	8002a30 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800333a:	e012      	b.n	8003362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800333c:	f7ff fb78 	bl	8002a30 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b0a      	cmp	r3, #10
 8003348:	d90b      	bls.n	8003362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2205      	movs	r2, #5
 800335a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e09f      	b.n	80034a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e1b      	ldrb	r3, [r3, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d108      	bne.n	800338a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e007      	b.n	800339a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7e5b      	ldrb	r3, [r3, #25]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7e9b      	ldrb	r3, [r3, #26]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d108      	bne.n	80033de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0220 	bic.w	r2, r2, #32
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7edb      	ldrb	r3, [r3, #27]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0210 	bic.w	r2, r2, #16
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e007      	b.n	8003418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0210 	orr.w	r2, r2, #16
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7f1b      	ldrb	r3, [r3, #28]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d108      	bne.n	8003432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e007      	b.n	8003442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0208 	bic.w	r2, r2, #8
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7f5b      	ldrb	r3, [r3, #29]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0204 	orr.w	r2, r2, #4
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	ea42 0103 	orr.w	r1, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	1e5a      	subs	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d003      	beq.n	80034d2 <HAL_CAN_ConfigFilter+0x26>
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	f040 80be 	bne.w	800364e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80034d2:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <HAL_CAN_ConfigFilter+0x1bc>)
 80034d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	431a      	orrs	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	401a      	ands	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d123      	bne.n	800357c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003556:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3248      	adds	r2, #72	@ 0x48
 800355c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003570:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	3348      	adds	r3, #72	@ 0x48
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d122      	bne.n	80035ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	431a      	orrs	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80035a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3248      	adds	r2, #72	@ 0x48
 80035aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	3348      	adds	r3, #72	@ 0x48
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	401a      	ands	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43db      	mvns	r3, r3
 8003608:	401a      	ands	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003610:	e007      	b.n	8003622 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	431a      	orrs	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	431a      	orrs	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003640:	f023 0201 	bic.w	r2, r3, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e006      	b.n	800365c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40006400 	.word	0x40006400

0800366c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d12e      	bne.n	80036de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003698:	f7ff f9ca 	bl	8002a30 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800369e:	e012      	b.n	80036c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a0:	f7ff f9c6 	bl	8002a30 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b0a      	cmp	r3, #10
 80036ac:	d90b      	bls.n	80036c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2205      	movs	r2, #5
 80036be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e012      	b.n	80036ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e006      	b.n	80036ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	@ 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003708:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d003      	beq.n	8003720 <HAL_CAN_AddTxMessage+0x2c>
 8003718:	7ffb      	ldrb	r3, [r7, #31]
 800371a:	2b02      	cmp	r3, #2
 800371c:	f040 80ad 	bne.w	800387a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8095 	beq.w	800386a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	0e1b      	lsrs	r3, r3, #24
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10d      	bne.n	8003778 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	6809      	ldr	r1, [r1, #0]
 800376a:	431a      	orrs	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e00f      	b.n	8003798 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003782:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800378c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3318      	adds	r3, #24
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	440b      	add	r3, r1
 8003796:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3318      	adds	r3, #24
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	440b      	add	r3, r1
 80037a8:	3304      	adds	r3, #4
 80037aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	7d1b      	ldrb	r3, [r3, #20]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d111      	bne.n	80037d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3318      	adds	r3, #24
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6811      	ldr	r1, [r2, #0]
 80037c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3318      	adds	r3, #24
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	440b      	add	r3, r1
 80037d4:	3304      	adds	r3, #4
 80037d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3307      	adds	r3, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	061a      	lsls	r2, r3, #24
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3306      	adds	r3, #6
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3305      	adds	r3, #5
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	4313      	orrs	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	3204      	adds	r2, #4
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	4610      	mov	r0, r2
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6811      	ldr	r1, [r2, #0]
 8003800:	ea43 0200 	orr.w	r2, r3, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	440b      	add	r3, r1
 800380a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800380e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3303      	adds	r3, #3
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	061a      	lsls	r2, r3, #24
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3302      	adds	r3, #2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3301      	adds	r3, #1
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	4313      	orrs	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	4610      	mov	r0, r2
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	ea43 0200 	orr.w	r2, r3, r0
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	440b      	add	r3, r1
 8003840:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003844:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3318      	adds	r3, #24
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	4413      	add	r3, r2
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	6811      	ldr	r1, [r2, #0]
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3318      	adds	r3, #24
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	440b      	add	r3, r1
 8003864:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e00e      	b.n	8003888 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e006      	b.n	8003888 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3724      	adds	r7, #36	@ 0x24
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d003      	beq.n	80038b8 <HAL_CAN_GetRxMessage+0x24>
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	f040 8103 	bne.w	8003abe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d116      	bne.n	80038fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0f7      	b.n	8003acc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e8      	b.n	8003acc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	331b      	adds	r3, #27
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0204 	and.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10c      	bne.n	8003932 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	331b      	adds	r3, #27
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	4413      	add	r3, r2
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0d5b      	lsrs	r3, r3, #21
 8003928:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e00b      	b.n	800394a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	331b      	adds	r3, #27
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4413      	add	r3, r2
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	331b      	adds	r3, #27
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	4413      	add	r3, r2
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0202 	and.w	r2, r3, #2
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	331b      	adds	r3, #27
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2208      	movs	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	e00b      	b.n	8003998 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	331b      	adds	r3, #27
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	331b      	adds	r3, #27
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	331b      	adds	r3, #27
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	4413      	add	r3, r2
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0a1a      	lsrs	r2, r3, #8
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0c1a      	lsrs	r2, r3, #16
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0e1a      	lsrs	r2, r3, #24
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	3303      	adds	r3, #3
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0a1a      	lsrs	r2, r3, #8
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	3305      	adds	r3, #5
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0c1a      	lsrs	r2, r3, #16
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3306      	adds	r3, #6
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e1a      	lsrs	r2, r3, #24
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	3307      	adds	r3, #7
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0220 	orr.w	r2, r2, #32
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	e007      	b.n	8003aba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0220 	orr.w	r2, r2, #32
 8003ab8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e006      	b.n	8003acc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <HAL_CAN_ActivateNotification+0x1e>
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d109      	bne.n	8003b0a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6959      	ldr	r1, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e006      	b.n	8003b18 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d07c      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f983 	bl	8003e92 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b8c:	e016      	b.n	8003bbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba0:	e00c      	b.n	8003bbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb4:	e002      	b.n	8003bbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f989 	bl	8003ece <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d024      	beq.n	8003c10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f963 	bl	8003ea6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003be0:	e016      	b.n	8003c10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf4:	e00c      	b.n	8003c10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	e002      	b.n	8003c10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f969 	bl	8003ee2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d024      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f943 	bl	8003eba <HAL_CAN_TxMailbox2CompleteCallback>
 8003c34:	e016      	b.n	8003c64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	e00c      	b.n	8003c64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5c:	e002      	b.n	8003c64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f949 	bl	8003ef6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f930 	bl	8003f0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe f92a 	bl	8001f1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2208      	movs	r2, #8
 8003d06:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f912 	bl	8003f32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8f9 	bl	8003f1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2210      	movs	r2, #16
 8003d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8fc 	bl	8003f46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2208      	movs	r2, #8
 8003d68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8f5 	bl	8003f5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d07b      	beq.n	8003e72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d072      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d043      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03e      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003df2:	2b60      	cmp	r3, #96	@ 0x60
 8003df4:	d02b      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x32a>
 8003df6:	2b60      	cmp	r3, #96	@ 0x60
 8003df8:	d82e      	bhi.n	8003e58 <HAL_CAN_IRQHandler+0x334>
 8003dfa:	2b50      	cmp	r3, #80	@ 0x50
 8003dfc:	d022      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x320>
 8003dfe:	2b50      	cmp	r3, #80	@ 0x50
 8003e00:	d82a      	bhi.n	8003e58 <HAL_CAN_IRQHandler+0x334>
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d019      	beq.n	8003e3a <HAL_CAN_IRQHandler+0x316>
 8003e06:	2b40      	cmp	r3, #64	@ 0x40
 8003e08:	d826      	bhi.n	8003e58 <HAL_CAN_IRQHandler+0x334>
 8003e0a:	2b30      	cmp	r3, #48	@ 0x30
 8003e0c:	d010      	beq.n	8003e30 <HAL_CAN_IRQHandler+0x30c>
 8003e0e:	2b30      	cmp	r3, #48	@ 0x30
 8003e10:	d822      	bhi.n	8003e58 <HAL_CAN_IRQHandler+0x334>
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d002      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x2f8>
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d005      	beq.n	8003e26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e1a:	e01d      	b.n	8003e58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	f043 0308 	orr.w	r3, r3, #8
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e24:	e019      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	f043 0310 	orr.w	r3, r3, #16
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e2e:	e014      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	f043 0320 	orr.w	r3, r3, #32
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e38:	e00f      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e42:	e00a      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e4c:	e005      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e56:	e000      	b.n	8003e5a <HAL_CAN_IRQHandler+0x336>
            break;
 8003e58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003e68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f872 	bl	8003f6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3728      	adds	r7, #40	@ 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f94:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	@ (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0307 	and.w	r3, r3, #7
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db0b      	blt.n	8004012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4907      	ldr	r1, [pc, #28]	@ (8004020 <__NVIC_EnableIRQ+0x38>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2001      	movs	r0, #1
 800400a:	fa00 f202 	lsl.w	r2, r0, r2
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db0a      	blt.n	800404e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	490c      	ldr	r1, [pc, #48]	@ (8004070 <__NVIC_SetPriority+0x4c>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	440b      	add	r3, r1
 8004048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800404c:	e00a      	b.n	8004064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4908      	ldr	r1, [pc, #32]	@ (8004074 <__NVIC_SetPriority+0x50>)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3b04      	subs	r3, #4
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	440b      	add	r3, r1
 8004062:	761a      	strb	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	@ 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf28      	it	cs
 8004096:	2304      	movcs	r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3304      	adds	r3, #4
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d902      	bls.n	80040a8 <NVIC_EncodePriority+0x30>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3b03      	subs	r3, #3
 80040a6:	e000      	b.n	80040aa <NVIC_EncodePriority+0x32>
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c0:	f04f 31ff 	mov.w	r1, #4294967295
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	4313      	orrs	r3, r2
         );
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	@ 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff4c 	bl	8003f84 <__NVIC_SetPriorityGrouping>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004106:	f7ff ff61 	bl	8003fcc <__NVIC_GetPriorityGrouping>
 800410a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	6978      	ldr	r0, [r7, #20]
 8004112:	f7ff ffb1 	bl	8004078 <NVIC_EncodePriority>
 8004116:	4602      	mov	r2, r0
 8004118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff80 	bl	8004024 <__NVIC_SetPriority>
}
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff54 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7fe fc6c 	bl	8002a30 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e099      	b.n	8004298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004184:	e00f      	b.n	80041a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004186:	f7fe fc53 	bl	8002a30 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b05      	cmp	r3, #5
 8004192:	d908      	bls.n	80041a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e078      	b.n	8004298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e8      	bne.n	8004186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <HAL_DMA_Init+0x158>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	4313      	orrs	r3, r2
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	2b04      	cmp	r3, #4
 8004238:	d117      	bne.n	800426a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00e      	beq.n	800426a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb01 	bl	8004854 <DMA_CheckFifoParam>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2240      	movs	r2, #64	@ 0x40
 800425c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004266:	2301      	movs	r3, #1
 8004268:	e016      	b.n	8004298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fab8 	bl	80047e8 <DMA_CalcBaseAndBitshift>
 8004278:	4603      	mov	r3, r0
 800427a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	223f      	movs	r2, #63	@ 0x3f
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	f010803f 	.word	0xf010803f

080042a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_DMA_Start_IT+0x26>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e040      	b.n	800434c <HAL_DMA_Start_IT+0xa8>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12f      	bne.n	800433e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa4a 	bl	800478c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fc:	223f      	movs	r2, #63	@ 0x3f
 80042fe:	409a      	lsls	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0216 	orr.w	r2, r2, #22
 8004312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e005      	b.n	800434a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004346:	2302      	movs	r3, #2
 8004348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800434a:	7dfb      	ldrb	r3, [r7, #23]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004362:	f7fe fb65 	bl	8002a30 <HAL_GetTick>
 8004366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d008      	beq.n	8004386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	@ 0x80
 8004378:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e052      	b.n	800442c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0216 	bic.w	r2, r2, #22
 8004394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_DMA_Abort+0x62>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0208 	bic.w	r2, r2, #8
 80043c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d6:	e013      	b.n	8004400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043d8:	f7fe fb2a 	bl	8002a30 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d90c      	bls.n	8004400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e015      	b.n	800442c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e4      	bne.n	80043d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	223f      	movs	r2, #63	@ 0x3f
 8004414:	409a      	lsls	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d004      	beq.n	8004452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e00c      	b.n	800446c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2205      	movs	r2, #5
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004484:	4b8e      	ldr	r3, [pc, #568]	@ (80046c0 <HAL_DMA_IRQHandler+0x248>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a8e      	ldr	r2, [pc, #568]	@ (80046c4 <HAL_DMA_IRQHandler+0x24c>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	0a9b      	lsrs	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	2208      	movs	r2, #8
 80044a4:	409a      	lsls	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01a      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d0:	2208      	movs	r2, #8
 80044d2:	409a      	lsls	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004506:	2201      	movs	r2, #1
 8004508:	409a      	lsls	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f043 0202 	orr.w	r2, r3, #2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	2204      	movs	r2, #4
 8004520:	409a      	lsls	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d012      	beq.n	8004550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453c:	2204      	movs	r2, #4
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004548:	f043 0204 	orr.w	r2, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	2210      	movs	r2, #16
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d043      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03c      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004572:	2210      	movs	r2, #16
 8004574:	409a      	lsls	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d018      	beq.n	80045ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
 80045a6:	e01f      	b.n	80045e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
 80045b8:	e016      	b.n	80045e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0208 	bic.w	r2, r2, #8
 80045d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	2220      	movs	r2, #32
 80045ee:	409a      	lsls	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 808f 	beq.w	8004718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8087 	beq.w	8004718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	2220      	movs	r2, #32
 8004610:	409a      	lsls	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b05      	cmp	r3, #5
 8004620:	d136      	bne.n	8004690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0216 	bic.w	r2, r2, #22
 8004630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <HAL_DMA_IRQHandler+0x1da>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0208 	bic.w	r2, r2, #8
 8004660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	223f      	movs	r2, #63	@ 0x3f
 8004668:	409a      	lsls	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d07e      	beq.n	8004784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
        }
        return;
 800468e:	e079      	b.n	8004784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01d      	beq.n	80046da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10d      	bne.n	80046c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d031      	beq.n	8004718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
 80046bc:	e02c      	b.n	8004718 <HAL_DMA_IRQHandler+0x2a0>
 80046be:	bf00      	nop
 80046c0:	20000030 	.word	0x20000030
 80046c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d023      	beq.n	8004718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
 80046d8:	e01e      	b.n	8004718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10f      	bne.n	8004708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0210 	bic.w	r2, r2, #16
 80046f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d032      	beq.n	8004786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d022      	beq.n	8004772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2205      	movs	r2, #5
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3301      	adds	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	d307      	bcc.n	8004760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f2      	bne.n	8004744 <HAL_DMA_IRQHandler+0x2cc>
 800475e:	e000      	b.n	8004762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
 8004782:	e000      	b.n	8004786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004784:	bf00      	nop
    }
  }
}
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b40      	cmp	r3, #64	@ 0x40
 80047b8:	d108      	bne.n	80047cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ca:	e007      	b.n	80047dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	3b10      	subs	r3, #16
 80047f8:	4a14      	ldr	r2, [pc, #80]	@ (800484c <DMA_CalcBaseAndBitshift+0x64>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004802:	4a13      	ldr	r2, [pc, #76]	@ (8004850 <DMA_CalcBaseAndBitshift+0x68>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d909      	bls.n	800482a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	659a      	str	r2, [r3, #88]	@ 0x58
 8004828:	e007      	b.n	800483a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	aaaaaaab 	.word	0xaaaaaaab
 8004850:	080101cc 	.word	0x080101cc

08004854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11f      	bne.n	80048ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d856      	bhi.n	8004922 <DMA_CheckFifoParam+0xce>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <DMA_CheckFifoParam+0x28>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	0800488d 	.word	0x0800488d
 8004880:	0800489f 	.word	0x0800489f
 8004884:	0800488d 	.word	0x0800488d
 8004888:	08004923 	.word	0x08004923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d046      	beq.n	8004926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489c:	e043      	b.n	8004926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048a6:	d140      	bne.n	800492a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ac:	e03d      	b.n	800492a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b6:	d121      	bne.n	80048fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d837      	bhi.n	800492e <DMA_CheckFifoParam+0xda>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <DMA_CheckFifoParam+0x70>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048d5 	.word	0x080048d5
 80048c8:	080048db 	.word	0x080048db
 80048cc:	080048d5 	.word	0x080048d5
 80048d0:	080048ed 	.word	0x080048ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e030      	b.n	800493c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d025      	beq.n	8004932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ea:	e022      	b.n	8004932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048f4:	d11f      	bne.n	8004936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048fa:	e01c      	b.n	8004936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d903      	bls.n	800490a <DMA_CheckFifoParam+0xb6>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d003      	beq.n	8004910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004908:	e018      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
      break;
 800490e:	e015      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00e      	beq.n	800493a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e00b      	b.n	800493a <DMA_CheckFifoParam+0xe6>
      break;
 8004922:	bf00      	nop
 8004924:	e00a      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e008      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
 800492c:	e006      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
 8004930:	e004      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;   
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <DMA_CheckFifoParam+0xe8>
      break;
 800493a:	bf00      	nop
    }
  } 
  
  return status; 
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop

0800494c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	@ 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e16b      	b.n	8004c40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004968:	2201      	movs	r2, #1
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	f040 815a 	bne.w	8004c3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d005      	beq.n	800499e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800499a:	2b02      	cmp	r3, #2
 800499c:	d130      	bne.n	8004a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049d4:	2201      	movs	r2, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 0201 	and.w	r2, r3, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d017      	beq.n	8004a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2203      	movs	r2, #3
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d123      	bne.n	8004a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	08da      	lsrs	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3208      	adds	r2, #8
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	220f      	movs	r2, #15
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08da      	lsrs	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3208      	adds	r2, #8
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0203 	and.w	r2, r3, #3
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80b4 	beq.w	8004c3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b60      	ldr	r3, [pc, #384]	@ (8004c58 <HAL_GPIO_Init+0x30c>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	4a5f      	ldr	r2, [pc, #380]	@ (8004c58 <HAL_GPIO_Init+0x30c>)
 8004adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c58 <HAL_GPIO_Init+0x30c>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aee:	4a5b      	ldr	r2, [pc, #364]	@ (8004c5c <HAL_GPIO_Init+0x310>)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	3302      	adds	r3, #2
 8004af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	220f      	movs	r2, #15
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a52      	ldr	r2, [pc, #328]	@ (8004c60 <HAL_GPIO_Init+0x314>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d02b      	beq.n	8004b72 <HAL_GPIO_Init+0x226>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a51      	ldr	r2, [pc, #324]	@ (8004c64 <HAL_GPIO_Init+0x318>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d025      	beq.n	8004b6e <HAL_GPIO_Init+0x222>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a50      	ldr	r2, [pc, #320]	@ (8004c68 <HAL_GPIO_Init+0x31c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01f      	beq.n	8004b6a <HAL_GPIO_Init+0x21e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8004c6c <HAL_GPIO_Init+0x320>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d019      	beq.n	8004b66 <HAL_GPIO_Init+0x21a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a4e      	ldr	r2, [pc, #312]	@ (8004c70 <HAL_GPIO_Init+0x324>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_GPIO_Init+0x216>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4d      	ldr	r2, [pc, #308]	@ (8004c74 <HAL_GPIO_Init+0x328>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00d      	beq.n	8004b5e <HAL_GPIO_Init+0x212>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a4c      	ldr	r2, [pc, #304]	@ (8004c78 <HAL_GPIO_Init+0x32c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <HAL_GPIO_Init+0x20e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c7c <HAL_GPIO_Init+0x330>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d101      	bne.n	8004b56 <HAL_GPIO_Init+0x20a>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e00e      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b56:	2308      	movs	r3, #8
 8004b58:	e00c      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	e00a      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b5e:	2305      	movs	r3, #5
 8004b60:	e008      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e006      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b66:	2303      	movs	r3, #3
 8004b68:	e004      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e002      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_GPIO_Init+0x228>
 8004b72:	2300      	movs	r3, #0
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	f002 0203 	and.w	r2, r2, #3
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	4093      	lsls	r3, r2
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b84:	4935      	ldr	r1, [pc, #212]	@ (8004c5c <HAL_GPIO_Init+0x310>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b92:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bb6:	4a32      	ldr	r2, [pc, #200]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bbc:	4b30      	ldr	r3, [pc, #192]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004be0:	4a27      	ldr	r2, [pc, #156]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004be6:	4b26      	ldr	r3, [pc, #152]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c34:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <HAL_GPIO_Init+0x334>)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	f67f ae90 	bls.w	8004968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3724      	adds	r7, #36	@ 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40013800 	.word	0x40013800
 8004c60:	40020000 	.word	0x40020000
 8004c64:	40020400 	.word	0x40020400
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40021400 	.word	0x40021400
 8004c78:	40021800 	.word	0x40021800
 8004c7c:	40021c00 	.word	0x40021c00
 8004c80:	40013c00 	.word	0x40013c00

08004c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	887b      	ldrh	r3, [r7, #2]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	e001      	b.n	8004ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cc4:	787b      	ldrb	r3, [r7, #1]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cca:	887a      	ldrh	r2, [r7, #2]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cd0:	e003      	b.n	8004cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cd2:	887b      	ldrh	r3, [r7, #2]
 8004cd4:	041a      	lsls	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	619a      	str	r2, [r3, #24]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e267      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d075      	beq.n	8004df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d06:	4b88      	ldr	r3, [pc, #544]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d00c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d12:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d112      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d1e:	4b82      	ldr	r3, [pc, #520]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d2a:	d10b      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x108>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d157      	bne.n	8004df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e242      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x74>
 8004d4e:	4b76      	ldr	r3, [pc, #472]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a75      	ldr	r2, [pc, #468]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e01d      	b.n	8004d98 <HAL_RCC_OscConfig+0xb0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x98>
 8004d66:	4b70      	ldr	r3, [pc, #448]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b6d      	ldr	r3, [pc, #436]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6c      	ldr	r2, [pc, #432]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0xb0>
 8004d80:	4b69      	ldr	r3, [pc, #420]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a68      	ldr	r2, [pc, #416]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	4b66      	ldr	r3, [pc, #408]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a65      	ldr	r2, [pc, #404]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d013      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fd fe46 	bl	8002a30 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fd fe42 	bl	8002a30 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e207      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b5b      	ldr	r3, [pc, #364]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0xc0>
 8004dc6:	e014      	b.n	8004df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fe32 	bl	8002a30 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fd fe2e 	bl	8002a30 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1f3      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de2:	4b51      	ldr	r3, [pc, #324]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0xe8>
 8004dee:	e000      	b.n	8004df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d063      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d11c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e16:	4b44      	ldr	r3, [pc, #272]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d116      	bne.n	8004e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_RCC_OscConfig+0x152>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e1c7      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4937      	ldr	r1, [pc, #220]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4e:	e03a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e58:	4b34      	ldr	r3, [pc, #208]	@ (8004f2c <HAL_RCC_OscConfig+0x244>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd fde7 	bl	8002a30 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fd fde3 	bl	8002a30 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e1a8      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e78:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e84:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4925      	ldr	r1, [pc, #148]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]
 8004e98:	e015      	b.n	8004ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <HAL_RCC_OscConfig+0x244>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fdc6 	bl	8002a30 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea8:	f7fd fdc2 	bl	8002a30 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e187      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eba:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d036      	beq.n	8004f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCC_OscConfig+0x248>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fda6 	bl	8002a30 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fd fda2 	bl	8002a30 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e167      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_OscConfig+0x240>)
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x200>
 8004f06:	e01b      	b.n	8004f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f08:	4b09      	ldr	r3, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x248>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fd8f 	bl	8002a30 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f14:	e00e      	b.n	8004f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f16:	f7fd fd8b 	bl	8002a30 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d907      	bls.n	8004f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e150      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470000 	.word	0x42470000
 8004f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	4b88      	ldr	r3, [pc, #544]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ea      	bne.n	8004f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8097 	beq.w	800507c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f52:	4b81      	ldr	r3, [pc, #516]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	4b7d      	ldr	r3, [pc, #500]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	4a7c      	ldr	r2, [pc, #496]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	4b77      	ldr	r3, [pc, #476]	@ (800515c <HAL_RCC_OscConfig+0x474>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d118      	bne.n	8004fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8a:	4b74      	ldr	r3, [pc, #464]	@ (800515c <HAL_RCC_OscConfig+0x474>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a73      	ldr	r2, [pc, #460]	@ (800515c <HAL_RCC_OscConfig+0x474>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f96:	f7fd fd4b 	bl	8002a30 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fd fd47 	bl	8002a30 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e10c      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCC_OscConfig+0x474>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x2ea>
 8004fc4:	4b64      	ldr	r3, [pc, #400]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd0:	e01c      	b.n	800500c <HAL_RCC_OscConfig+0x324>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x30c>
 8004fda:	4b5f      	ldr	r3, [pc, #380]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	4a5e      	ldr	r2, [pc, #376]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	f043 0304 	orr.w	r3, r3, #4
 8004fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a5b      	ldr	r2, [pc, #364]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff2:	e00b      	b.n	800500c <HAL_RCC_OscConfig+0x324>
 8004ff4:	4b58      	ldr	r3, [pc, #352]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	4a57      	ldr	r2, [pc, #348]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005000:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005004:	4a54      	ldr	r2, [pc, #336]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005006:	f023 0304 	bic.w	r3, r3, #4
 800500a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd fd0c 	bl	8002a30 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	e00a      	b.n	8005032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fd fd08 	bl	8002a30 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0cb      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005032:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0ee      	beq.n	800501c <HAL_RCC_OscConfig+0x334>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005040:	f7fd fcf6 	bl	8002a30 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fd fcf2 	bl	8002a30 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0b5      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505e:	4b3e      	ldr	r3, [pc, #248]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ee      	bne.n	8005048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	4a38      	ldr	r2, [pc, #224]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80a1 	beq.w	80051c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005086:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b08      	cmp	r3, #8
 8005090:	d05c      	beq.n	800514c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d141      	bne.n	800511e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_OscConfig+0x478>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fd fcc6 	bl	8002a30 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd fcc2 	bl	8002a30 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e087      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	3b01      	subs	r3, #1
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	491b      	ldr	r1, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <HAL_RCC_OscConfig+0x478>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fd fc9b 	bl	8002a30 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fd fc97 	bl	8002a30 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e05c      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005110:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x416>
 800511c:	e054      	b.n	80051c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511e:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <HAL_RCC_OscConfig+0x478>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fd fc84 	bl	8002a30 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512c:	f7fd fc80 	bl	8002a30 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e045      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <HAL_RCC_OscConfig+0x470>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x444>
 800514a:	e03d      	b.n	80051c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e038      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
 8005158:	40023800 	.word	0x40023800
 800515c:	40007000 	.word	0x40007000
 8005160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005164:	4b1b      	ldr	r3, [pc, #108]	@ (80051d4 <HAL_RCC_OscConfig+0x4ec>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d028      	beq.n	80051c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d121      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518a:	429a      	cmp	r2, r3
 800518c:	d11a      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800519a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800519c:	4293      	cmp	r3, r2
 800519e:	d111      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	3b01      	subs	r3, #1
 80051ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800

080051d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0cc      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b68      	ldr	r3, [pc, #416]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d90c      	bls.n	8005214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b65      	ldr	r3, [pc, #404]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005202:	4b63      	ldr	r3, [pc, #396]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0b8      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800522c:	4b59      	ldr	r3, [pc, #356]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a58      	ldr	r2, [pc, #352]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005244:	4b53      	ldr	r3, [pc, #332]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a52      	ldr	r2, [pc, #328]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800524e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b50      	ldr	r3, [pc, #320]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	494d      	ldr	r1, [pc, #308]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d044      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005276:	4b47      	ldr	r3, [pc, #284]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d119      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e07f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d003      	beq.n	8005296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005292:	2b03      	cmp	r3, #3
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005296:	4b3f      	ldr	r3, [pc, #252]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e06f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e067      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b37      	ldr	r3, [pc, #220]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4934      	ldr	r1, [pc, #208]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fd fbb2 	bl	8002a30 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fd fbae 	bl	8002a30 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e04f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f8:	4b25      	ldr	r3, [pc, #148]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d20c      	bcs.n	8005320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b22      	ldr	r3, [pc, #136]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e032      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800532c:	4b19      	ldr	r3, [pc, #100]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4916      	ldr	r1, [pc, #88]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800534a:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	490e      	ldr	r1, [pc, #56]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800535e:	f000 f821 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8005362:	4602      	mov	r2, r0
 8005364:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	490a      	ldr	r1, [pc, #40]	@ (8005398 <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	5ccb      	ldrb	r3, [r1, r3]
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	4a09      	ldr	r2, [pc, #36]	@ (800539c <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800537a:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <HAL_RCC_ClockConfig+0x1c8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fd f954 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023c00 	.word	0x40023c00
 8005394:	40023800 	.word	0x40023800
 8005398:	080101b4 	.word	0x080101b4
 800539c:	20000030 	.word	0x20000030
 80053a0:	20000034 	.word	0x20000034

080053a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a8:	b090      	sub	sp, #64	@ 0x40
 80053aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053bc:	4b59      	ldr	r3, [pc, #356]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 030c 	and.w	r3, r3, #12
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d00d      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x40>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	f200 80a1 	bhi.w	8005510 <HAL_RCC_GetSysClockFreq+0x16c>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x34>
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x3a>
 80053d6:	e09b      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d8:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x184>)
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053dc:	e09b      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053de:	4b53      	ldr	r3, [pc, #332]	@ (800552c <HAL_RCC_GetSysClockFreq+0x188>)
 80053e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053e2:	e098      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d028      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	099b      	lsrs	r3, r3, #6
 8005400:	2200      	movs	r2, #0
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	627a      	str	r2, [r7, #36]	@ 0x24
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800540c:	2100      	movs	r1, #0
 800540e:	4b47      	ldr	r3, [pc, #284]	@ (800552c <HAL_RCC_GetSysClockFreq+0x188>)
 8005410:	fb03 f201 	mul.w	r2, r3, r1
 8005414:	2300      	movs	r3, #0
 8005416:	fb00 f303 	mul.w	r3, r0, r3
 800541a:	4413      	add	r3, r2
 800541c:	4a43      	ldr	r2, [pc, #268]	@ (800552c <HAL_RCC_GetSysClockFreq+0x188>)
 800541e:	fba0 1202 	umull	r1, r2, r0, r2
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005424:	460a      	mov	r2, r1
 8005426:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542a:	4413      	add	r3, r2
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800542e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005430:	2200      	movs	r2, #0
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800543e:	f7fb fc33 	bl	8000ca8 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4613      	mov	r3, r2
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800544a:	e053      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544c:	4b35      	ldr	r3, [pc, #212]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	099b      	lsrs	r3, r3, #6
 8005452:	2200      	movs	r2, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	617a      	str	r2, [r7, #20]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800545e:	f04f 0b00 	mov.w	fp, #0
 8005462:	4652      	mov	r2, sl
 8005464:	465b      	mov	r3, fp
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	0159      	lsls	r1, r3, #5
 8005470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005474:	0150      	lsls	r0, r2, #5
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	ebb2 080a 	subs.w	r8, r2, sl
 800547e:	eb63 090b 	sbc.w	r9, r3, fp
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800548e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005492:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005496:	ebb2 0408 	subs.w	r4, r2, r8
 800549a:	eb63 0509 	sbc.w	r5, r3, r9
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	00eb      	lsls	r3, r5, #3
 80054a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ac:	00e2      	lsls	r2, r4, #3
 80054ae:	4614      	mov	r4, r2
 80054b0:	461d      	mov	r5, r3
 80054b2:	eb14 030a 	adds.w	r3, r4, sl
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	eb45 030b 	adc.w	r3, r5, fp
 80054bc:	607b      	str	r3, [r7, #4]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ca:	4629      	mov	r1, r5
 80054cc:	028b      	lsls	r3, r1, #10
 80054ce:	4621      	mov	r1, r4
 80054d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d4:	4621      	mov	r1, r4
 80054d6:	028a      	lsls	r2, r1, #10
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	2200      	movs	r2, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	60fa      	str	r2, [r7, #12]
 80054e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e8:	f7fb fbde 	bl	8000ca8 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x180>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	3301      	adds	r3, #1
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800550e:	e002      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x184>)
 8005512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005518:	4618      	mov	r0, r3
 800551a:	3740      	adds	r7, #64	@ 0x40
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	00f42400 	.word	0x00f42400
 800552c:	017d7840 	.word	0x017d7840

08005530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005534:	4b03      	ldr	r3, [pc, #12]	@ (8005544 <HAL_RCC_GetHCLKFreq+0x14>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000030 	.word	0x20000030

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff0 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0a9b      	lsrs	r3, r3, #10
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4903      	ldr	r1, [pc, #12]	@ (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	080101c4 	.word	0x080101c4

08005570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005574:	f7ff ffdc 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0b5b      	lsrs	r3, r3, #13
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4903      	ldr	r1, [pc, #12]	@ (8005594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	080101c4 	.word	0x080101c4

08005598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	220f      	movs	r2, #15
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a8:	4b12      	ldr	r3, [pc, #72]	@ (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0203 	and.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055b4:	4b0f      	ldr	r3, [pc, #60]	@ (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c0:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCC_GetClockConfig+0x5c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055da:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <HAL_RCC_GetClockConfig+0x60>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0207 	and.w	r2, r3, #7
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40023c00 	.word	0x40023c00

080055fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e041      	b.n	8005692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f839 	bl	800569a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 f9c0 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d001      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e04e      	b.n	8005766 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <HAL_TIM_Base_Start_IT+0xc4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d01d      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005778 <HAL_TIM_Base_Start_IT+0xc8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <HAL_TIM_Base_Start_IT+0xcc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1c      	ldr	r2, [pc, #112]	@ (8005780 <HAL_TIM_Base_Start_IT+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1b      	ldr	r2, [pc, #108]	@ (8005784 <HAL_TIM_Base_Start_IT+0xd4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a19      	ldr	r2, [pc, #100]	@ (8005788 <HAL_TIM_Base_Start_IT+0xd8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x80>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	@ (800578c <HAL_TIM_Base_Start_IT+0xdc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d010      	beq.n	8005764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e007      	b.n	8005764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40001800 	.word	0x40001800

08005790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d020      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0202 	mvn.w	r2, #2
 80057c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8d2 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8c4 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8d5 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0204 	mvn.w	r2, #4
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8ac 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f89e 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8af 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f886 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f878 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f889 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0210 	mvn.w	r2, #16
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2208      	movs	r2, #8
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f860 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f852 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f863 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0201 	mvn.w	r2, #1
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc fcd4 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f906 	bl	8005b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f834 	bl	80059ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0220 	mvn.w	r2, #32
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8d8 	bl	8005b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a46      	ldr	r2, [pc, #280]	@ (8005aec <TIM_Base_SetConfig+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a43      	ldr	r2, [pc, #268]	@ (8005af0 <TIM_Base_SetConfig+0x130>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a42      	ldr	r2, [pc, #264]	@ (8005af4 <TIM_Base_SetConfig+0x134>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a41      	ldr	r2, [pc, #260]	@ (8005af8 <TIM_Base_SetConfig+0x138>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a40      	ldr	r2, [pc, #256]	@ (8005afc <TIM_Base_SetConfig+0x13c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a35      	ldr	r2, [pc, #212]	@ (8005aec <TIM_Base_SetConfig+0x12c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a20:	d027      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a32      	ldr	r2, [pc, #200]	@ (8005af0 <TIM_Base_SetConfig+0x130>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d023      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a31      	ldr	r2, [pc, #196]	@ (8005af4 <TIM_Base_SetConfig+0x134>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a30      	ldr	r2, [pc, #192]	@ (8005af8 <TIM_Base_SetConfig+0x138>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005afc <TIM_Base_SetConfig+0x13c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	@ (8005b00 <TIM_Base_SetConfig+0x140>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b04 <TIM_Base_SetConfig+0x144>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	@ (8005b08 <TIM_Base_SetConfig+0x148>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b0c <TIM_Base_SetConfig+0x14c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	@ (8005b10 <TIM_Base_SetConfig+0x150>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	@ (8005b14 <TIM_Base_SetConfig+0x154>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a10      	ldr	r2, [pc, #64]	@ (8005aec <TIM_Base_SetConfig+0x12c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <TIM_Base_SetConfig+0x13c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]
  }
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40010400 	.word	0x40010400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800
 8005b0c:	40001800 	.word	0x40001800
 8005b10:	40001c00 	.word	0x40001c00
 8005b14:	40002000 	.word	0x40002000

08005b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e042      	b.n	8005bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc fca6 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	@ 0x24
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 ffaf 	bl	8006ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	@ 0x28
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d175      	bne.n	8005cec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_UART_Transmit+0x2c>
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e06e      	b.n	8005cee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	@ 0x21
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1e:	f7fc ff07 	bl	8002a30 <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	d108      	bne.n	8005c4c <HAL_UART_Transmit+0x6c>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e003      	b.n	8005c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c54:	e02e      	b.n	8005cb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fc4d 	bl	8006500 <UART_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e03a      	b.n	8005cee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3302      	adds	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e007      	b.n	8005ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1cb      	bne.n	8005c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2140      	movs	r1, #64	@ 0x40
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fc19 	bl	8006500 <UART_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e006      	b.n	8005cee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d112      	bne.n	8005d36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Receive_IT+0x26>
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e00b      	b.n	8005d38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fc40 	bl	80065b2 <UART_Start_Receive_IT>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e000      	b.n	8005d38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d112      	bne.n	8005d80 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Receive_DMA+0x26>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e00b      	b.n	8005d82 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fc56 	bl	8006628 <UART_Start_Receive_DMA>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	e000      	b.n	8005d82 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_UART_IRQHandler+0x66>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fdbd 	bl	800696a <UART_Receive_IT>
      return;
 8005df0:	e25b      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80de 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x22c>
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80d1 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_UART_IRQHandler+0xae>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_UART_IRQHandler+0xd2>
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	f043 0202 	orr.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <HAL_UART_IRQHandler+0xf6>
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	f043 0204 	orr.w	r2, r3, #4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x126>
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0208 	orr.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 81f2 	beq.w	80062a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_UART_IRQHandler+0x14e>
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fd48 	bl	800696a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_UART_IRQHandler+0x17a>
 8005efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d04f      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fc50 	bl	80067ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d141      	bne.n	8005f9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1d9      	bne.n	8005f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d013      	beq.n	8005f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f72:	4a7e      	ldr	r2, [pc, #504]	@ (800616c <HAL_UART_IRQHandler+0x3e0>)
 8005f74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fa5a 	bl	8004434 <HAL_DMA_Abort_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	e00e      	b.n	8005fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f99e 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	e00a      	b.n	8005fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f99a 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e006      	b.n	8005fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f996 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fb2:	e175      	b.n	80062a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	bf00      	nop
    return;
 8005fb6:	e173      	b.n	80062a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	f040 814f 	bne.w	8006260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8148 	beq.w	8006260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8141 	beq.w	8006260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	f040 80b6 	bne.w	8006170 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8145 	beq.w	80062a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800601e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006022:	429a      	cmp	r2, r3
 8006024:	f080 813e 	bcs.w	80062a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800602e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603a:	f000 8088 	beq.w	800614e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800605c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800606e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006076:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1d9      	bne.n	800603e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800609a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e1      	bne.n	800608a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3314      	adds	r3, #20
 80060cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e3      	bne.n	80060c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800611c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006130:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006132:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800613e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe f903 	bl	8004354 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8c1 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800616a:	e09b      	b.n	80062a4 <HAL_UART_IRQHandler+0x518>
 800616c:	08006873 	.word	0x08006873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006178:	b29b      	uxth	r3, r3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 808e 	beq.w	80062a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800618c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8089 	beq.w	80062a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80061bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e3      	bne.n	8006196 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	623b      	str	r3, [r7, #32]
   return(result);
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e3      	bne.n	80061ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	60fb      	str	r3, [r7, #12]
   return(result);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006238:	61fa      	str	r2, [r7, #28]
 800623a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	69b9      	ldr	r1, [r7, #24]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	617b      	str	r3, [r7, #20]
   return(result);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e3      	bne.n	8006214 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f847 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800625e:	e023      	b.n	80062a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HAL_UART_IRQHandler+0x4f4>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fb0e 	bl	800689a <UART_Transmit_IT>
    return;
 800627e:	e014      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <HAL_UART_IRQHandler+0x51e>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb4e 	bl	800693a <UART_EndTransmit_IT>
    return;
 800629e:	e004      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
    return;
 80062a0:	bf00      	nop
 80062a2:	e002      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
      return;
 80062a4:	bf00      	nop
 80062a6:	e000      	b.n	80062aa <HAL_UART_IRQHandler+0x51e>
      return;
 80062a8:	bf00      	nop
  }
}
 80062aa:	37e8      	adds	r7, #232	@ 0xe8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b09c      	sub	sp, #112	@ 0x70
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d172      	bne.n	8006406 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006322:	2200      	movs	r2, #0
 8006324:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800633c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800633e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006346:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006348:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800634c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	667b      	str	r3, [r7, #100]	@ 0x64
 8006372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800637a:	647a      	str	r2, [r7, #68]	@ 0x44
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3314      	adds	r3, #20
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	623b      	str	r3, [r7, #32]
   return(result);
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d119      	bne.n	8006406 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	330c      	adds	r3, #12
 80063d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 0310 	bic.w	r3, r3, #16
 80063e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063f2:	61fa      	str	r2, [r7, #28]
 80063f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	69b9      	ldr	r1, [r7, #24]
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e5      	bne.n	80063d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006408:	2200      	movs	r2, #0
 800640a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006418:	4619      	mov	r1, r3
 800641a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800641c:	f7ff ff66 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006420:	e002      	b.n	8006428 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006422:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006424:	f7fb fda8 	bl	8001f78 <HAL_UART_RxCpltCallback>
}
 8006428:	bf00      	nop
 800642a:	3770      	adds	r7, #112	@ 0x70
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	d108      	bne.n	800645e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ff48 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800645c:	e002      	b.n	8006464 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff ff30 	bl	80062c4 <HAL_UART_RxHalfCpltCallback>
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006488:	2b80      	cmp	r3, #128	@ 0x80
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b21      	cmp	r3, #33	@ 0x21
 800649e:	d108      	bne.n	80064b2 <UART_DMAError+0x46>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80064ac:	68b8      	ldr	r0, [r7, #8]
 80064ae:	f000 f955 	bl	800675c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b22      	cmp	r3, #34	@ 0x22
 80064d2:	d108      	bne.n	80064e6 <UART_DMAError+0x7a>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f000 f963 	bl	80067ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	f043 0210 	orr.w	r2, r3, #16
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f2:	68b8      	ldr	r0, [r7, #8]
 80064f4:	f7ff fef0 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006510:	e03b      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d037      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fc fa89 	bl	8002a30 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <UART_WaitOnFlagUntilTimeout+0x30>
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e03a      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d023      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b80      	cmp	r3, #128	@ 0x80
 8006546:	d020      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d01d      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d116      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f91a 	bl	80067ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2208      	movs	r2, #8
 800657c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e00f      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d0b4      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	4613      	mov	r3, r2
 80065be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2222      	movs	r2, #34	@ 0x22
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0220 	orr.w	r2, r2, #32
 8006616:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b098      	sub	sp, #96	@ 0x60
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2222      	movs	r2, #34	@ 0x22
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006654:	4a3e      	ldr	r2, [pc, #248]	@ (8006750 <UART_Start_Receive_DMA+0x128>)
 8006656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	4a3d      	ldr	r2, [pc, #244]	@ (8006754 <UART_Start_Receive_DMA+0x12c>)
 800665e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	4a3c      	ldr	r2, [pc, #240]	@ (8006758 <UART_Start_Receive_DMA+0x130>)
 8006666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	2200      	movs	r2, #0
 800666e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006670:	f107 0308 	add.w	r3, r7, #8
 8006674:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	f7fd fe0c 	bl	80042a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d019      	beq.n	80066de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80066d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3314      	adds	r3, #20
 80066fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e5      	bne.n	80066de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	617b      	str	r3, [r7, #20]
   return(result);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006728:	653b      	str	r3, [r7, #80]	@ 0x50
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006732:	627a      	str	r2, [r7, #36]	@ 0x24
 8006734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6a39      	ldr	r1, [r7, #32]
 8006738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3760      	adds	r7, #96	@ 0x60
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	08006305 	.word	0x08006305
 8006754:	08006431 	.word	0x08006431
 8006758:	0800646d 	.word	0x0800646d

0800675c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	@ 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60bb      	str	r3, [r7, #8]
   return(result);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	61ba      	str	r2, [r7, #24]
 8006786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6979      	ldr	r1, [r7, #20]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	613b      	str	r3, [r7, #16]
   return(result);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80067a0:	bf00      	nop
 80067a2:	3724      	adds	r7, #36	@ 0x24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b095      	sub	sp, #84	@ 0x54
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e5      	bne.n	80067b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800680a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800680e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	2b01      	cmp	r3, #1
 8006822:	d119      	bne.n	8006858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	60bb      	str	r3, [r7, #8]
   return(result);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 0310 	bic.w	r3, r3, #16
 800683a:	647b      	str	r3, [r7, #68]	@ 0x44
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006844:	61ba      	str	r2, [r7, #24]
 8006846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	613b      	str	r3, [r7, #16]
   return(result);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006866:	bf00      	nop
 8006868:	3754      	adds	r7, #84	@ 0x54
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff fd23 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b21      	cmp	r3, #33	@ 0x21
 80068ac:	d13e      	bne.n	800692c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b6:	d114      	bne.n	80068e2 <UART_Transmit_IT+0x48>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d110      	bne.n	80068e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]
 80068e0:	e008      	b.n	80068f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6211      	str	r1, [r2, #32]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	4619      	mov	r1, r3
 8006902:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10f      	bne.n	8006928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fca8 	bl	80062b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b08c      	sub	sp, #48	@ 0x30
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b22      	cmp	r3, #34	@ 0x22
 800697c:	f040 80ae 	bne.w	8006adc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006988:	d117      	bne.n	80069ba <UART_Receive_IT+0x50>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d113      	bne.n	80069ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80069b8:	e026      	b.n	8006a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069cc:	d007      	beq.n	80069de <UART_Receive_IT+0x74>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <UART_Receive_IT+0x82>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e008      	b.n	80069fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4619      	mov	r1, r3
 8006a16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d15d      	bne.n	8006ad8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0220 	bic.w	r2, r2, #32
 8006a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d135      	bne.n	8006ace <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	613b      	str	r3, [r7, #16]
   return(result);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 0310 	bic.w	r3, r3, #16
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a88:	623a      	str	r2, [r7, #32]
 8006a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d10a      	bne.n	8006ac0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fc10 	bl	80062ec <HAL_UARTEx_RxEventCallback>
 8006acc:	e002      	b.n	8006ad4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fb fa52 	bl	8001f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e002      	b.n	8006ade <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3730      	adds	r7, #48	@ 0x30
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aec:	b0c0      	sub	sp, #256	@ 0x100
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	68d9      	ldr	r1, [r3, #12]
 8006b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	ea40 0301 	orr.w	r3, r0, r1
 8006b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b40:	f021 010c 	bic.w	r1, r1, #12
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b62:	6999      	ldr	r1, [r3, #24]
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	ea40 0301 	orr.w	r3, r0, r1
 8006b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b8f      	ldr	r3, [pc, #572]	@ (8006db4 <UART_SetConfig+0x2cc>)
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d005      	beq.n	8006b88 <UART_SetConfig+0xa0>
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b8d      	ldr	r3, [pc, #564]	@ (8006db8 <UART_SetConfig+0x2d0>)
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d104      	bne.n	8006b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fe fcf2 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 8006b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b90:	e003      	b.n	8006b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b92:	f7fe fcd9 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8006b96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ba4:	f040 810c 	bne.w	8006dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bba:	4622      	mov	r2, r4
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	1891      	adds	r1, r2, r2
 8006bc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bc2:	415b      	adcs	r3, r3
 8006bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bca:	4621      	mov	r1, r4
 8006bcc:	eb12 0801 	adds.w	r8, r2, r1
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	eb43 0901 	adc.w	r9, r3, r1
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bea:	4690      	mov	r8, r2
 8006bec:	4699      	mov	r9, r3
 8006bee:	4623      	mov	r3, r4
 8006bf0:	eb18 0303 	adds.w	r3, r8, r3
 8006bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	eb49 0303 	adc.w	r3, r9, r3
 8006bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c16:	460b      	mov	r3, r1
 8006c18:	18db      	adds	r3, r3, r3
 8006c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	eb42 0303 	adc.w	r3, r2, r3
 8006c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c2c:	f7fa f83c 	bl	8000ca8 <__aeabi_uldivmod>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4b61      	ldr	r3, [pc, #388]	@ (8006dbc <UART_SetConfig+0x2d4>)
 8006c36:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	011c      	lsls	r4, r3, #4
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	1891      	adds	r1, r2, r2
 8006c56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c60:	4641      	mov	r1, r8
 8006c62:	eb12 0a01 	adds.w	sl, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb43 0b01 	adc.w	fp, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c80:	4692      	mov	sl, r2
 8006c82:	469b      	mov	fp, r3
 8006c84:	4643      	mov	r3, r8
 8006c86:	eb1a 0303 	adds.w	r3, sl, r3
 8006c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	eb4b 0303 	adc.w	r3, fp, r3
 8006c94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cac:	460b      	mov	r3, r1
 8006cae:	18db      	adds	r3, r3, r3
 8006cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	eb42 0303 	adc.w	r3, r2, r3
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cc2:	f7f9 fff1 	bl	8000ca8 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8006dbc <UART_SetConfig+0x2d4>)
 8006cce:	fba3 2301 	umull	r2, r3, r3, r1
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	2264      	movs	r2, #100	@ 0x64
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
 8006cda:	1acb      	subs	r3, r1, r3
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ce2:	4b36      	ldr	r3, [pc, #216]	@ (8006dbc <UART_SetConfig+0x2d4>)
 8006ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cf0:	441c      	add	r4, r3
 8006cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	1891      	adds	r1, r2, r2
 8006d0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d0c:	415b      	adcs	r3, r3
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d14:	4641      	mov	r1, r8
 8006d16:	1851      	adds	r1, r2, r1
 8006d18:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	414b      	adcs	r3, r1
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	00cb      	lsls	r3, r1, #3
 8006d30:	4651      	mov	r1, sl
 8006d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d36:	4651      	mov	r1, sl
 8006d38:	00ca      	lsls	r2, r1, #3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4642      	mov	r2, r8
 8006d42:	189b      	adds	r3, r3, r2
 8006d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d48:	464b      	mov	r3, r9
 8006d4a:	460a      	mov	r2, r1
 8006d4c:	eb42 0303 	adc.w	r3, r2, r3
 8006d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d68:	460b      	mov	r3, r1
 8006d6a:	18db      	adds	r3, r3, r3
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6e:	4613      	mov	r3, r2
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d7e:	f7f9 ff93 	bl	8000ca8 <__aeabi_uldivmod>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <UART_SetConfig+0x2d4>)
 8006d88:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	2164      	movs	r1, #100	@ 0x64
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	3332      	adds	r3, #50	@ 0x32
 8006d9a:	4a08      	ldr	r2, [pc, #32]	@ (8006dbc <UART_SetConfig+0x2d4>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f003 0207 	and.w	r2, r3, #7
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4422      	add	r2, r4
 8006dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006db0:	e106      	b.n	8006fc0 <UART_SetConfig+0x4d8>
 8006db2:	bf00      	nop
 8006db4:	40011000 	.word	0x40011000
 8006db8:	40011400 	.word	0x40011400
 8006dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	1891      	adds	r1, r2, r2
 8006dd8:	6239      	str	r1, [r7, #32]
 8006dda:	415b      	adcs	r3, r3
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006de2:	4641      	mov	r1, r8
 8006de4:	1854      	adds	r4, r2, r1
 8006de6:	4649      	mov	r1, r9
 8006de8:	eb43 0501 	adc.w	r5, r3, r1
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	00eb      	lsls	r3, r5, #3
 8006df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dfa:	00e2      	lsls	r2, r4, #3
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	461d      	mov	r5, r3
 8006e00:	4643      	mov	r3, r8
 8006e02:	18e3      	adds	r3, r4, r3
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e08:	464b      	mov	r3, r9
 8006e0a:	eb45 0303 	adc.w	r3, r5, r3
 8006e0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e2e:	4629      	mov	r1, r5
 8006e30:	008b      	lsls	r3, r1, #2
 8006e32:	4621      	mov	r1, r4
 8006e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e38:	4621      	mov	r1, r4
 8006e3a:	008a      	lsls	r2, r1, #2
 8006e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e40:	f7f9 ff32 	bl	8000ca8 <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4b60      	ldr	r3, [pc, #384]	@ (8006fcc <UART_SetConfig+0x4e4>)
 8006e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	011c      	lsls	r4, r3, #4
 8006e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	1891      	adds	r1, r2, r2
 8006e6a:	61b9      	str	r1, [r7, #24]
 8006e6c:	415b      	adcs	r3, r3
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e74:	4641      	mov	r1, r8
 8006e76:	1851      	adds	r1, r2, r1
 8006e78:	6139      	str	r1, [r7, #16]
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	414b      	adcs	r3, r1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	00cb      	lsls	r3, r1, #3
 8006e90:	4651      	mov	r1, sl
 8006e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e96:	4651      	mov	r1, sl
 8006e98:	00ca      	lsls	r2, r1, #3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	460a      	mov	r2, r1
 8006eac:	eb42 0303 	adc.w	r3, r2, r3
 8006eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ecc:	4649      	mov	r1, r9
 8006ece:	008b      	lsls	r3, r1, #2
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	008a      	lsls	r2, r1, #2
 8006eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ede:	f7f9 fee3 	bl	8000ca8 <__aeabi_uldivmod>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4b38      	ldr	r3, [pc, #224]	@ (8006fcc <UART_SetConfig+0x4e4>)
 8006eea:	fba3 2301 	umull	r2, r3, r3, r1
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	2264      	movs	r2, #100	@ 0x64
 8006ef2:	fb02 f303 	mul.w	r3, r2, r3
 8006ef6:	1acb      	subs	r3, r1, r3
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	3332      	adds	r3, #50	@ 0x32
 8006efc:	4a33      	ldr	r2, [pc, #204]	@ (8006fcc <UART_SetConfig+0x4e4>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f08:	441c      	add	r4, r3
 8006f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f0e:	2200      	movs	r2, #0
 8006f10:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f12:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	415b      	adcs	r3, r3
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	460a      	mov	r2, r1
 8006f5e:	eb42 0303 	adc.w	r3, r2, r3
 8006f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	008b      	lsls	r3, r1, #2
 8006f80:	4641      	mov	r1, r8
 8006f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f86:	4641      	mov	r1, r8
 8006f88:	008a      	lsls	r2, r1, #2
 8006f8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f8e:	f7f9 fe8b 	bl	8000ca8 <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <UART_SetConfig+0x4e4>)
 8006f98:	fba3 1302 	umull	r1, r3, r3, r2
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	2164      	movs	r1, #100	@ 0x64
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	3332      	adds	r3, #50	@ 0x32
 8006faa:	4a08      	ldr	r2, [pc, #32]	@ (8006fcc <UART_SetConfig+0x4e4>)
 8006fac:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4422      	add	r2, r4
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fcc:	51eb851f 	.word	0x51eb851f

08006fd0 <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460a      	mov	r2, r1
 8006fda:	71fb      	strb	r3, [r7, #7]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8006fe0:	79bb      	ldrb	r3, [r7, #6]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d014      	beq.n	8007014 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	4a5a      	ldr	r2, [pc, #360]	@ (8007158 <LCD16X2_DATA+0x188>)
 8006fee:	2134      	movs	r1, #52	@ 0x34
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	4a56      	ldr	r2, [pc, #344]	@ (8007158 <LCD16X2_DATA+0x188>)
 8006ffe:	2134      	movs	r1, #52	@ 0x34
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	4413      	add	r3, r2
 8007006:	3308      	adds	r3, #8
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	2201      	movs	r2, #1
 800700c:	4619      	mov	r1, r3
 800700e:	f7fd fe51 	bl	8004cb4 <HAL_GPIO_WritePin>
 8007012:	e013      	b.n	800703c <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	4a50      	ldr	r2, [pc, #320]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007018:	2134      	movs	r1, #52	@ 0x34
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	4413      	add	r3, r2
 8007020:	3304      	adds	r3, #4
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	4a4c      	ldr	r2, [pc, #304]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007028:	2134      	movs	r1, #52	@ 0x34
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	3308      	adds	r3, #8
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	4619      	mov	r1, r3
 8007038:	f7fd fe3c 	bl	8004cb4 <HAL_GPIO_WritePin>
    if(Data & 2)
 800703c:	79bb      	ldrb	r3, [r7, #6]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d014      	beq.n	8007070 <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	4a43      	ldr	r2, [pc, #268]	@ (8007158 <LCD16X2_DATA+0x188>)
 800704a:	2134      	movs	r1, #52	@ 0x34
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	330c      	adds	r3, #12
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	4a3f      	ldr	r2, [pc, #252]	@ (8007158 <LCD16X2_DATA+0x188>)
 800705a:	2134      	movs	r1, #52	@ 0x34
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	3310      	adds	r3, #16
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	2201      	movs	r2, #1
 8007068:	4619      	mov	r1, r3
 800706a:	f7fd fe23 	bl	8004cb4 <HAL_GPIO_WritePin>
 800706e:	e013      	b.n	8007098 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	4a39      	ldr	r2, [pc, #228]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007074:	2134      	movs	r1, #52	@ 0x34
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4413      	add	r3, r2
 800707c:	330c      	adds	r3, #12
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	4a35      	ldr	r2, [pc, #212]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007084:	2134      	movs	r1, #52	@ 0x34
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3310      	adds	r3, #16
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	4619      	mov	r1, r3
 8007094:	f7fd fe0e 	bl	8004cb4 <HAL_GPIO_WritePin>
    if(Data & 4)
 8007098:	79bb      	ldrb	r3, [r7, #6]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d014      	beq.n	80070cc <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007158 <LCD16X2_DATA+0x188>)
 80070a6:	2134      	movs	r1, #52	@ 0x34
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	3314      	adds	r3, #20
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	4a28      	ldr	r2, [pc, #160]	@ (8007158 <LCD16X2_DATA+0x188>)
 80070b6:	2134      	movs	r1, #52	@ 0x34
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	3318      	adds	r3, #24
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	4619      	mov	r1, r3
 80070c6:	f7fd fdf5 	bl	8004cb4 <HAL_GPIO_WritePin>
 80070ca:	e013      	b.n	80070f4 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	4a22      	ldr	r2, [pc, #136]	@ (8007158 <LCD16X2_DATA+0x188>)
 80070d0:	2134      	movs	r1, #52	@ 0x34
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	3314      	adds	r3, #20
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	4a1e      	ldr	r2, [pc, #120]	@ (8007158 <LCD16X2_DATA+0x188>)
 80070e0:	2134      	movs	r1, #52	@ 0x34
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	3318      	adds	r3, #24
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7fd fde0 	bl	8004cb4 <HAL_GPIO_WritePin>
    if(Data & 8)
 80070f4:	79bb      	ldrb	r3, [r7, #6]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d014      	beq.n	8007128 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4a15      	ldr	r2, [pc, #84]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007102:	2134      	movs	r1, #52	@ 0x34
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	4413      	add	r3, r2
 800710a:	331c      	adds	r3, #28
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	4a11      	ldr	r2, [pc, #68]	@ (8007158 <LCD16X2_DATA+0x188>)
 8007112:	2134      	movs	r1, #52	@ 0x34
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	3320      	adds	r3, #32
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	2201      	movs	r2, #1
 8007120:	4619      	mov	r1, r3
 8007122:	f7fd fdc7 	bl	8004cb4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 8007126:	e013      	b.n	8007150 <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	4a0b      	ldr	r2, [pc, #44]	@ (8007158 <LCD16X2_DATA+0x188>)
 800712c:	2134      	movs	r1, #52	@ 0x34
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	4413      	add	r3, r2
 8007134:	331c      	adds	r3, #28
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	4a07      	ldr	r2, [pc, #28]	@ (8007158 <LCD16X2_DATA+0x188>)
 800713c:	2134      	movs	r1, #52	@ 0x34
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	4413      	add	r3, r2
 8007144:	3320      	adds	r3, #32
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	4619      	mov	r1, r3
 800714c:	f7fd fdb2 	bl	8004cb4 <HAL_GPIO_WritePin>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	080101d4 	.word	0x080101d4

0800715c <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	460a      	mov	r2, r1
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	4613      	mov	r3, r2
 800716a:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	4a57      	ldr	r2, [pc, #348]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007170:	2134      	movs	r1, #52	@ 0x34
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	332c      	adds	r3, #44	@ 0x2c
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	4a53      	ldr	r2, [pc, #332]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007180:	2134      	movs	r1, #52	@ 0x34
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	4413      	add	r3, r2
 8007188:	3330      	adds	r3, #48	@ 0x30
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	4619      	mov	r1, r3
 8007190:	f7fd fd90 	bl	8004cb4 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8007194:	79ba      	ldrb	r2, [r7, #6]
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff ff18 	bl	8006fd0 <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	4a4a      	ldr	r2, [pc, #296]	@ (80072cc <LCD16X2_CMD+0x170>)
 80071a4:	2134      	movs	r1, #52	@ 0x34
 80071a6:	fb01 f303 	mul.w	r3, r1, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	3324      	adds	r3, #36	@ 0x24
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	4a46      	ldr	r2, [pc, #280]	@ (80072cc <LCD16X2_CMD+0x170>)
 80071b4:	2134      	movs	r1, #52	@ 0x34
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	3328      	adds	r3, #40	@ 0x28
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	2200      	movs	r2, #0
 80071c2:	4619      	mov	r1, r3
 80071c4:	f7fd fd76 	bl	8004cb4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80071c8:	4b41      	ldr	r3, [pc, #260]	@ (80072d0 <LCD16X2_CMD+0x174>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	4b41      	ldr	r3, [pc, #260]	@ (80072d4 <LCD16X2_CMD+0x178>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a41      	ldr	r2, [pc, #260]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	0c9a      	lsrs	r2, r3, #18
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	4b3c      	ldr	r3, [pc, #240]	@ (80072d4 <LCD16X2_CMD+0x178>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	493c      	ldr	r1, [pc, #240]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 80071e6:	fba1 1303 	umull	r1, r3, r1, r3
 80071ea:	0c9b      	lsrs	r3, r3, #18
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <LCD16X2_CMD+0x174>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d8f8      	bhi.n	80071f2 <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007204:	2134      	movs	r1, #52	@ 0x34
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	3324      	adds	r3, #36	@ 0x24
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	4a2e      	ldr	r2, [pc, #184]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007214:	2134      	movs	r1, #52	@ 0x34
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	4413      	add	r3, r2
 800721c:	3328      	adds	r3, #40	@ 0x28
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	2201      	movs	r2, #1
 8007222:	4619      	mov	r1, r3
 8007224:	f7fd fd46 	bl	8004cb4 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8007228:	4b29      	ldr	r3, [pc, #164]	@ (80072d0 <LCD16X2_CMD+0x174>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	4b29      	ldr	r3, [pc, #164]	@ (80072d4 <LCD16X2_CMD+0x178>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a29      	ldr	r2, [pc, #164]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 8007234:	fba2 2303 	umull	r2, r3, r2, r3
 8007238:	0c9a      	lsrs	r2, r3, #18
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	441a      	add	r2, r3
 8007240:	4b24      	ldr	r3, [pc, #144]	@ (80072d4 <LCD16X2_CMD+0x178>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4924      	ldr	r1, [pc, #144]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 8007246:	fba1 1303 	umull	r1, r3, r1, r3
 800724a:	0c9b      	lsrs	r3, r3, #18
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	4b1f      	ldr	r3, [pc, #124]	@ (80072d0 <LCD16X2_CMD+0x174>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d8f8      	bhi.n	8007252 <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	4a1a      	ldr	r2, [pc, #104]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007264:	2134      	movs	r1, #52	@ 0x34
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	3324      	adds	r3, #36	@ 0x24
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <LCD16X2_CMD+0x170>)
 8007274:	2134      	movs	r1, #52	@ 0x34
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	3328      	adds	r3, #40	@ 0x28
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	4619      	mov	r1, r3
 8007284:	f7fd fd16 	bl	8004cb4 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8007288:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <LCD16X2_CMD+0x174>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	4b11      	ldr	r3, [pc, #68]	@ (80072d4 <LCD16X2_CMD+0x178>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a11      	ldr	r2, [pc, #68]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	0c9b      	lsrs	r3, r3, #18
 800729a:	2264      	movs	r2, #100	@ 0x64
 800729c:	fb03 f202 	mul.w	r2, r3, r2
 80072a0:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <LCD16X2_CMD+0x178>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	490c      	ldr	r1, [pc, #48]	@ (80072d8 <LCD16X2_CMD+0x17c>)
 80072a6:	fba1 1303 	umull	r1, r3, r1, r3
 80072aa:	0c9b      	lsrs	r3, r3, #18
 80072ac:	085b      	lsrs	r3, r3, #1
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <LCD16X2_CMD+0x174>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d8f8      	bhi.n	80072b2 <LCD16X2_CMD+0x156>
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	080101d4 	.word	0x080101d4
 80072d0:	e000e010 	.word	0xe000e010
 80072d4:	20000030 	.word	0x20000030
 80072d8:	431bde83 	.word	0x431bde83

080072dc <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff ff36 	bl	800715c <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	2101      	movs	r1, #1
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff ff31 	bl	800715c <LCD16X2_CMD>
    DELAY_MS(2);
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	e01f      	b.n	8007340 <LCD16X2_Clear+0x64>
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <LCD16X2_Clear+0x74>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <LCD16X2_Clear+0x78>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a13      	ldr	r2, [pc, #76]	@ (8007358 <LCD16X2_Clear+0x7c>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	0c9b      	lsrs	r3, r3, #18
 8007312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007316:	fb03 f202 	mul.w	r2, r3, r2
 800731a:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <LCD16X2_Clear+0x78>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	490e      	ldr	r1, [pc, #56]	@ (8007358 <LCD16X2_Clear+0x7c>)
 8007320:	fba1 1303 	umull	r1, r3, r1, r3
 8007324:	0c9b      	lsrs	r3, r3, #18
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <LCD16X2_Clear+0x74>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d8f8      	bhi.n	800732c <LCD16X2_Clear+0x50>
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	3301      	adds	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d9dc      	bls.n	8007300 <LCD16X2_Clear+0x24>
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	e000e010 	.word	0xe000e010
 8007354:	20000030 	.word	0x20000030
 8007358:	431bde83 	.word	0x431bde83

0800735c <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	71fb      	strb	r3, [r7, #7]
 8007366:	460b      	mov	r3, r1
 8007368:	71bb      	strb	r3, [r7, #6]
 800736a:	4613      	mov	r3, r2
 800736c:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800736e:	79bb      	ldrb	r3, [r7, #6]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d115      	bne.n	80073a0 <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8007374:	797b      	ldrb	r3, [r7, #5]
 8007376:	337f      	adds	r3, #127	@ 0x7f
 8007378:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8007388:	7bba      	ldrb	r2, [r7, #14]
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fee4 	bl	800715c <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8007394:	7b7a      	ldrb	r2, [r7, #13]
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fede 	bl	800715c <LCD16X2_CMD>
    }
    if(r == 2)
 80073a0:	79bb      	ldrb	r3, [r7, #6]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d115      	bne.n	80073d2 <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 80073a6:	797b      	ldrb	r3, [r7, #5]
 80073a8:	3b41      	subs	r3, #65	@ 0x41
 80073aa:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 80073ba:	7bba      	ldrb	r2, [r7, #14]
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fecb 	bl	800715c <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80073c6:	7b7a      	ldrb	r2, [r7, #13]
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	4611      	mov	r1, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fec5 	bl	800715c <LCD16X2_CMD>
    }
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08e      	sub	sp, #56	@ 0x38
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80073e6:	bf00      	nop
 80073e8:	f7fb fb22 	bl	8002a30 <HAL_GetTick>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b31      	cmp	r3, #49	@ 0x31
 80073f0:	d9fa      	bls.n	80073e8 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	4a7c      	ldr	r2, [pc, #496]	@ (80075e8 <LCD16X2_Init+0x20c>)
 80073f6:	2134      	movs	r1, #52	@ 0x34
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	4413      	add	r3, r2
 80073fe:	332c      	adds	r3, #44	@ 0x2c
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	4a78      	ldr	r2, [pc, #480]	@ (80075e8 <LCD16X2_Init+0x20c>)
 8007406:	2134      	movs	r1, #52	@ 0x34
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	3330      	adds	r3, #48	@ 0x30
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	2200      	movs	r2, #0
 8007414:	4619      	mov	r1, r3
 8007416:	f7fd fc4d 	bl	8004cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4a72      	ldr	r2, [pc, #456]	@ (80075e8 <LCD16X2_Init+0x20c>)
 800741e:	2134      	movs	r1, #52	@ 0x34
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	3324      	adds	r3, #36	@ 0x24
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	4a6e      	ldr	r2, [pc, #440]	@ (80075e8 <LCD16X2_Init+0x20c>)
 800742e:	2134      	movs	r1, #52	@ 0x34
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	3328      	adds	r3, #40	@ 0x28
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	4619      	mov	r1, r3
 800743e:	f7fd fc39 	bl	8004cb4 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fdc2 	bl	8006fd0 <LCD16X2_DATA>
    DELAY_MS(150);
 800744c:	2300      	movs	r3, #0
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007450:	e01f      	b.n	8007492 <LCD16X2_Init+0xb6>
 8007452:	4b66      	ldr	r3, [pc, #408]	@ (80075ec <LCD16X2_Init+0x210>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	4b65      	ldr	r3, [pc, #404]	@ (80075f0 <LCD16X2_Init+0x214>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a65      	ldr	r2, [pc, #404]	@ (80075f4 <LCD16X2_Init+0x218>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	0c9b      	lsrs	r3, r3, #18
 8007464:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007468:	fb03 f202 	mul.w	r2, r3, r2
 800746c:	4b60      	ldr	r3, [pc, #384]	@ (80075f0 <LCD16X2_Init+0x214>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4960      	ldr	r1, [pc, #384]	@ (80075f4 <LCD16X2_Init+0x218>)
 8007472:	fba1 1303 	umull	r1, r3, r1, r3
 8007476:	0c9b      	lsrs	r3, r3, #18
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	4b5b      	ldr	r3, [pc, #364]	@ (80075ec <LCD16X2_Init+0x210>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d8f8      	bhi.n	800747e <LCD16X2_Init+0xa2>
 800748c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748e:	3301      	adds	r3, #1
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	2b95      	cmp	r3, #149	@ 0x95
 8007496:	d9dc      	bls.n	8007452 <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	2103      	movs	r1, #3
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fe5d 	bl	800715c <LCD16X2_CMD>
    DELAY_MS(5);
 80074a2:	2300      	movs	r3, #0
 80074a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a6:	e01f      	b.n	80074e8 <LCD16X2_Init+0x10c>
 80074a8:	4b50      	ldr	r3, [pc, #320]	@ (80075ec <LCD16X2_Init+0x210>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	4b50      	ldr	r3, [pc, #320]	@ (80075f0 <LCD16X2_Init+0x214>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a50      	ldr	r2, [pc, #320]	@ (80075f4 <LCD16X2_Init+0x218>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	0c9b      	lsrs	r3, r3, #18
 80074ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80074be:	fb03 f202 	mul.w	r2, r3, r2
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <LCD16X2_Init+0x214>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	494b      	ldr	r1, [pc, #300]	@ (80075f4 <LCD16X2_Init+0x218>)
 80074c8:	fba1 1303 	umull	r1, r3, r1, r3
 80074cc:	0c9b      	lsrs	r3, r3, #18
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	4b45      	ldr	r3, [pc, #276]	@ (80075ec <LCD16X2_Init+0x210>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d8f8      	bhi.n	80074d4 <LCD16X2_Init+0xf8>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	3301      	adds	r3, #1
 80074e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d9dc      	bls.n	80074a8 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	2103      	movs	r1, #3
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fe32 	bl	800715c <LCD16X2_CMD>
    DELAY_MS(5);
 80074f8:	2300      	movs	r3, #0
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074fc:	e01f      	b.n	800753e <LCD16X2_Init+0x162>
 80074fe:	4b3b      	ldr	r3, [pc, #236]	@ (80075ec <LCD16X2_Init+0x210>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	623b      	str	r3, [r7, #32]
 8007504:	4b3a      	ldr	r3, [pc, #232]	@ (80075f0 <LCD16X2_Init+0x214>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3a      	ldr	r2, [pc, #232]	@ (80075f4 <LCD16X2_Init+0x218>)
 800750a:	fba2 2303 	umull	r2, r3, r2, r3
 800750e:	0c9b      	lsrs	r3, r3, #18
 8007510:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007514:	fb03 f202 	mul.w	r2, r3, r2
 8007518:	4b35      	ldr	r3, [pc, #212]	@ (80075f0 <LCD16X2_Init+0x214>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4935      	ldr	r1, [pc, #212]	@ (80075f4 <LCD16X2_Init+0x218>)
 800751e:	fba1 1303 	umull	r1, r3, r1, r3
 8007522:	0c9b      	lsrs	r3, r3, #18
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	4b30      	ldr	r3, [pc, #192]	@ (80075ec <LCD16X2_Init+0x210>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	6a3a      	ldr	r2, [r7, #32]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	429a      	cmp	r2, r3
 8007536:	d8f8      	bhi.n	800752a <LCD16X2_Init+0x14e>
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	3301      	adds	r3, #1
 800753c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	2b04      	cmp	r3, #4
 8007542:	d9dc      	bls.n	80074fe <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2103      	movs	r1, #3
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fe07 	bl	800715c <LCD16X2_CMD>
    DELAY_US(150);
 800754e:	4b27      	ldr	r3, [pc, #156]	@ (80075ec <LCD16X2_Init+0x210>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007554:	4b26      	ldr	r3, [pc, #152]	@ (80075f0 <LCD16X2_Init+0x214>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <LCD16X2_Init+0x218>)
 800755a:	fba2 2303 	umull	r2, r3, r2, r3
 800755e:	0c9b      	lsrs	r3, r3, #18
 8007560:	2296      	movs	r2, #150	@ 0x96
 8007562:	fb03 f202 	mul.w	r2, r3, r2
 8007566:	4b22      	ldr	r3, [pc, #136]	@ (80075f0 <LCD16X2_Init+0x214>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4922      	ldr	r1, [pc, #136]	@ (80075f4 <LCD16X2_Init+0x218>)
 800756c:	fba1 1303 	umull	r1, r3, r1, r3
 8007570:	0c9b      	lsrs	r3, r3, #18
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
 8007578:	4b1c      	ldr	r3, [pc, #112]	@ (80075ec <LCD16X2_Init+0x210>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007582:	429a      	cmp	r2, r3
 8007584:	d8f8      	bhi.n	8007578 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	2102      	movs	r1, #2
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fde6 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fde1 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	2108      	movs	r1, #8
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fddc 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fdd7 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	210c      	movs	r1, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fdd2 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fdcd 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2106      	movs	r1, #6
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fdc8 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fdc3 	bl	800715c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	2101      	movs	r1, #1
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fdbe 	bl	800715c <LCD16X2_CMD>
}
 80075e0:	bf00      	nop
 80075e2:	3738      	adds	r7, #56	@ 0x38
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	080101d4 	.word	0x080101d4
 80075ec:	e000e010 	.word	0xe000e010
 80075f0:	20000030 	.word	0x20000030
 80075f4:	431bde83 	.word	0x431bde83

080075f8 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b090      	sub	sp, #64	@ 0x40
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	460a      	mov	r2, r1
 8007602:	71fb      	strb	r3, [r7, #7]
 8007604:	4613      	mov	r3, r2
 8007606:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8007608:	79bb      	ldrb	r3, [r7, #6]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 8007612:	79bb      	ldrb	r3, [r7, #6]
 8007614:	f023 030f 	bic.w	r3, r3, #15
 8007618:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	4aa4      	ldr	r2, [pc, #656]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007620:	2134      	movs	r1, #52	@ 0x34
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	332c      	adds	r3, #44	@ 0x2c
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	4aa0      	ldr	r2, [pc, #640]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007630:	2134      	movs	r1, #52	@ 0x34
 8007632:	fb01 f303 	mul.w	r3, r1, r3
 8007636:	4413      	add	r3, r2
 8007638:	3330      	adds	r3, #48	@ 0x30
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	2201      	movs	r2, #1
 800763e:	4619      	mov	r1, r3
 8007640:	f7fd fb38 	bl	8004cb4 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8007644:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	b2da      	uxtb	r2, r3
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fcbd 	bl	8006fd0 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	4a95      	ldr	r2, [pc, #596]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 800765a:	2134      	movs	r1, #52	@ 0x34
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	3324      	adds	r3, #36	@ 0x24
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	4a91      	ldr	r2, [pc, #580]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 800766a:	2134      	movs	r1, #52	@ 0x34
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	4413      	add	r3, r2
 8007672:	3328      	adds	r3, #40	@ 0x28
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	4619      	mov	r1, r3
 800767a:	f7fd fb1b 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800767e:	4b8d      	ldr	r3, [pc, #564]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007684:	4b8c      	ldr	r3, [pc, #560]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a8c      	ldr	r2, [pc, #560]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800768a:	fba2 2303 	umull	r2, r3, r2, r3
 800768e:	0c9a      	lsrs	r2, r3, #18
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	4b88      	ldr	r3, [pc, #544]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4988      	ldr	r1, [pc, #544]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800769c:	fba1 1303 	umull	r1, r3, r1, r3
 80076a0:	0c9b      	lsrs	r3, r3, #18
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a8:	4b82      	ldr	r3, [pc, #520]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d8f8      	bhi.n	80076a8 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	4a7d      	ldr	r2, [pc, #500]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 80076ba:	2134      	movs	r1, #52	@ 0x34
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	3324      	adds	r3, #36	@ 0x24
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	4a79      	ldr	r2, [pc, #484]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 80076ca:	2134      	movs	r1, #52	@ 0x34
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	3328      	adds	r3, #40	@ 0x28
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2201      	movs	r2, #1
 80076d8:	4619      	mov	r1, r3
 80076da:	f7fd faeb 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80076de:	4b75      	ldr	r3, [pc, #468]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e4:	4b74      	ldr	r3, [pc, #464]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a74      	ldr	r2, [pc, #464]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	0c9a      	lsrs	r2, r3, #18
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	4b70      	ldr	r3, [pc, #448]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4970      	ldr	r1, [pc, #448]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 80076fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007700:	0c9b      	lsrs	r3, r3, #18
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007708:	4b6a      	ldr	r3, [pc, #424]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007712:	429a      	cmp	r2, r3
 8007714:	d8f8      	bhi.n	8007708 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	4a65      	ldr	r2, [pc, #404]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 800771a:	2134      	movs	r1, #52	@ 0x34
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	4413      	add	r3, r2
 8007722:	3324      	adds	r3, #36	@ 0x24
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	4a61      	ldr	r2, [pc, #388]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 800772a:	2134      	movs	r1, #52	@ 0x34
 800772c:	fb01 f303 	mul.w	r3, r1, r3
 8007730:	4413      	add	r3, r2
 8007732:	3328      	adds	r3, #40	@ 0x28
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	4619      	mov	r1, r3
 800773a:	f7fd fabb 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 800773e:	4b5d      	ldr	r3, [pc, #372]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007744:	4b5c      	ldr	r3, [pc, #368]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a5c      	ldr	r2, [pc, #368]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	0c9b      	lsrs	r3, r3, #18
 8007750:	2264      	movs	r2, #100	@ 0x64
 8007752:	fb03 f202 	mul.w	r2, r3, r2
 8007756:	4b58      	ldr	r3, [pc, #352]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4958      	ldr	r1, [pc, #352]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800775c:	fba1 1303 	umull	r1, r3, r1, r3
 8007760:	0c9b      	lsrs	r3, r3, #18
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
 8007768:	4b52      	ldr	r3, [pc, #328]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007772:	429a      	cmp	r2, r3
 8007774:	d8f8      	bhi.n	8007768 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8007776:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fc26 	bl	8006fd0 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	4a4a      	ldr	r2, [pc, #296]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007788:	2134      	movs	r1, #52	@ 0x34
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3324      	adds	r3, #36	@ 0x24
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	4a46      	ldr	r2, [pc, #280]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007798:	2134      	movs	r1, #52	@ 0x34
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3328      	adds	r3, #40	@ 0x28
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	2200      	movs	r2, #0
 80077a6:	4619      	mov	r1, r3
 80077a8:	f7fd fa84 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80077ac:	4b41      	ldr	r3, [pc, #260]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	623b      	str	r3, [r7, #32]
 80077b2:	4b41      	ldr	r3, [pc, #260]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a41      	ldr	r2, [pc, #260]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 80077b8:	fba2 2303 	umull	r2, r3, r2, r3
 80077bc:	0c9a      	lsrs	r2, r3, #18
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	441a      	add	r2, r3
 80077c4:	4b3c      	ldr	r3, [pc, #240]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	493c      	ldr	r1, [pc, #240]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 80077ca:	fba1 1303 	umull	r1, r3, r1, r3
 80077ce:	0c9b      	lsrs	r3, r3, #18
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	4b37      	ldr	r3, [pc, #220]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d8f8      	bhi.n	80077d6 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	4a32      	ldr	r2, [pc, #200]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 80077e8:	2134      	movs	r1, #52	@ 0x34
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	3324      	adds	r3, #36	@ 0x24
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	4a2e      	ldr	r2, [pc, #184]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 80077f8:	2134      	movs	r1, #52	@ 0x34
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	3328      	adds	r3, #40	@ 0x28
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	4619      	mov	r1, r3
 8007808:	f7fd fa54 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800780c:	4b29      	ldr	r3, [pc, #164]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	4b29      	ldr	r3, [pc, #164]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a29      	ldr	r2, [pc, #164]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	0c9a      	lsrs	r2, r3, #18
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	441a      	add	r2, r3
 8007824:	4b24      	ldr	r3, [pc, #144]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4924      	ldr	r1, [pc, #144]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800782a:	fba1 1303 	umull	r1, r3, r1, r3
 800782e:	0c9b      	lsrs	r3, r3, #18
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	4b1f      	ldr	r3, [pc, #124]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	429a      	cmp	r2, r3
 8007842:	d8f8      	bhi.n	8007836 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	4a1a      	ldr	r2, [pc, #104]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007848:	2134      	movs	r1, #52	@ 0x34
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	4413      	add	r3, r2
 8007850:	3324      	adds	r3, #36	@ 0x24
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	4a16      	ldr	r2, [pc, #88]	@ (80078b0 <LCD16X2_Write_Char+0x2b8>)
 8007858:	2134      	movs	r1, #52	@ 0x34
 800785a:	fb01 f303 	mul.w	r3, r1, r3
 800785e:	4413      	add	r3, r2
 8007860:	3328      	adds	r3, #40	@ 0x28
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	2200      	movs	r2, #0
 8007866:	4619      	mov	r1, r3
 8007868:	f7fd fa24 	bl	8004cb4 <HAL_GPIO_WritePin>
   DELAY_US(100);
 800786c:	4b11      	ldr	r3, [pc, #68]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	4b11      	ldr	r3, [pc, #68]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a11      	ldr	r2, [pc, #68]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	0c9b      	lsrs	r3, r3, #18
 800787e:	2264      	movs	r2, #100	@ 0x64
 8007880:	fb03 f202 	mul.w	r2, r3, r2
 8007884:	4b0c      	ldr	r3, [pc, #48]	@ (80078b8 <LCD16X2_Write_Char+0x2c0>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	490c      	ldr	r1, [pc, #48]	@ (80078bc <LCD16X2_Write_Char+0x2c4>)
 800788a:	fba1 1303 	umull	r1, r3, r1, r3
 800788e:	0c9b      	lsrs	r3, r3, #18
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <LCD16X2_Write_Char+0x2bc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d8f8      	bhi.n	8007896 <LCD16X2_Write_Char+0x29e>
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	3740      	adds	r7, #64	@ 0x40
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	080101d4 	.word	0x080101d4
 80078b4:	e000e010 	.word	0xe000e010
 80078b8:	20000030 	.word	0x20000030
 80078bc:	431bde83 	.word	0x431bde83

080078c0 <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e00b      	b.n	80078ea <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	4413      	add	r3, r2
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fe8a 	bl	80075f8 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	4413      	add	r3, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1ed      	bne.n	80078d2 <LCD16X2_Write_String+0x12>
    }
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8007904:	bf00      	nop
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <__NVIC_SetPriority>:
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800791c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007920:	2b00      	cmp	r3, #0
 8007922:	db0a      	blt.n	800793a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	490c      	ldr	r1, [pc, #48]	@ (800795c <__NVIC_SetPriority+0x4c>)
 800792a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792e:	0112      	lsls	r2, r2, #4
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	440b      	add	r3, r1
 8007934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007938:	e00a      	b.n	8007950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4908      	ldr	r1, [pc, #32]	@ (8007960 <__NVIC_SetPriority+0x50>)
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	3b04      	subs	r3, #4
 8007948:	0112      	lsls	r2, r2, #4
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	440b      	add	r3, r1
 800794e:	761a      	strb	r2, [r3, #24]
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	e000e100 	.word	0xe000e100
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <SysTick_Handler+0x1c>)
 800796a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800796c:	f001 fd46 	bl	80093fc <xTaskGetSchedulerState>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007976:	f002 fb3f 	bl	8009ff8 <xPortSysTickHandler>
  }
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010

08007984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007988:	2100      	movs	r1, #0
 800798a:	f06f 0004 	mvn.w	r0, #4
 800798e:	f7ff ffbf 	bl	8007910 <__NVIC_SetPriority>
#endif
}
 8007992:	bf00      	nop
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799e:	f3ef 8305 	mrs	r3, IPSR
 80079a2:	603b      	str	r3, [r7, #0]
  return(result);
 80079a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079aa:	f06f 0305 	mvn.w	r3, #5
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	e00c      	b.n	80079cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <osKernelInitialize+0x44>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079ba:	4b08      	ldr	r3, [pc, #32]	@ (80079dc <osKernelInitialize+0x44>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	e002      	b.n	80079cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079cc:	687b      	ldr	r3, [r7, #4]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	200054d8 	.word	0x200054d8

080079e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e6:	f3ef 8305 	mrs	r3, IPSR
 80079ea:	603b      	str	r3, [r7, #0]
  return(result);
 80079ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80079f2:	f06f 0305 	mvn.w	r3, #5
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	e010      	b.n	8007a1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <osKernelStart+0x48>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d109      	bne.n	8007a16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a02:	f7ff ffbf 	bl	8007984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a06:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <osKernelStart+0x48>)
 8007a08:	2202      	movs	r2, #2
 8007a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a0c:	f001 f892 	bl	8008b34 <vTaskStartScheduler>
      stat = osOK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	607b      	str	r3, [r7, #4]
 8007a14:	e002      	b.n	8007a1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a1c:	687b      	ldr	r3, [r7, #4]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200054d8 	.word	0x200054d8

08007a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08e      	sub	sp, #56	@ 0x38
 8007a30:	af04      	add	r7, sp, #16
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a3c:	f3ef 8305 	mrs	r3, IPSR
 8007a40:	617b      	str	r3, [r7, #20]
  return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d17e      	bne.n	8007b46 <osThreadNew+0x11a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d07b      	beq.n	8007b46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a4e:	2380      	movs	r3, #128	@ 0x80
 8007a50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a52:	2318      	movs	r3, #24
 8007a54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d045      	beq.n	8007af2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <osThreadNew+0x48>
        name = attr->name;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <osThreadNew+0x6e>
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b38      	cmp	r3, #56	@ 0x38
 8007a8c:	d805      	bhi.n	8007a9a <osThreadNew+0x6e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <osThreadNew+0x72>
        return (NULL);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e054      	b.n	8007b48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <osThreadNew+0xa8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	2ba7      	cmp	r3, #167	@ 0xa7
 8007abc:	d90a      	bls.n	8007ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d006      	beq.n	8007ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <osThreadNew+0xa8>
        mem = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	e010      	b.n	8007af6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10c      	bne.n	8007af6 <osThreadNew+0xca>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d108      	bne.n	8007af6 <osThreadNew+0xca>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <osThreadNew+0xca>
          mem = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e001      	b.n	8007af6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d110      	bne.n	8007b1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6a3a      	ldr	r2, [r7, #32]
 8007b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fe1a 	bl	800874c <xTaskCreateStatic>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e013      	b.n	8007b46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d110      	bne.n	8007b46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f107 0310 	add.w	r3, r7, #16
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fe68 	bl	800880c <xTaskCreate>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <osThreadNew+0x11a>
            hTask = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b46:	693b      	ldr	r3, [r7, #16]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3728      	adds	r7, #40	@ 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b58:	f3ef 8305 	mrs	r3, IPSR
 8007b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <osDelay+0x1c>
    stat = osErrorISR;
 8007b64:	f06f 0305 	mvn.w	r3, #5
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e007      	b.n	8007b7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ffa6 	bl	8008ac8 <vTaskDelay>
    }
  }

  return (stat);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a07      	ldr	r2, [pc, #28]	@ (8007bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4a06      	ldr	r2, [pc, #24]	@ (8007bb8 <vApplicationGetIdleTaskMemory+0x30>)
 8007b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2280      	movs	r2, #128	@ 0x80
 8007ba4:	601a      	str	r2, [r3, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	200054dc 	.word	0x200054dc
 8007bb8:	20005584 	.word	0x20005584

08007bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a07      	ldr	r2, [pc, #28]	@ (8007be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4a06      	ldr	r2, [pc, #24]	@ (8007bec <vApplicationGetTimerTaskMemory+0x30>)
 8007bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bda:	601a      	str	r2, [r3, #0]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20005784 	.word	0x20005784
 8007bec:	2000582c 	.word	0x2000582c

08007bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f103 0208 	add.w	r2, r3, #8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f04f 32ff 	mov.w	r2, #4294967295
 8007c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f103 0208 	add.w	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f103 0208 	add.w	r2, r3, #8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d103      	bne.n	8007cb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e00c      	b.n	8007ccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e002      	b.n	8007cc0 <vListInsert+0x2e>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d2f6      	bcs.n	8007cba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	601a      	str	r2, [r3, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6892      	ldr	r2, [r2, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6852      	ldr	r2, [r2, #4]
 8007d24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d103      	bne.n	8007d38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	1e5a      	subs	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d84:	f002 f8a8 	bl	8009ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	3b01      	subs	r3, #1
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dba:	fb01 f303 	mul.w	r3, r1, r3
 8007dbe:	441a      	add	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	22ff      	movs	r2, #255	@ 0xff
 8007dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	22ff      	movs	r2, #255	@ 0xff
 8007dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d114      	bne.n	8007e04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01a      	beq.n	8007e18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3310      	adds	r3, #16
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 f942 	bl	8009070 <xTaskRemoveFromEventList>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d012      	beq.n	8007e18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <xQueueGenericReset+0xd0>)
 8007df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	e009      	b.n	8007e18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3310      	adds	r3, #16
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fef1 	bl	8007bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3324      	adds	r3, #36	@ 0x24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff feec 	bl	8007bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e18:	f002 f890 	bl	8009f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e1c:	2301      	movs	r3, #1
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	@ 0x38
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <xQueueGenericCreateStatic+0x56>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <xQueueGenericCreateStatic+0x5a>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <xQueueGenericCreateStatic+0x5c>
 8007e86:	2300      	movs	r3, #0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	623b      	str	r3, [r7, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <xQueueGenericCreateStatic+0x84>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <xQueueGenericCreateStatic+0x88>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <xQueueGenericCreateStatic+0x8a>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	61fb      	str	r3, [r7, #28]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ed2:	2350      	movs	r3, #80	@ 0x50
 8007ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b50      	cmp	r3, #80	@ 0x50
 8007eda:	d00b      	beq.n	8007ef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	61bb      	str	r3, [r7, #24]
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	e7fd      	b.n	8007ef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00d      	beq.n	8007f1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f805 	bl	8007f26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3730      	adds	r7, #48	@ 0x30
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e002      	b.n	8007f48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f54:	2101      	movs	r1, #1
 8007f56:	69b8      	ldr	r0, [r7, #24]
 8007f58:	f7ff fefe 	bl	8007d58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	@ 0x38
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xQueueGenericSend+0x34>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <xQueueGenericSend+0x42>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <xQueueGenericSend+0x46>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericSend+0x48>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xQueueGenericSend+0x64>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <xQueueGenericSend+0x72>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <xQueueGenericSend+0x76>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <xQueueGenericSend+0x78>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <xQueueGenericSend+0x94>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	623b      	str	r3, [r7, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008000:	f001 f9fc 	bl	80093fc <xTaskGetSchedulerState>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xQueueGenericSend+0xa4>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <xQueueGenericSend+0xa8>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <xQueueGenericSend+0xaa>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <xQueueGenericSend+0xc6>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	61fb      	str	r3, [r7, #28]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008032:	f001 ff51 	bl	8009ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <xQueueGenericSend+0xdc>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d129      	bne.n	800809c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800804e:	f000 fa0f 	bl	8008470 <prvCopyDataToQueue>
 8008052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d010      	beq.n	800807e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	3324      	adds	r3, #36	@ 0x24
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f805 	bl	8009070 <xTaskRemoveFromEventList>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d013      	beq.n	8008094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800806c:	4b3f      	ldr	r3, [pc, #252]	@ (800816c <xQueueGenericSend+0x200>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	e00a      	b.n	8008094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b39      	ldr	r3, [pc, #228]	@ (800816c <xQueueGenericSend+0x200>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008094:	f001 ff52 	bl	8009f3c <vPortExitCritical>
				return pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	e063      	b.n	8008164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080a2:	f001 ff4b 	bl	8009f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e05c      	b.n	8008164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 f83f 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080be:	f001 ff3d 	bl	8009f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c2:	f000 fda7 	bl	8008c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080c6:	f001 ff07 	bl	8009ed8 <vPortEnterCritical>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d103      	bne.n	80080e0 <xQueueGenericSend+0x174>
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d103      	bne.n	80080f6 <xQueueGenericSend+0x18a>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f6:	f001 ff21 	bl	8009f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080fa:	1d3a      	adds	r2, r7, #4
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f82e 	bl	8009164 <xTaskCheckForTimeOut>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d124      	bne.n	8008158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800810e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008110:	f000 faa6 	bl	8008660 <prvIsQueueFull>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d018      	beq.n	800814c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	3310      	adds	r3, #16
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f000 ff52 	bl	8008fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812a:	f000 fa31 	bl	8008590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800812e:	f000 fd7f 	bl	8008c30 <xTaskResumeAll>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f af7c 	bne.w	8008032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800813a:	4b0c      	ldr	r3, [pc, #48]	@ (800816c <xQueueGenericSend+0x200>)
 800813c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	e772      	b.n	8008032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800814c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814e:	f000 fa1f 	bl	8008590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008152:	f000 fd6d 	bl	8008c30 <xTaskResumeAll>
 8008156:	e76c      	b.n	8008032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800815a:	f000 fa19 	bl	8008590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800815e:	f000 fd67 	bl	8008c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008164:	4618      	mov	r0, r3
 8008166:	3738      	adds	r7, #56	@ 0x38
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b090      	sub	sp, #64	@ 0x40
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d103      	bne.n	80081ae <xQueueGenericSendFromISR+0x3e>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <xQueueGenericSendFromISR+0x42>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <xQueueGenericSendFromISR+0x44>
 80081b2:	2300      	movs	r3, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d103      	bne.n	80081de <xQueueGenericSendFromISR+0x6e>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <xQueueGenericSendFromISR+0x72>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <xQueueGenericSendFromISR+0x74>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	623b      	str	r3, [r7, #32]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008200:	f001 ff4a 	bl	800a098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008204:	f3ef 8211 	mrs	r2, BASEPRI
 8008208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61fa      	str	r2, [r7, #28]
 800821a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800821c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <xQueueGenericSendFromISR+0xc2>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d12f      	bne.n	8008292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008248:	f000 f912 	bl	8008470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800824c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d112      	bne.n	800827c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	3324      	adds	r3, #36	@ 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f000 ff04 	bl	8009070 <xTaskRemoveFromEventList>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00e      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e007      	b.n	800828c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800827c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008280:	3301      	adds	r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	b25a      	sxtb	r2, r3
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800828c:	2301      	movs	r3, #1
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008290:	e001      	b.n	8008296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3740      	adds	r7, #64	@ 0x40
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08c      	sub	sp, #48	@ 0x30
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <xQueueReceive+0x32>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	623b      	str	r3, [r7, #32]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <xQueueReceive+0x40>
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <xQueueReceive+0x44>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <xQueueReceive+0x46>
 80082f0:	2300      	movs	r3, #0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <xQueueReceive+0x62>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	61fb      	str	r3, [r7, #28]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800830e:	f001 f875 	bl	80093fc <xTaskGetSchedulerState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <xQueueReceive+0x72>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <xQueueReceive+0x76>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <xQueueReceive+0x78>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10b      	bne.n	8008340 <xQueueReceive+0x94>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	61bb      	str	r3, [r7, #24]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008340:	f001 fdca 	bl	8009ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01f      	beq.n	8008390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008354:	f000 f8f6 	bl	8008544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	1e5a      	subs	r2, r3, #1
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	3310      	adds	r3, #16
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fe7f 	bl	8009070 <xTaskRemoveFromEventList>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d007      	beq.n	8008388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008378:	4b3c      	ldr	r3, [pc, #240]	@ (800846c <xQueueReceive+0x1c0>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008388:	f001 fdd8 	bl	8009f3c <vPortExitCritical>
				return pdPASS;
 800838c:	2301      	movs	r3, #1
 800838e:	e069      	b.n	8008464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008396:	f001 fdd1 	bl	8009f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800839a:	2300      	movs	r3, #0
 800839c:	e062      	b.n	8008464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fec5 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083b2:	f001 fdc3 	bl	8009f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b6:	f000 fc2d 	bl	8008c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ba:	f001 fd8d 	bl	8009ed8 <vPortEnterCritical>
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083c4:	b25b      	sxtb	r3, r3
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d103      	bne.n	80083d4 <xQueueReceive+0x128>
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d103      	bne.n	80083ea <xQueueReceive+0x13e>
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083ea:	f001 fda7 	bl	8009f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ee:	1d3a      	adds	r2, r7, #4
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 feb4 	bl	8009164 <xTaskCheckForTimeOut>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d123      	bne.n	800844a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008404:	f000 f916 	bl	8008634 <prvIsQueueEmpty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d017      	beq.n	800843e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	3324      	adds	r3, #36	@ 0x24
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fdd8 	bl	8008fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800841c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841e:	f000 f8b7 	bl	8008590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008422:	f000 fc05 	bl	8008c30 <xTaskResumeAll>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d189      	bne.n	8008340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800842c:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <xQueueReceive+0x1c0>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	e780      	b.n	8008340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800843e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008440:	f000 f8a6 	bl	8008590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008444:	f000 fbf4 	bl	8008c30 <xTaskResumeAll>
 8008448:	e77a      	b.n	8008340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800844a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844c:	f000 f8a0 	bl	8008590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008450:	f000 fbee 	bl	8008c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008456:	f000 f8ed 	bl	8008634 <prvIsQueueEmpty>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	f43f af6f 	beq.w	8008340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008464:	4618      	mov	r0, r3
 8008466:	3730      	adds	r7, #48	@ 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10d      	bne.n	80084aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d14d      	bne.n	8008532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 ffcc 	bl	8009438 <xTaskPriorityDisinherit>
 80084a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	e043      	b.n	8008532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d119      	bne.n	80084e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6858      	ldr	r0, [r3, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b8:	461a      	mov	r2, r3
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	f004 fb01 	bl	800cac2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c8:	441a      	add	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d32b      	bcc.n	8008532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	605a      	str	r2, [r3, #4]
 80084e2:	e026      	b.n	8008532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68d8      	ldr	r0, [r3, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ec:	461a      	mov	r2, r3
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	f004 fae7 	bl	800cac2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fc:	425b      	negs	r3, r3
 80084fe:	441a      	add	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d207      	bcs.n	8008520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008518:	425b      	negs	r3, r3
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d105      	bne.n	8008532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3b01      	subs	r3, #1
 8008530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800853a:	697b      	ldr	r3, [r7, #20]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d018      	beq.n	8008588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d303      	bcc.n	8008578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68d9      	ldr	r1, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	6838      	ldr	r0, [r7, #0]
 8008584:	f004 fa9d 	bl	800cac2 <memcpy>
	}
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008598:	f001 fc9e 	bl	8009ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085a4:	e011      	b.n	80085ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d012      	beq.n	80085d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3324      	adds	r3, #36	@ 0x24
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fd5c 	bl	8009070 <xTaskRemoveFromEventList>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085be:	f000 fe35 	bl	800922c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dce9      	bgt.n	80085a6 <prvUnlockQueue+0x16>
 80085d2:	e000      	b.n	80085d6 <prvUnlockQueue+0x46>
					break;
 80085d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	22ff      	movs	r2, #255	@ 0xff
 80085da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80085de:	f001 fcad 	bl	8009f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085e2:	f001 fc79 	bl	8009ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085ee:	e011      	b.n	8008614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d012      	beq.n	800861e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3310      	adds	r3, #16
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fd37 	bl	8009070 <xTaskRemoveFromEventList>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008608:	f000 fe10 	bl	800922c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	3b01      	subs	r3, #1
 8008610:	b2db      	uxtb	r3, r3
 8008612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008618:	2b00      	cmp	r3, #0
 800861a:	dce9      	bgt.n	80085f0 <prvUnlockQueue+0x60>
 800861c:	e000      	b.n	8008620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800861e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	22ff      	movs	r2, #255	@ 0xff
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008628:	f001 fc88 	bl	8009f3c <vPortExitCritical>
}
 800862c:	bf00      	nop
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800863c:	f001 fc4c 	bl	8009ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008648:	2301      	movs	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e001      	b.n	8008652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008652:	f001 fc73 	bl	8009f3c <vPortExitCritical>

	return xReturn;
 8008656:	68fb      	ldr	r3, [r7, #12]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008668:	f001 fc36 	bl	8009ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	429a      	cmp	r2, r3
 8008676:	d102      	bne.n	800867e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e001      	b.n	8008682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008682:	f001 fc5b 	bl	8009f3c <vPortExitCritical>

	return xReturn;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	e014      	b.n	80086ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086a0:	4a0f      	ldr	r2, [pc, #60]	@ (80086e0 <vQueueAddToRegistry+0x50>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10b      	bne.n	80086c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086ac:	490c      	ldr	r1, [pc, #48]	@ (80086e0 <vQueueAddToRegistry+0x50>)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086b6:	4a0a      	ldr	r2, [pc, #40]	@ (80086e0 <vQueueAddToRegistry+0x50>)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086c2:	e006      	b.n	80086d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b07      	cmp	r3, #7
 80086ce:	d9e7      	bls.n	80086a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20005c2c 	.word	0x20005c2c

080086e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086f4:	f001 fbf0 	bl	8009ed8 <vPortEnterCritical>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086fe:	b25b      	sxtb	r3, r3
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d103      	bne.n	800870e <vQueueWaitForMessageRestricted+0x2a>
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008714:	b25b      	sxtb	r3, r3
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d103      	bne.n	8008724 <vQueueWaitForMessageRestricted+0x40>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008724:	f001 fc0a 	bl	8009f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	3324      	adds	r3, #36	@ 0x24
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fc6d 	bl	8009018 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f7ff ff26 	bl	8008590 <prvUnlockQueue>
	}
 8008744:	bf00      	nop
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08e      	sub	sp, #56	@ 0x38
 8008750:	af04      	add	r7, sp, #16
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	623b      	str	r3, [r7, #32]
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61fb      	str	r3, [r7, #28]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008796:	23a8      	movs	r3, #168	@ 0xa8
 8008798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2ba8      	cmp	r3, #168	@ 0xa8
 800879e:	d00b      	beq.n	80087b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61bb      	str	r3, [r7, #24]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01e      	beq.n	80087fe <xTaskCreateStatic+0xb2>
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d01b      	beq.n	80087fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087d8:	2300      	movs	r3, #0
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	f107 0314 	add.w	r3, r7, #20
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f851 	bl	8008898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087f8:	f000 f8f6 	bl	80089e8 <prvAddNewTaskToReadyList>
 80087fc:	e001      	b.n	8008802 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008802:	697b      	ldr	r3, [r7, #20]
	}
 8008804:	4618      	mov	r0, r3
 8008806:	3728      	adds	r7, #40	@ 0x28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	@ 0x30
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800881c:	88fb      	ldrh	r3, [r7, #6]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fc7b 	bl	800a11c <pvPortMalloc>
 8008826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00e      	beq.n	800884c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800882e:	20a8      	movs	r0, #168	@ 0xa8
 8008830:	f001 fc74 	bl	800a11c <pvPortMalloc>
 8008834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	631a      	str	r2, [r3, #48]	@ 0x30
 8008842:	e005      	b.n	8008850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008844:	6978      	ldr	r0, [r7, #20]
 8008846:	f001 fd37 	bl	800a2b8 <vPortFree>
 800884a:	e001      	b.n	8008850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d017      	beq.n	8008886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800885e:	88fa      	ldrh	r2, [r7, #6]
 8008860:	2300      	movs	r3, #0
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	9302      	str	r3, [sp, #8]
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f80f 	bl	8008898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800887a:	69f8      	ldr	r0, [r7, #28]
 800887c:	f000 f8b4 	bl	80089e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	61bb      	str	r3, [r7, #24]
 8008884:	e002      	b.n	800888c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295
 800888a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800888c:	69bb      	ldr	r3, [r7, #24]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	461a      	mov	r2, r3
 80088b0:	21a5      	movs	r1, #165	@ 0xa5
 80088b2:	f004 f80a 	bl	800c8ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088c0:	3b01      	subs	r3, #1
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	617b      	str	r3, [r7, #20]
}
 80088ec:	bf00      	nop
 80088ee:	bf00      	nop
 80088f0:	e7fd      	b.n	80088ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01f      	beq.n	8008938 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	e012      	b.n	8008924 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	7819      	ldrb	r1, [r3, #0]
 8008906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	3334      	adds	r3, #52	@ 0x34
 800890e:	460a      	mov	r2, r1
 8008910:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d006      	beq.n	800892c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d9e9      	bls.n	80088fe <prvInitialiseNewTask+0x66>
 800892a:	e000      	b.n	800892e <prvInitialiseNewTask+0x96>
			{
				break;
 800892c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008936:	e003      	b.n	8008940 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	2b37      	cmp	r3, #55	@ 0x37
 8008944:	d901      	bls.n	800894a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008946:	2337      	movs	r3, #55	@ 0x37
 8008948:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800894e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008954:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	2200      	movs	r2, #0
 800895a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	3304      	adds	r3, #4
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff f965 	bl	8007c30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	3318      	adds	r3, #24
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff f960 	bl	8007c30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008974:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008984:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	2200      	movs	r2, #0
 8008992:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	3354      	adds	r3, #84	@ 0x54
 800899a:	224c      	movs	r2, #76	@ 0x4c
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f003 ff93 	bl	800c8ca <memset>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	4a0d      	ldr	r2, [pc, #52]	@ (80089dc <prvInitialiseNewTask+0x144>)
 80089a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	4a0c      	ldr	r2, [pc, #48]	@ (80089e0 <prvInitialiseNewTask+0x148>)
 80089ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	4a0c      	ldr	r2, [pc, #48]	@ (80089e4 <prvInitialiseNewTask+0x14c>)
 80089b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	68f9      	ldr	r1, [r7, #12]
 80089ba:	69b8      	ldr	r0, [r7, #24]
 80089bc:	f001 f95a 	bl	8009c74 <pxPortInitialiseStack>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d2:	bf00      	nop
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20009ec8 	.word	0x20009ec8
 80089e0:	20009f30 	.word	0x20009f30
 80089e4:	20009f98 	.word	0x20009f98

080089e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089f0:	f001 fa72 	bl	8009ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089f4:	4b2d      	ldr	r3, [pc, #180]	@ (8008aac <prvAddNewTaskToReadyList+0xc4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	4a2c      	ldr	r2, [pc, #176]	@ (8008aac <prvAddNewTaskToReadyList+0xc4>)
 80089fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089fe:	4b2c      	ldr	r3, [pc, #176]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d109      	bne.n	8008a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a06:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc8>)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a0c:	4b27      	ldr	r3, [pc, #156]	@ (8008aac <prvAddNewTaskToReadyList+0xc4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d110      	bne.n	8008a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a14:	f000 fc2e 	bl	8009274 <prvInitialiseTaskLists>
 8008a18:	e00d      	b.n	8008a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a1a:	4b26      	ldr	r3, [pc, #152]	@ (8008ab4 <prvAddNewTaskToReadyList+0xcc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a22:	4b23      	ldr	r3, [pc, #140]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d802      	bhi.n	8008a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a30:	4a1f      	ldr	r2, [pc, #124]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc8>)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a36:	4b20      	ldr	r3, [pc, #128]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd0>)
 8008a3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a40:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd0>)
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008abc <prvAddNewTaskToReadyList+0xd4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d903      	bls.n	8008a5c <prvAddNewTaskToReadyList+0x74>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a58:	4a18      	ldr	r2, [pc, #96]	@ (8008abc <prvAddNewTaskToReadyList+0xd4>)
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4a15      	ldr	r2, [pc, #84]	@ (8008ac0 <prvAddNewTaskToReadyList+0xd8>)
 8008a6a:	441a      	add	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f7ff f8e9 	bl	8007c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a78:	f001 fa60 	bl	8009f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <prvAddNewTaskToReadyList+0xcc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a84:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab0 <prvAddNewTaskToReadyList+0xc8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d207      	bcs.n	8008aa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac4 <prvAddNewTaskToReadyList+0xdc>)
 8008a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20006140 	.word	0x20006140
 8008ab0:	20005c6c 	.word	0x20005c6c
 8008ab4:	2000614c 	.word	0x2000614c
 8008ab8:	2000615c 	.word	0x2000615c
 8008abc:	20006148 	.word	0x20006148
 8008ac0:	20005c70 	.word	0x20005c70
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d018      	beq.n	8008b0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ada:	4b14      	ldr	r3, [pc, #80]	@ (8008b2c <vTaskDelay+0x64>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <vTaskDelay+0x32>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008afa:	f000 f88b 	bl	8008c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fd09 	bl	8009518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b06:	f000 f893 	bl	8008c30 <xTaskResumeAll>
 8008b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b12:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <vTaskDelay+0x68>)
 8008b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20006168 	.word	0x20006168
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	@ 0x28
 8008b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b42:	463a      	mov	r2, r7
 8008b44:	1d39      	adds	r1, r7, #4
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff f81c 	bl	8007b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	9202      	str	r2, [sp, #8]
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	460a      	mov	r2, r1
 8008b62:	4924      	ldr	r1, [pc, #144]	@ (8008bf4 <vTaskStartScheduler+0xc0>)
 8008b64:	4824      	ldr	r0, [pc, #144]	@ (8008bf8 <vTaskStartScheduler+0xc4>)
 8008b66:	f7ff fdf1 	bl	800874c <xTaskCreateStatic>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4a23      	ldr	r2, [pc, #140]	@ (8008bfc <vTaskStartScheduler+0xc8>)
 8008b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b70:	4b22      	ldr	r3, [pc, #136]	@ (8008bfc <vTaskStartScheduler+0xc8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e001      	b.n	8008b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d102      	bne.n	8008b8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b88:	f000 fd1a 	bl	80095c0 <xTimerCreateTimerTask>
 8008b8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d11b      	bne.n	8008bcc <vTaskStartScheduler+0x98>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	613b      	str	r3, [r7, #16]
}
 8008ba6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ba8:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <vTaskStartScheduler+0xcc>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3354      	adds	r3, #84	@ 0x54
 8008bae:	4a15      	ldr	r2, [pc, #84]	@ (8008c04 <vTaskStartScheduler+0xd0>)
 8008bb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bb2:	4b15      	ldr	r3, [pc, #84]	@ (8008c08 <vTaskStartScheduler+0xd4>)
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bba:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <vTaskStartScheduler+0xd8>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bc0:	4b13      	ldr	r3, [pc, #76]	@ (8008c10 <vTaskStartScheduler+0xdc>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bc6:	f001 f8e3 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bca:	e00f      	b.n	8008bec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d10b      	bne.n	8008bec <vTaskStartScheduler+0xb8>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60fb      	str	r3, [r7, #12]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <vTaskStartScheduler+0xb4>
}
 8008bec:	bf00      	nop
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	080100c4 	.word	0x080100c4
 8008bf8:	08009245 	.word	0x08009245
 8008bfc:	20006164 	.word	0x20006164
 8008c00:	20005c6c 	.word	0x20005c6c
 8008c04:	20000050 	.word	0x20000050
 8008c08:	20006160 	.word	0x20006160
 8008c0c:	2000614c 	.word	0x2000614c
 8008c10:	20006144 	.word	0x20006144

08008c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c18:	4b04      	ldr	r3, [pc, #16]	@ (8008c2c <vTaskSuspendAll+0x18>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	4a03      	ldr	r2, [pc, #12]	@ (8008c2c <vTaskSuspendAll+0x18>)
 8008c20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c22:	bf00      	nop
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20006168 	.word	0x20006168

08008c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c3e:	4b42      	ldr	r3, [pc, #264]	@ (8008d48 <xTaskResumeAll+0x118>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10b      	bne.n	8008c5e <xTaskResumeAll+0x2e>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	603b      	str	r3, [r7, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c5e:	f001 f93b 	bl	8009ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c62:	4b39      	ldr	r3, [pc, #228]	@ (8008d48 <xTaskResumeAll+0x118>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	4a37      	ldr	r2, [pc, #220]	@ (8008d48 <xTaskResumeAll+0x118>)
 8008c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6c:	4b36      	ldr	r3, [pc, #216]	@ (8008d48 <xTaskResumeAll+0x118>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d162      	bne.n	8008d3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c74:	4b35      	ldr	r3, [pc, #212]	@ (8008d4c <xTaskResumeAll+0x11c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d05e      	beq.n	8008d3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c7c:	e02f      	b.n	8008cde <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7e:	4b34      	ldr	r3, [pc, #208]	@ (8008d50 <xTaskResumeAll+0x120>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3318      	adds	r3, #24
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f83a 	bl	8007d04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff f835 	bl	8007d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8008d54 <xTaskResumeAll+0x124>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d903      	bls.n	8008cae <xTaskResumeAll+0x7e>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	4a2a      	ldr	r2, [pc, #168]	@ (8008d54 <xTaskResumeAll+0x124>)
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4a27      	ldr	r2, [pc, #156]	@ (8008d58 <xTaskResumeAll+0x128>)
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7fe ffc0 	bl	8007c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cce:	4b23      	ldr	r3, [pc, #140]	@ (8008d5c <xTaskResumeAll+0x12c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d302      	bcc.n	8008cde <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008cd8:	4b21      	ldr	r3, [pc, #132]	@ (8008d60 <xTaskResumeAll+0x130>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cde:	4b1c      	ldr	r3, [pc, #112]	@ (8008d50 <xTaskResumeAll+0x120>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1cb      	bne.n	8008c7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cec:	f000 fb66 	bl	80093bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d64 <xTaskResumeAll+0x134>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d010      	beq.n	8008d1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cfc:	f000 f846 	bl	8008d8c <xTaskIncrementTick>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d06:	4b16      	ldr	r3, [pc, #88]	@ (8008d60 <xTaskResumeAll+0x130>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1f1      	bne.n	8008cfc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008d18:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <xTaskResumeAll+0x134>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d1e:	4b10      	ldr	r3, [pc, #64]	@ (8008d60 <xTaskResumeAll+0x130>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d009      	beq.n	8008d3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d26:	2301      	movs	r3, #1
 8008d28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d68 <xTaskResumeAll+0x138>)
 8008d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d3a:	f001 f8ff 	bl	8009f3c <vPortExitCritical>

	return xAlreadyYielded;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20006168 	.word	0x20006168
 8008d4c:	20006140 	.word	0x20006140
 8008d50:	20006100 	.word	0x20006100
 8008d54:	20006148 	.word	0x20006148
 8008d58:	20005c70 	.word	0x20005c70
 8008d5c:	20005c6c 	.word	0x20005c6c
 8008d60:	20006154 	.word	0x20006154
 8008d64:	20006150 	.word	0x20006150
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d72:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <xTaskGetTickCount+0x1c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d78:	687b      	ldr	r3, [r7, #4]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20006144 	.word	0x20006144

08008d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d96:	4b4f      	ldr	r3, [pc, #316]	@ (8008ed4 <xTaskIncrementTick+0x148>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 8090 	bne.w	8008ec0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008da0:	4b4d      	ldr	r3, [pc, #308]	@ (8008ed8 <xTaskIncrementTick+0x14c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3301      	adds	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008da8:	4a4b      	ldr	r2, [pc, #300]	@ (8008ed8 <xTaskIncrementTick+0x14c>)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d121      	bne.n	8008df8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008db4:	4b49      	ldr	r3, [pc, #292]	@ (8008edc <xTaskIncrementTick+0x150>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	603b      	str	r3, [r7, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xTaskIncrementTick+0x46>
 8008dd6:	4b41      	ldr	r3, [pc, #260]	@ (8008edc <xTaskIncrementTick+0x150>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	4b40      	ldr	r3, [pc, #256]	@ (8008ee0 <xTaskIncrementTick+0x154>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a3e      	ldr	r2, [pc, #248]	@ (8008edc <xTaskIncrementTick+0x150>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ee0 <xTaskIncrementTick+0x154>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee4 <xTaskIncrementTick+0x158>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ee4 <xTaskIncrementTick+0x158>)
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	f000 fae2 	bl	80093bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008df8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee8 <xTaskIncrementTick+0x15c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d349      	bcc.n	8008e96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e02:	4b36      	ldr	r3, [pc, #216]	@ (8008edc <xTaskIncrementTick+0x150>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d104      	bne.n	8008e16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0c:	4b36      	ldr	r3, [pc, #216]	@ (8008ee8 <xTaskIncrementTick+0x15c>)
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e12:	601a      	str	r2, [r3, #0]
					break;
 8008e14:	e03f      	b.n	8008e96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e16:	4b31      	ldr	r3, [pc, #196]	@ (8008edc <xTaskIncrementTick+0x150>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d203      	bcs.n	8008e36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee8 <xTaskIncrementTick+0x15c>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e34:	e02f      	b.n	8008e96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe ff62 	bl	8007d04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3318      	adds	r3, #24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe ff59 	bl	8007d04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e56:	4b25      	ldr	r3, [pc, #148]	@ (8008eec <xTaskIncrementTick+0x160>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d903      	bls.n	8008e66 <xTaskIncrementTick+0xda>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	4a22      	ldr	r2, [pc, #136]	@ (8008eec <xTaskIncrementTick+0x160>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef0 <xTaskIncrementTick+0x164>)
 8008e74:	441a      	add	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fe fee4 	bl	8007c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e86:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef4 <xTaskIncrementTick+0x168>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d3b8      	bcc.n	8008e02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e94:	e7b5      	b.n	8008e02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e96:	4b17      	ldr	r3, [pc, #92]	@ (8008ef4 <xTaskIncrementTick+0x168>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9c:	4914      	ldr	r1, [pc, #80]	@ (8008ef0 <xTaskIncrementTick+0x164>)
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d901      	bls.n	8008eb2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008eb2:	4b11      	ldr	r3, [pc, #68]	@ (8008ef8 <xTaskIncrementTick+0x16c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e004      	b.n	8008eca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8008efc <xTaskIncrementTick+0x170>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8008efc <xTaskIncrementTick+0x170>)
 8008ec8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008eca:	697b      	ldr	r3, [r7, #20]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20006168 	.word	0x20006168
 8008ed8:	20006144 	.word	0x20006144
 8008edc:	200060f8 	.word	0x200060f8
 8008ee0:	200060fc 	.word	0x200060fc
 8008ee4:	20006158 	.word	0x20006158
 8008ee8:	20006160 	.word	0x20006160
 8008eec:	20006148 	.word	0x20006148
 8008ef0:	20005c70 	.word	0x20005c70
 8008ef4:	20005c6c 	.word	0x20005c6c
 8008ef8:	20006154 	.word	0x20006154
 8008efc:	20006150 	.word	0x20006150

08008f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f06:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb4 <vTaskSwitchContext+0xb4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb8 <vTaskSwitchContext+0xb8>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f14:	e047      	b.n	8008fa6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008f16:	4b28      	ldr	r3, [pc, #160]	@ (8008fb8 <vTaskSwitchContext+0xb8>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1c:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <vTaskSwitchContext+0xbc>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e011      	b.n	8008f48 <vTaskSwitchContext+0x48>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <vTaskSwitchContext+0x42>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	607b      	str	r3, [r7, #4]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <vTaskSwitchContext+0x3e>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	491d      	ldr	r1, [pc, #116]	@ (8008fc0 <vTaskSwitchContext+0xc0>)
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	440b      	add	r3, r1
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0e3      	beq.n	8008f24 <vTaskSwitchContext+0x24>
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4a16      	ldr	r2, [pc, #88]	@ (8008fc0 <vTaskSwitchContext+0xc0>)
 8008f68:	4413      	add	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d104      	bne.n	8008f8c <vTaskSwitchContext+0x8c>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	605a      	str	r2, [r3, #4]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc4 <vTaskSwitchContext+0xc4>)
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	4a09      	ldr	r2, [pc, #36]	@ (8008fbc <vTaskSwitchContext+0xbc>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f9c:	4b09      	ldr	r3, [pc, #36]	@ (8008fc4 <vTaskSwitchContext+0xc4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3354      	adds	r3, #84	@ 0x54
 8008fa2:	4a09      	ldr	r2, [pc, #36]	@ (8008fc8 <vTaskSwitchContext+0xc8>)
 8008fa4:	6013      	str	r3, [r2, #0]
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20006168 	.word	0x20006168
 8008fb8:	20006154 	.word	0x20006154
 8008fbc:	20006148 	.word	0x20006148
 8008fc0:	20005c70 	.word	0x20005c70
 8008fc4:	20005c6c 	.word	0x20005c6c
 8008fc8:	20000050 	.word	0x20000050

08008fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60fb      	str	r3, [r7, #12]
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <vTaskPlaceOnEventList+0x48>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3318      	adds	r3, #24
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7fe fe48 	bl	8007c92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009002:	2101      	movs	r1, #1
 8009004:	6838      	ldr	r0, [r7, #0]
 8009006:	f000 fa87 	bl	8009518 <prvAddCurrentTaskToDelayedList>
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20005c6c 	.word	0x20005c6c

08009018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	617b      	str	r3, [r7, #20]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009042:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <vTaskPlaceOnEventListRestricted+0x54>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3318      	adds	r3, #24
 8009048:	4619      	mov	r1, r3
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7fe fdfd 	bl	8007c4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009056:	f04f 33ff 	mov.w	r3, #4294967295
 800905a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	68b8      	ldr	r0, [r7, #8]
 8009060:	f000 fa5a 	bl	8009518 <prvAddCurrentTaskToDelayedList>
	}
 8009064:	bf00      	nop
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20005c6c 	.word	0x20005c6c

08009070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	3318      	adds	r3, #24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fe2e 	bl	8007d04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <xTaskRemoveFromEventList+0xb0>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d11d      	bne.n	80090ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fe25 	bl	8007d04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090be:	4b19      	ldr	r3, [pc, #100]	@ (8009124 <xTaskRemoveFromEventList+0xb4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d903      	bls.n	80090ce <xTaskRemoveFromEventList+0x5e>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	4a16      	ldr	r2, [pc, #88]	@ (8009124 <xTaskRemoveFromEventList+0xb4>)
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4a13      	ldr	r2, [pc, #76]	@ (8009128 <xTaskRemoveFromEventList+0xb8>)
 80090dc:	441a      	add	r2, r3
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe fdb0 	bl	8007c4a <vListInsertEnd>
 80090ea:	e005      	b.n	80090f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3318      	adds	r3, #24
 80090f0:	4619      	mov	r1, r3
 80090f2:	480e      	ldr	r0, [pc, #56]	@ (800912c <xTaskRemoveFromEventList+0xbc>)
 80090f4:	f7fe fda9 	bl	8007c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <xTaskRemoveFromEventList+0xc0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009102:	429a      	cmp	r2, r3
 8009104:	d905      	bls.n	8009112 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800910a:	4b0a      	ldr	r3, [pc, #40]	@ (8009134 <xTaskRemoveFromEventList+0xc4>)
 800910c:	2201      	movs	r2, #1
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e001      	b.n	8009116 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009116:	697b      	ldr	r3, [r7, #20]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20006168 	.word	0x20006168
 8009124:	20006148 	.word	0x20006148
 8009128:	20005c70 	.word	0x20005c70
 800912c:	20006100 	.word	0x20006100
 8009130:	20005c6c 	.word	0x20005c6c
 8009134:	20006154 	.word	0x20006154

08009138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009140:	4b06      	ldr	r3, [pc, #24]	@ (800915c <vTaskInternalSetTimeOutState+0x24>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <vTaskInternalSetTimeOutState+0x28>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20006158 	.word	0x20006158
 8009160:	20006144 	.word	0x20006144

08009164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	e7fd      	b.n	8009188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80091aa:	f000 fe95 	bl	8009ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <xTaskCheckForTimeOut+0xc0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d102      	bne.n	80091ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
 80091cc:	e023      	b.n	8009216 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b15      	ldr	r3, [pc, #84]	@ (8009228 <xTaskCheckForTimeOut+0xc4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d007      	beq.n	80091ea <xTaskCheckForTimeOut+0x86>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d302      	bcc.n	80091ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	e015      	b.n	8009216 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d20b      	bcs.n	800920c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	1ad2      	subs	r2, r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff ff99 	bl	8009138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009206:	2300      	movs	r3, #0
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	e004      	b.n	8009216 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009216:	f000 fe91 	bl	8009f3c <vPortExitCritical>

	return xReturn;
 800921a:	69fb      	ldr	r3, [r7, #28]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20006144 	.word	0x20006144
 8009228:	20006158 	.word	0x20006158

0800922c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009230:	4b03      	ldr	r3, [pc, #12]	@ (8009240 <vTaskMissedYield+0x14>)
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20006154 	.word	0x20006154

08009244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800924c:	f000 f852 	bl	80092f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009250:	4b06      	ldr	r3, [pc, #24]	@ (800926c <prvIdleTask+0x28>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d9f9      	bls.n	800924c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <prvIdleTask+0x2c>)
 800925a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009268:	e7f0      	b.n	800924c <prvIdleTask+0x8>
 800926a:	bf00      	nop
 800926c:	20005c70 	.word	0x20005c70
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800927a:	2300      	movs	r3, #0
 800927c:	607b      	str	r3, [r7, #4]
 800927e:	e00c      	b.n	800929a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <prvInitialiseTaskLists+0x60>)
 800928c:	4413      	add	r3, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fcae 	bl	8007bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b37      	cmp	r3, #55	@ 0x37
 800929e:	d9ef      	bls.n	8009280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092a0:	480d      	ldr	r0, [pc, #52]	@ (80092d8 <prvInitialiseTaskLists+0x64>)
 80092a2:	f7fe fca5 	bl	8007bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092a6:	480d      	ldr	r0, [pc, #52]	@ (80092dc <prvInitialiseTaskLists+0x68>)
 80092a8:	f7fe fca2 	bl	8007bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092ac:	480c      	ldr	r0, [pc, #48]	@ (80092e0 <prvInitialiseTaskLists+0x6c>)
 80092ae:	f7fe fc9f 	bl	8007bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092b2:	480c      	ldr	r0, [pc, #48]	@ (80092e4 <prvInitialiseTaskLists+0x70>)
 80092b4:	f7fe fc9c 	bl	8007bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092b8:	480b      	ldr	r0, [pc, #44]	@ (80092e8 <prvInitialiseTaskLists+0x74>)
 80092ba:	f7fe fc99 	bl	8007bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092be:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <prvInitialiseTaskLists+0x78>)
 80092c0:	4a05      	ldr	r2, [pc, #20]	@ (80092d8 <prvInitialiseTaskLists+0x64>)
 80092c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092c4:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <prvInitialiseTaskLists+0x7c>)
 80092c6:	4a05      	ldr	r2, [pc, #20]	@ (80092dc <prvInitialiseTaskLists+0x68>)
 80092c8:	601a      	str	r2, [r3, #0]
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20005c70 	.word	0x20005c70
 80092d8:	200060d0 	.word	0x200060d0
 80092dc:	200060e4 	.word	0x200060e4
 80092e0:	20006100 	.word	0x20006100
 80092e4:	20006114 	.word	0x20006114
 80092e8:	2000612c 	.word	0x2000612c
 80092ec:	200060f8 	.word	0x200060f8
 80092f0:	200060fc 	.word	0x200060fc

080092f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092fa:	e019      	b.n	8009330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092fc:	f000 fdec 	bl	8009ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009300:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <prvCheckTasksWaitingTermination+0x50>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fcf9 	bl	8007d04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009312:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <prvCheckTasksWaitingTermination+0x54>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	4a0b      	ldr	r2, [pc, #44]	@ (8009348 <prvCheckTasksWaitingTermination+0x54>)
 800931a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800931c:	4b0b      	ldr	r3, [pc, #44]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3b01      	subs	r3, #1
 8009322:	4a0a      	ldr	r2, [pc, #40]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 8009324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009326:	f000 fe09 	bl	8009f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f810 	bl	8009350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009330:	4b06      	ldr	r3, [pc, #24]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e1      	bne.n	80092fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20006114 	.word	0x20006114
 8009348:	20006140 	.word	0x20006140
 800934c:	20006128 	.word	0x20006128

08009350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3354      	adds	r3, #84	@ 0x54
 800935c:	4618      	mov	r0, r3
 800935e:	f003 fadf 	bl	800c920 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009368:	2b00      	cmp	r3, #0
 800936a:	d108      	bne.n	800937e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009370:	4618      	mov	r0, r3
 8009372:	f000 ffa1 	bl	800a2b8 <vPortFree>
				vPortFree( pxTCB );
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 ff9e 	bl	800a2b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800937c:	e019      	b.n	80093b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009384:	2b01      	cmp	r3, #1
 8009386:	d103      	bne.n	8009390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 ff95 	bl	800a2b8 <vPortFree>
	}
 800938e:	e010      	b.n	80093b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009396:	2b02      	cmp	r3, #2
 8009398:	d00b      	beq.n	80093b2 <prvDeleteTCB+0x62>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	60fb      	str	r3, [r7, #12]
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	e7fd      	b.n	80093ae <prvDeleteTCB+0x5e>
	}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093d4:	e008      	b.n	80093e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d6:	4b07      	ldr	r3, [pc, #28]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4a04      	ldr	r2, [pc, #16]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093e6:	6013      	str	r3, [r2, #0]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	200060f8 	.word	0x200060f8
 80093f8:	20006160 	.word	0x20006160

080093fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009402:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <xTaskGetSchedulerState+0x34>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d102      	bne.n	8009410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800940a:	2301      	movs	r3, #1
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	e008      	b.n	8009422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009410:	4b08      	ldr	r3, [pc, #32]	@ (8009434 <xTaskGetSchedulerState+0x38>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009418:	2302      	movs	r3, #2
 800941a:	607b      	str	r3, [r7, #4]
 800941c:	e001      	b.n	8009422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009422:	687b      	ldr	r3, [r7, #4]
	}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	2000614c 	.word	0x2000614c
 8009434:	20006168 	.word	0x20006168

08009438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d058      	beq.n	8009500 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800944e:	4b2f      	ldr	r3, [pc, #188]	@ (800950c <xTaskPriorityDisinherit+0xd4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	429a      	cmp	r2, r3
 8009456:	d00b      	beq.n	8009470 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60bb      	str	r3, [r7, #8]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009494:	1e5a      	subs	r2, r3, #1
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d02c      	beq.n	8009500 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d128      	bne.n	8009500 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fc26 	bl	8007d04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009510 <xTaskPriorityDisinherit+0xd8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d903      	bls.n	80094e0 <xTaskPriorityDisinherit+0xa8>
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009510 <xTaskPriorityDisinherit+0xd8>)
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4a09      	ldr	r2, [pc, #36]	@ (8009514 <xTaskPriorityDisinherit+0xdc>)
 80094ee:	441a      	add	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	f7fe fba7 	bl	8007c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094fc:	2301      	movs	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009500:	697b      	ldr	r3, [r7, #20]
	}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20005c6c 	.word	0x20005c6c
 8009510:	20006148 	.word	0x20006148
 8009514:	20005c70 	.word	0x20005c70

08009518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009522:	4b21      	ldr	r3, [pc, #132]	@ (80095a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009528:	4b20      	ldr	r3, [pc, #128]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3304      	adds	r3, #4
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fbe8 	bl	8007d04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d10a      	bne.n	8009552 <prvAddCurrentTaskToDelayedList+0x3a>
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009542:	4b1a      	ldr	r3, [pc, #104]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3304      	adds	r3, #4
 8009548:	4619      	mov	r1, r3
 800954a:	4819      	ldr	r0, [pc, #100]	@ (80095b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800954c:	f7fe fb7d 	bl	8007c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009550:	e026      	b.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800955a:	4b14      	ldr	r3, [pc, #80]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	429a      	cmp	r2, r3
 8009568:	d209      	bcs.n	800957e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800956a:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b0f      	ldr	r3, [pc, #60]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7fe fb8b 	bl	8007c92 <vListInsert>
}
 800957c:	e010      	b.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fb81 	bl	8007c92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d202      	bcs.n	80095a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800959a:	4a08      	ldr	r2, [pc, #32]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6013      	str	r3, [r2, #0]
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20006144 	.word	0x20006144
 80095ac:	20005c6c 	.word	0x20005c6c
 80095b0:	2000612c 	.word	0x2000612c
 80095b4:	200060fc 	.word	0x200060fc
 80095b8:	200060f8 	.word	0x200060f8
 80095bc:	20006160 	.word	0x20006160

080095c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08a      	sub	sp, #40	@ 0x28
 80095c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095ca:	f000 fb13 	bl	8009bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009644 <xTimerCreateTimerTask+0x84>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d021      	beq.n	800961a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095de:	1d3a      	adds	r2, r7, #4
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	f107 030c 	add.w	r3, r7, #12
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fae7 	bl	8007bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	9202      	str	r2, [sp, #8]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	2302      	movs	r3, #2
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2300      	movs	r3, #0
 80095fe:	460a      	mov	r2, r1
 8009600:	4911      	ldr	r1, [pc, #68]	@ (8009648 <xTimerCreateTimerTask+0x88>)
 8009602:	4812      	ldr	r0, [pc, #72]	@ (800964c <xTimerCreateTimerTask+0x8c>)
 8009604:	f7ff f8a2 	bl	800874c <xTaskCreateStatic>
 8009608:	4603      	mov	r3, r0
 800960a:	4a11      	ldr	r2, [pc, #68]	@ (8009650 <xTimerCreateTimerTask+0x90>)
 800960c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800960e:	4b10      	ldr	r3, [pc, #64]	@ (8009650 <xTimerCreateTimerTask+0x90>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009616:	2301      	movs	r3, #1
 8009618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009638:	697b      	ldr	r3, [r7, #20]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	2000619c 	.word	0x2000619c
 8009648:	080100cc 	.word	0x080100cc
 800964c:	0800978d 	.word	0x0800978d
 8009650:	200061a0 	.word	0x200061a0

08009654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08a      	sub	sp, #40	@ 0x28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009662:	2300      	movs	r3, #0
 8009664:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <xTimerGenericCommand+0x30>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009684:	4b19      	ldr	r3, [pc, #100]	@ (80096ec <xTimerGenericCommand+0x98>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d02a      	beq.n	80096e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b05      	cmp	r3, #5
 800969c:	dc18      	bgt.n	80096d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800969e:	f7ff fead 	bl	80093fc <xTaskGetSchedulerState>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d109      	bne.n	80096bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096a8:	4b10      	ldr	r3, [pc, #64]	@ (80096ec <xTimerGenericCommand+0x98>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	f107 0110 	add.w	r1, r7, #16
 80096b0:	2300      	movs	r3, #0
 80096b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b4:	f7fe fc5a 	bl	8007f6c <xQueueGenericSend>
 80096b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80096ba:	e012      	b.n	80096e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096bc:	4b0b      	ldr	r3, [pc, #44]	@ (80096ec <xTimerGenericCommand+0x98>)
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	f107 0110 	add.w	r1, r7, #16
 80096c4:	2300      	movs	r3, #0
 80096c6:	2200      	movs	r2, #0
 80096c8:	f7fe fc50 	bl	8007f6c <xQueueGenericSend>
 80096cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80096ce:	e008      	b.n	80096e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096d0:	4b06      	ldr	r3, [pc, #24]	@ (80096ec <xTimerGenericCommand+0x98>)
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	f107 0110 	add.w	r1, r7, #16
 80096d8:	2300      	movs	r3, #0
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	f7fe fd48 	bl	8008170 <xQueueGenericSendFromISR>
 80096e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3728      	adds	r7, #40	@ 0x28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	2000619c 	.word	0x2000619c

080096f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fa:	4b23      	ldr	r3, [pc, #140]	@ (8009788 <prvProcessExpiredTimer+0x98>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fafb 	bl	8007d04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d023      	beq.n	8009764 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	18d1      	adds	r1, r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	6978      	ldr	r0, [r7, #20]
 800972a:	f000 f8d5 	bl	80098d8 <prvInsertTimerInActiveList>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d020      	beq.n	8009776 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009734:	2300      	movs	r3, #0
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7ff ff88 	bl	8009654 <xTimerGenericCommand>
 8009744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d114      	bne.n	8009776 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60fb      	str	r3, [r7, #12]
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	e7fd      	b.n	8009760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	6978      	ldr	r0, [r7, #20]
 800977c:	4798      	blx	r3
}
 800977e:	bf00      	nop
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20006194 	.word	0x20006194

0800978c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009794:	f107 0308 	add.w	r3, r7, #8
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f859 	bl	8009850 <prvGetNextExpireTime>
 800979e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4619      	mov	r1, r3
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f805 	bl	80097b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097aa:	f000 f8d7 	bl	800995c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ae:	bf00      	nop
 80097b0:	e7f0      	b.n	8009794 <prvTimerTask+0x8>
	...

080097b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097be:	f7ff fa29 	bl	8008c14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f866 	bl	8009898 <prvSampleTimeNow>
 80097cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d130      	bne.n	8009836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d806      	bhi.n	80097f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097e2:	f7ff fa25 	bl	8008c30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff ff81 	bl	80096f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ee:	e024      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097f6:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <prvProcessTimerOrBlockTask+0x90>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <prvProcessTimerOrBlockTask+0x50>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <prvProcessTimerOrBlockTask+0x52>
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009808:	4b0f      	ldr	r3, [pc, #60]	@ (8009848 <prvProcessTimerOrBlockTask+0x94>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4619      	mov	r1, r3
 8009816:	f7fe ff65 	bl	80086e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800981a:	f7ff fa09 	bl	8008c30 <xTaskResumeAll>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009824:	4b09      	ldr	r3, [pc, #36]	@ (800984c <prvProcessTimerOrBlockTask+0x98>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
}
 8009834:	e001      	b.n	800983a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009836:	f7ff f9fb 	bl	8008c30 <xTaskResumeAll>
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20006198 	.word	0x20006198
 8009848:	2000619c 	.word	0x2000619c
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <prvGetNextExpireTime+0x44>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <prvGetNextExpireTime+0x16>
 8009862:	2201      	movs	r2, #1
 8009864:	e000      	b.n	8009868 <prvGetNextExpireTime+0x18>
 8009866:	2200      	movs	r2, #0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009874:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <prvGetNextExpireTime+0x44>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e001      	b.n	8009884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20006194 	.word	0x20006194

08009898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098a0:	f7ff fa64 	bl	8008d6c <xTaskGetTickCount>
 80098a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098a6:	4b0b      	ldr	r3, [pc, #44]	@ (80098d4 <prvSampleTimeNow+0x3c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d205      	bcs.n	80098bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098b0:	f000 f93a 	bl	8009b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098c2:	4a04      	ldr	r2, [pc, #16]	@ (80098d4 <prvSampleTimeNow+0x3c>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200061a4 	.word	0x200061a4

080098d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d812      	bhi.n	8009924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	1ad2      	subs	r2, r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	429a      	cmp	r2, r3
 800990a:	d302      	bcc.n	8009912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e01b      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009912:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <prvInsertTimerInActiveList+0x7c>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3304      	adds	r3, #4
 800991a:	4619      	mov	r1, r3
 800991c:	4610      	mov	r0, r2
 800991e:	f7fe f9b8 	bl	8007c92 <vListInsert>
 8009922:	e012      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d206      	bcs.n	800993a <prvInsertTimerInActiveList+0x62>
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d302      	bcc.n	800993a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e007      	b.n	800994a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800993a:	4b07      	ldr	r3, [pc, #28]	@ (8009958 <prvInsertTimerInActiveList+0x80>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3304      	adds	r3, #4
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7fe f9a4 	bl	8007c92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20006198 	.word	0x20006198
 8009958:	20006194 	.word	0x20006194

0800995c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	@ 0x38
 8009960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009962:	e0ce      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	da19      	bge.n	800999e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	3304      	adds	r3, #4
 800996e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	61fb      	str	r3, [r7, #28]
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	e7fd      	b.n	800998a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009994:	6850      	ldr	r0, [r2, #4]
 8009996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009998:	6892      	ldr	r2, [r2, #8]
 800999a:	4611      	mov	r1, r2
 800999c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f2c0 80ae 	blt.w	8009b02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	3304      	adds	r3, #4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe f9a4 	bl	8007d04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099bc:	463b      	mov	r3, r7
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff ff6a 	bl	8009898 <prvSampleTimeNow>
 80099c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b09      	cmp	r3, #9
 80099ca:	f200 8097 	bhi.w	8009afc <prvProcessReceivedCommands+0x1a0>
 80099ce:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <prvProcessReceivedCommands+0x78>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	080099fd 	.word	0x080099fd
 80099dc:	080099fd 	.word	0x080099fd
 80099e0:	08009a73 	.word	0x08009a73
 80099e4:	08009a87 	.word	0x08009a87
 80099e8:	08009ad3 	.word	0x08009ad3
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	080099fd 	.word	0x080099fd
 80099f4:	08009a73 	.word	0x08009a73
 80099f8:	08009a87 	.word	0x08009a87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	18d1      	adds	r1, r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a1c:	f7ff ff5c 	bl	80098d8 <prvInsertTimerInActiveList>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d06c      	beq.n	8009b00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d061      	beq.n	8009b00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	441a      	add	r2, r3
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a4e:	f7ff fe01 	bl	8009654 <xTimerGenericCommand>
 8009a52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d152      	bne.n	8009b00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	61bb      	str	r3, [r7, #24]
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	e7fd      	b.n	8009a6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a78:	f023 0301 	bic.w	r3, r3, #1
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a84:	e03d      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a8c:	f043 0301 	orr.w	r3, r3, #1
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	617b      	str	r3, [r7, #20]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	18d1      	adds	r1, r2, r3
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009acc:	f7ff ff04 	bl	80098d8 <prvInsertTimerInActiveList>
					break;
 8009ad0:	e017      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d103      	bne.n	8009ae8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ae2:	f000 fbe9 	bl	800a2b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ae6:	e00c      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009afa:	e002      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <prvProcessReceivedCommands+0x1a6>
					break;
 8009b00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b02:	4b08      	ldr	r3, [pc, #32]	@ (8009b24 <prvProcessReceivedCommands+0x1c8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	1d39      	adds	r1, r7, #4
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fbce 	bl	80082ac <xQueueReceive>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f47f af26 	bne.w	8009964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	3730      	adds	r7, #48	@ 0x30
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	2000619c 	.word	0x2000619c

08009b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b2e:	e049      	b.n	8009bc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b30:	4b2e      	ldr	r3, [pc, #184]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe f8db 	bl	8007d04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02f      	beq.n	8009bc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d90e      	bls.n	8009b94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b82:	4b1a      	ldr	r3, [pc, #104]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7fe f880 	bl	8007c92 <vListInsert>
 8009b92:	e017      	b.n	8009bc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b94:	2300      	movs	r3, #0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff fd58 	bl	8009654 <xTimerGenericCommand>
 8009ba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10b      	bne.n	8009bc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	603b      	str	r3, [r7, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	e7fd      	b.n	8009bc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bc4:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1b0      	bne.n	8009b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bce:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bd4:	4b06      	ldr	r3, [pc, #24]	@ (8009bf0 <prvSwitchTimerLists+0xc8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a04      	ldr	r2, [pc, #16]	@ (8009bec <prvSwitchTimerLists+0xc4>)
 8009bda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bdc:	4a04      	ldr	r2, [pc, #16]	@ (8009bf0 <prvSwitchTimerLists+0xc8>)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	6013      	str	r3, [r2, #0]
}
 8009be2:	bf00      	nop
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20006194 	.word	0x20006194
 8009bf0:	20006198 	.word	0x20006198

08009bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bfa:	f000 f96d 	bl	8009ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bfe:	4b15      	ldr	r3, [pc, #84]	@ (8009c54 <prvCheckForValidListAndQueue+0x60>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d120      	bne.n	8009c48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c06:	4814      	ldr	r0, [pc, #80]	@ (8009c58 <prvCheckForValidListAndQueue+0x64>)
 8009c08:	f7fd fff2 	bl	8007bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c0c:	4813      	ldr	r0, [pc, #76]	@ (8009c5c <prvCheckForValidListAndQueue+0x68>)
 8009c0e:	f7fd ffef 	bl	8007bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c12:	4b13      	ldr	r3, [pc, #76]	@ (8009c60 <prvCheckForValidListAndQueue+0x6c>)
 8009c14:	4a10      	ldr	r2, [pc, #64]	@ (8009c58 <prvCheckForValidListAndQueue+0x64>)
 8009c16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c18:	4b12      	ldr	r3, [pc, #72]	@ (8009c64 <prvCheckForValidListAndQueue+0x70>)
 8009c1a:	4a10      	ldr	r2, [pc, #64]	@ (8009c5c <prvCheckForValidListAndQueue+0x68>)
 8009c1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	4b11      	ldr	r3, [pc, #68]	@ (8009c68 <prvCheckForValidListAndQueue+0x74>)
 8009c24:	4a11      	ldr	r2, [pc, #68]	@ (8009c6c <prvCheckForValidListAndQueue+0x78>)
 8009c26:	2110      	movs	r1, #16
 8009c28:	200a      	movs	r0, #10
 8009c2a:	f7fe f8ff 	bl	8007e2c <xQueueGenericCreateStatic>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4a08      	ldr	r2, [pc, #32]	@ (8009c54 <prvCheckForValidListAndQueue+0x60>)
 8009c32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c34:	4b07      	ldr	r3, [pc, #28]	@ (8009c54 <prvCheckForValidListAndQueue+0x60>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <prvCheckForValidListAndQueue+0x60>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	490b      	ldr	r1, [pc, #44]	@ (8009c70 <prvCheckForValidListAndQueue+0x7c>)
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fd24 	bl	8008690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c48:	f000 f978 	bl	8009f3c <vPortExitCritical>
}
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	2000619c 	.word	0x2000619c
 8009c58:	2000616c 	.word	0x2000616c
 8009c5c:	20006180 	.word	0x20006180
 8009c60:	20006194 	.word	0x20006194
 8009c64:	20006198 	.word	0x20006198
 8009c68:	20006248 	.word	0x20006248
 8009c6c:	200061a8 	.word	0x200061a8
 8009c70:	080100d4 	.word	0x080100d4

08009c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3b04      	subs	r3, #4
 8009c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8009cd8 <pxPortInitialiseStack+0x64>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3b14      	subs	r3, #20
 8009cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3b04      	subs	r3, #4
 8009cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f06f 0202 	mvn.w	r2, #2
 8009cc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3b20      	subs	r3, #32
 8009cc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cca:	68fb      	ldr	r3, [r7, #12]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	08009cdd 	.word	0x08009cdd

08009cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ce6:	4b13      	ldr	r3, [pc, #76]	@ (8009d34 <prvTaskExitError+0x58>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d00b      	beq.n	8009d08 <prvTaskExitError+0x2c>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	60fb      	str	r3, [r7, #12]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <prvTaskExitError+0x28>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	60bb      	str	r3, [r7, #8]
}
 8009d1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d1c:	bf00      	nop
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0fc      	beq.n	8009d1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	2000003c 	.word	0x2000003c
	...

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	@ (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	20005c6c 	.word	0x20005c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d96:	4b47      	ldr	r3, [pc, #284]	@ (8009eb4 <xPortStartScheduler+0x124>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a47      	ldr	r2, [pc, #284]	@ (8009eb8 <xPortStartScheduler+0x128>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10b      	bne.n	8009db8 <xPortStartScheduler+0x28>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009db8:	4b3e      	ldr	r3, [pc, #248]	@ (8009eb4 <xPortStartScheduler+0x124>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ebc <xPortStartScheduler+0x12c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d10b      	bne.n	8009dda <xPortStartScheduler+0x4a>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60fb      	str	r3, [r7, #12]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dda:	4b39      	ldr	r3, [pc, #228]	@ (8009ec0 <xPortStartScheduler+0x130>)
 8009ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	22ff      	movs	r2, #255	@ 0xff
 8009dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	4b31      	ldr	r3, [pc, #196]	@ (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e02:	4b31      	ldr	r3, [pc, #196]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e04:	2207      	movs	r2, #7
 8009e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e08:	e009      	b.n	8009e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4a2d      	ldr	r2, [pc, #180]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e26:	2b80      	cmp	r3, #128	@ 0x80
 8009e28:	d0ef      	beq.n	8009e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1c3 0307 	rsb	r3, r3, #7
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d00b      	beq.n	8009e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60bb      	str	r3, [r7, #8]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e60:	4a19      	ldr	r2, [pc, #100]	@ (8009ec8 <xPortStartScheduler+0x138>)
 8009e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a16      	ldr	r2, [pc, #88]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e78:	4b14      	ldr	r3, [pc, #80]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a13      	ldr	r2, [pc, #76]	@ (8009ecc <xPortStartScheduler+0x13c>)
 8009e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e84:	f000 f8da 	bl	800a03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e88:	4b11      	ldr	r3, [pc, #68]	@ (8009ed0 <xPortStartScheduler+0x140>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e8e:	f000 f8f9 	bl	800a084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e92:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <xPortStartScheduler+0x144>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a0f      	ldr	r2, [pc, #60]	@ (8009ed4 <xPortStartScheduler+0x144>)
 8009e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e9e:	f7ff ff63 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ea2:	f7ff f82d 	bl	8008f00 <vTaskSwitchContext>
	prvTaskExitError();
 8009ea6:	f7ff ff19 	bl	8009cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	e000ed00 	.word	0xe000ed00
 8009eb8:	410fc271 	.word	0x410fc271
 8009ebc:	410fc270 	.word	0x410fc270
 8009ec0:	e000e400 	.word	0xe000e400
 8009ec4:	20006298 	.word	0x20006298
 8009ec8:	2000629c 	.word	0x2000629c
 8009ecc:	e000ed20 	.word	0xe000ed20
 8009ed0:	2000003c 	.word	0x2000003c
 8009ed4:	e000ef34 	.word	0xe000ef34

08009ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	607b      	str	r3, [r7, #4]
}
 8009ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ef2:	4b10      	ldr	r3, [pc, #64]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009efc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <vPortEnterCritical+0x5c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d110      	bne.n	8009f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <vPortEnterCritical+0x60>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	603b      	str	r3, [r7, #0]
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <vPortEnterCritical+0x4a>
	}
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000003c 	.word	0x2000003c
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f42:	4b12      	ldr	r3, [pc, #72]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10b      	bne.n	8009f62 <vPortExitCritical+0x26>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	607b      	str	r3, [r7, #4]
}
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	e7fd      	b.n	8009f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f62:	4b0a      	ldr	r3, [pc, #40]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	4a08      	ldr	r2, [pc, #32]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f6c:	4b07      	ldr	r3, [pc, #28]	@ (8009f8c <vPortExitCritical+0x50>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <vPortExitCritical+0x44>
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	2000003c 	.word	0x2000003c

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	@ (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7fe ff9e 	bl	8008f00 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	20005c6c 	.word	0x20005c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a012:	f7fe febb 	bl	8008d8c <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	@ (800a038 <xPortSysTickHandler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b0b      	ldr	r3, [pc, #44]	@ (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b0b      	ldr	r3, [pc, #44]	@ (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	@ (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	@ (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05e:	4b04      	ldr	r3, [pc, #16]	@ (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	20000030 	.word	0x20000030
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	d915      	bls.n	800a0d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0aa:	4a18      	ldr	r2, [pc, #96]	@ (800a10c <vPortValidateInterruptPriority+0x74>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0b4:	4b16      	ldr	r3, [pc, #88]	@ (800a110 <vPortValidateInterruptPriority+0x78>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20b      	bcs.n	800a0d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	e7fd      	b.n	800a0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a114 <vPortValidateInterruptPriority+0x7c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <vPortValidateInterruptPriority+0x80>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d90b      	bls.n	800a0fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	603b      	str	r3, [r7, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vPortValidateInterruptPriority+0x62>
	}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	e000e3f0 	.word	0xe000e3f0
 800a110:	20006298 	.word	0x20006298
 800a114:	e000ed0c 	.word	0xe000ed0c
 800a118:	2000629c 	.word	0x2000629c

0800a11c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	@ 0x28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a128:	f7fe fd74 	bl	8008c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a12c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2a0 <pvPortMalloc+0x184>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a134:	f000 f924 	bl	800a380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a138:	4b5a      	ldr	r3, [pc, #360]	@ (800a2a4 <pvPortMalloc+0x188>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4013      	ands	r3, r2
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 8095 	bne.w	800a270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01e      	beq.n	800a18a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a14c:	2208      	movs	r2, #8
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d015      	beq.n	800a18a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f023 0307 	bic.w	r3, r3, #7
 800a164:	3308      	adds	r3, #8
 800a166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <pvPortMalloc+0x6e>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	617b      	str	r3, [r7, #20]
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06f      	beq.n	800a270 <pvPortMalloc+0x154>
 800a190:	4b45      	ldr	r3, [pc, #276]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	429a      	cmp	r2, r3
 800a198:	d86a      	bhi.n	800a270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a19a:	4b44      	ldr	r3, [pc, #272]	@ (800a2ac <pvPortMalloc+0x190>)
 800a19c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a19e:	4b43      	ldr	r3, [pc, #268]	@ (800a2ac <pvPortMalloc+0x190>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1a4:	e004      	b.n	800a1b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d903      	bls.n	800a1c2 <pvPortMalloc+0xa6>
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f1      	bne.n	800a1a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1c2:	4b37      	ldr	r3, [pc, #220]	@ (800a2a0 <pvPortMalloc+0x184>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d051      	beq.n	800a270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	4413      	add	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d920      	bls.n	800a230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <pvPortMalloc+0xfc>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a22a:	69b8      	ldr	r0, [r7, #24]
 800a22c:	f000 f90a 	bl	800a444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a230:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a23c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a23e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <pvPortMalloc+0x194>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d203      	bcs.n	800a252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a24a:	4b17      	ldr	r3, [pc, #92]	@ (800a2a8 <pvPortMalloc+0x18c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a18      	ldr	r2, [pc, #96]	@ (800a2b0 <pvPortMalloc+0x194>)
 800a250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	4b13      	ldr	r3, [pc, #76]	@ (800a2a4 <pvPortMalloc+0x188>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a266:	4b13      	ldr	r3, [pc, #76]	@ (800a2b4 <pvPortMalloc+0x198>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	4a11      	ldr	r2, [pc, #68]	@ (800a2b4 <pvPortMalloc+0x198>)
 800a26e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a270:	f7fe fcde 	bl	8008c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <pvPortMalloc+0x17a>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	e7fd      	b.n	800a292 <pvPortMalloc+0x176>
	return pvReturn;
 800a296:	69fb      	ldr	r3, [r7, #28]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3728      	adds	r7, #40	@ 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20009ea8 	.word	0x20009ea8
 800a2a4:	20009ebc 	.word	0x20009ebc
 800a2a8:	20009eac 	.word	0x20009eac
 800a2ac:	20009ea0 	.word	0x20009ea0
 800a2b0:	20009eb0 	.word	0x20009eb0
 800a2b4:	20009eb4 	.word	0x20009eb4

0800a2b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04f      	beq.n	800a36a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4b25      	ldr	r3, [pc, #148]	@ (800a374 <vPortFree+0xbc>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <vPortFree+0x46>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	60fb      	str	r3, [r7, #12]
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	e7fd      	b.n	800a2fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <vPortFree+0x66>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60bb      	str	r3, [r7, #8]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <vPortFree+0xbc>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4013      	ands	r3, r2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01e      	beq.n	800a36a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d11a      	bne.n	800a36a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	4b0e      	ldr	r3, [pc, #56]	@ (800a374 <vPortFree+0xbc>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	43db      	mvns	r3, r3
 800a33e:	401a      	ands	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a344:	f7fe fc66 	bl	8008c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	4b0a      	ldr	r3, [pc, #40]	@ (800a378 <vPortFree+0xc0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4413      	add	r3, r2
 800a352:	4a09      	ldr	r2, [pc, #36]	@ (800a378 <vPortFree+0xc0>)
 800a354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f000 f874 	bl	800a444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a35c:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <vPortFree+0xc4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a06      	ldr	r2, [pc, #24]	@ (800a37c <vPortFree+0xc4>)
 800a364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a366:	f7fe fc63 	bl	8008c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a36a:	bf00      	nop
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20009ebc 	.word	0x20009ebc
 800a378:	20009eac 	.word	0x20009eac
 800a37c:	20009eb8 	.word	0x20009eb8

0800a380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a386:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a38a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a38c:	4b27      	ldr	r3, [pc, #156]	@ (800a42c <prvHeapInit+0xac>)
 800a38e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00c      	beq.n	800a3b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3307      	adds	r3, #7
 800a39e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a42c <prvHeapInit+0xac>)
 800a3b0:	4413      	add	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a430 <prvHeapInit+0xb0>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3be:	4b1c      	ldr	r3, [pc, #112]	@ (800a430 <prvHeapInit+0xb0>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0307 	bic.w	r3, r3, #7
 800a3da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4a15      	ldr	r2, [pc, #84]	@ (800a434 <prvHeapInit+0xb4>)
 800a3e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <prvHeapInit+0xb4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ea:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <prvHeapInit+0xb4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	1ad2      	subs	r2, r2, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a400:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <prvHeapInit+0xb4>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	4a0a      	ldr	r2, [pc, #40]	@ (800a438 <prvHeapInit+0xb8>)
 800a40e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	4a09      	ldr	r2, [pc, #36]	@ (800a43c <prvHeapInit+0xbc>)
 800a416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a418:	4b09      	ldr	r3, [pc, #36]	@ (800a440 <prvHeapInit+0xc0>)
 800a41a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	bf00      	nop
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	200062a0 	.word	0x200062a0
 800a430:	20009ea0 	.word	0x20009ea0
 800a434:	20009ea8 	.word	0x20009ea8
 800a438:	20009eb0 	.word	0x20009eb0
 800a43c:	20009eac 	.word	0x20009eac
 800a440:	20009ebc 	.word	0x20009ebc

0800a444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <prvInsertBlockIntoFreeList+0xac>)
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e002      	b.n	800a458 <prvInsertBlockIntoFreeList+0x14>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d8f7      	bhi.n	800a452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	4413      	add	r3, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d108      	bne.n	800a486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	441a      	add	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	441a      	add	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d118      	bne.n	800a4cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d00d      	beq.n	800a4c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	441a      	add	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e008      	b.n	800a4d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	e003      	b.n	800a4d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d002      	beq.n	800a4e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20009ea0 	.word	0x20009ea0
 800a4f4:	20009ea8 	.word	0x20009ea8

0800a4f8 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800a500:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f002 f9df 	bl	800c8ca <memset>
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800a522:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 f8ec 	bl	800b704 <mbedtls_platform_zeroize>
 800a52c:	e000      	b.n	800a530 <mbedtls_aes_free+0x1c>
        return;
 800a52e:	bf00      	nop
}
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a54a:	d012      	beq.n	800a572 <mbedtls_aes_setkey_enc+0x3a>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a552:	d812      	bhi.n	800a57a <mbedtls_aes_setkey_enc+0x42>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b80      	cmp	r3, #128	@ 0x80
 800a558:	d003      	beq.n	800a562 <mbedtls_aes_setkey_enc+0x2a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a55e:	d004      	beq.n	800a56a <mbedtls_aes_setkey_enc+0x32>
 800a560:	e00b      	b.n	800a57a <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	220a      	movs	r2, #10
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e00a      	b.n	800a580 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	220c      	movs	r2, #12
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e006      	b.n	800a580 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	220e      	movs	r2, #14
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e002      	b.n	800a580 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 800a57a:	f06f 031f 	mvn.w	r3, #31
 800a57e:	e1a7      	b.n	800a8d0 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3308      	adds	r3, #8
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800a58c:	2300      	movs	r3, #0
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e027      	b.n	800a5e2 <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	4413      	add	r3, r2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	ea41 0203 	orr.w	r2, r1, r3
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	440b      	add	r3, r1
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	041b      	lsls	r3, r3, #16
 800a5be:	ea42 0103 	orr.w	r1, r2, r3
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	3303      	adds	r3, #3
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	061a      	lsls	r2, r3, #24
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	6938      	ldr	r0, [r7, #16]
 800a5d6:	4403      	add	r3, r0
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	095b      	lsrs	r3, r3, #5
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d3d2      	bcc.n	800a592 <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b0e      	cmp	r3, #14
 800a5f2:	f000 80ca 	beq.w	800a78a <mbedtls_aes_setkey_enc+0x252>
 800a5f6:	2b0e      	cmp	r3, #14
 800a5f8:	f300 8169 	bgt.w	800a8ce <mbedtls_aes_setkey_enc+0x396>
 800a5fc:	2b0a      	cmp	r3, #10
 800a5fe:	d002      	beq.n	800a606 <mbedtls_aes_setkey_enc+0xce>
 800a600:	2b0c      	cmp	r3, #12
 800a602:	d057      	beq.n	800a6b4 <mbedtls_aes_setkey_enc+0x17c>
 800a604:	e163      	b.n	800a8ce <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	e04f      	b.n	800a6ac <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	495f      	ldr	r1, [pc, #380]	@ (800a790 <mbedtls_aes_setkey_enc+0x258>)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a618:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	320c      	adds	r2, #12
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	0a12      	lsrs	r2, r2, #8
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	495b      	ldr	r1, [pc, #364]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a626:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 800a628:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	330c      	adds	r3, #12
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	0c1b      	lsrs	r3, r3, #16
 800a632:	b2db      	uxtb	r3, r3
 800a634:	4957      	ldr	r1, [pc, #348]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a636:	5ccb      	ldrb	r3, [r1, r3]
 800a638:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800a63a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	330c      	adds	r3, #12
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	0e1b      	lsrs	r3, r3, #24
 800a644:	4953      	ldr	r1, [pc, #332]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a646:	5ccb      	ldrb	r3, [r1, r3]
 800a648:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800a64a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	330c      	adds	r3, #12
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	4a4f      	ldr	r2, [pc, #316]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a658:	5cd3      	ldrb	r3, [r2, r3]
 800a65a:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a660:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 800a662:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	3304      	adds	r3, #4
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	3310      	adds	r3, #16
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	3314      	adds	r3, #20
 800a674:	404a      	eors	r2, r1
 800a676:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	3308      	adds	r3, #8
 800a67c:	6819      	ldr	r1, [r3, #0]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3314      	adds	r3, #20
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	3318      	adds	r3, #24
 800a688:	404a      	eors	r2, r1
 800a68a:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	330c      	adds	r3, #12
 800a690:	6819      	ldr	r1, [r3, #0]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	3318      	adds	r3, #24
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	331c      	adds	r3, #28
 800a69c:	404a      	eors	r2, r1
 800a69e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	3310      	adds	r3, #16
 800a6aa:	613b      	str	r3, [r7, #16]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b09      	cmp	r3, #9
 800a6b0:	d9ac      	bls.n	800a60c <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 800a6b2:	e10c      	b.n	800a8ce <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	e063      	b.n	800a782 <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4934      	ldr	r1, [pc, #208]	@ (800a790 <mbedtls_aes_setkey_enc+0x258>)
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a6c6:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	3214      	adds	r2, #20
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	0a12      	lsrs	r2, r2, #8
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	4930      	ldr	r1, [pc, #192]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a6d4:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 800a6d6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3314      	adds	r3, #20
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	0c1b      	lsrs	r3, r3, #16
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	492c      	ldr	r1, [pc, #176]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a6e4:	5ccb      	ldrb	r3, [r1, r3]
 800a6e6:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800a6e8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3314      	adds	r3, #20
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	0e1b      	lsrs	r3, r3, #24
 800a6f2:	4928      	ldr	r1, [pc, #160]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a6f4:	5ccb      	ldrb	r3, [r1, r3]
 800a6f6:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800a6f8:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3314      	adds	r3, #20
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4a23      	ldr	r2, [pc, #140]	@ (800a794 <mbedtls_aes_setkey_enc+0x25c>)
 800a706:	5cd3      	ldrb	r3, [r2, r3]
 800a708:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a70e:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800a710:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	3304      	adds	r3, #4
 800a716:	6819      	ldr	r1, [r3, #0]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	3318      	adds	r3, #24
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	331c      	adds	r3, #28
 800a722:	404a      	eors	r2, r1
 800a724:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3308      	adds	r3, #8
 800a72a:	6819      	ldr	r1, [r3, #0]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	331c      	adds	r3, #28
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	3320      	adds	r3, #32
 800a736:	404a      	eors	r2, r1
 800a738:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	330c      	adds	r3, #12
 800a73e:	6819      	ldr	r1, [r3, #0]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3320      	adds	r3, #32
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	3324      	adds	r3, #36	@ 0x24
 800a74a:	404a      	eors	r2, r1
 800a74c:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3310      	adds	r3, #16
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	3324      	adds	r3, #36	@ 0x24
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	3328      	adds	r3, #40	@ 0x28
 800a75e:	404a      	eors	r2, r1
 800a760:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	3314      	adds	r3, #20
 800a766:	6819      	ldr	r1, [r3, #0]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	3328      	adds	r3, #40	@ 0x28
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	332c      	adds	r3, #44	@ 0x2c
 800a772:	404a      	eors	r2, r1
 800a774:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	3301      	adds	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3318      	adds	r3, #24
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b07      	cmp	r3, #7
 800a786:	d998      	bls.n	800a6ba <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 800a788:	e0a1      	b.n	800a8ce <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	e099      	b.n	800a8c4 <mbedtls_aes_setkey_enc+0x38c>
 800a790:	08012408 	.word	0x08012408
 800a794:	08010208 	.word	0x08010208
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	494f      	ldr	r1, [pc, #316]	@ (800a8dc <mbedtls_aes_setkey_enc+0x3a4>)
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a7a4:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	321c      	adds	r2, #28
 800a7aa:	6812      	ldr	r2, [r2, #0]
 800a7ac:	0a12      	lsrs	r2, r2, #8
 800a7ae:	b2d2      	uxtb	r2, r2
 800a7b0:	494b      	ldr	r1, [pc, #300]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a7b2:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 800a7b4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	331c      	adds	r3, #28
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	0c1b      	lsrs	r3, r3, #16
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	4947      	ldr	r1, [pc, #284]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a7c2:	5ccb      	ldrb	r3, [r1, r3]
 800a7c4:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800a7c6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	331c      	adds	r3, #28
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	0e1b      	lsrs	r3, r3, #24
 800a7d0:	4943      	ldr	r1, [pc, #268]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a7d2:	5ccb      	ldrb	r3, [r1, r3]
 800a7d4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800a7d6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	331c      	adds	r3, #28
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a7e4:	5cd3      	ldrb	r3, [r2, r3]
 800a7e6:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a7ec:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800a7ee:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	6819      	ldr	r1, [r3, #0]
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	3320      	adds	r3, #32
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	3324      	adds	r3, #36	@ 0x24
 800a800:	404a      	eors	r2, r1
 800a802:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3308      	adds	r3, #8
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3324      	adds	r3, #36	@ 0x24
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3328      	adds	r3, #40	@ 0x28
 800a814:	404a      	eors	r2, r1
 800a816:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	330c      	adds	r3, #12
 800a81c:	6819      	ldr	r1, [r3, #0]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3328      	adds	r3, #40	@ 0x28
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	332c      	adds	r3, #44	@ 0x2c
 800a828:	404a      	eors	r2, r1
 800a82a:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3310      	adds	r3, #16
 800a830:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	322c      	adds	r2, #44	@ 0x2c
 800a836:	6812      	ldr	r2, [r2, #0]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	4929      	ldr	r1, [pc, #164]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a83c:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800a83e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	332c      	adds	r3, #44	@ 0x2c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	0a1b      	lsrs	r3, r3, #8
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	4925      	ldr	r1, [pc, #148]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a84c:	5ccb      	ldrb	r3, [r1, r3]
 800a84e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800a850:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	332c      	adds	r3, #44	@ 0x2c
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	0c1b      	lsrs	r3, r3, #16
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	4920      	ldr	r1, [pc, #128]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a85e:	5ccb      	ldrb	r3, [r1, r3]
 800a860:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800a862:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	332c      	adds	r3, #44	@ 0x2c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	0e1b      	lsrs	r3, r3, #24
 800a86e:	4a1c      	ldr	r2, [pc, #112]	@ (800a8e0 <mbedtls_aes_setkey_enc+0x3a8>)
 800a870:	5cd3      	ldrb	r3, [r2, r3]
 800a872:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a878:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 800a87a:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	3314      	adds	r3, #20
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	3330      	adds	r3, #48	@ 0x30
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3334      	adds	r3, #52	@ 0x34
 800a88c:	404a      	eors	r2, r1
 800a88e:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	3318      	adds	r3, #24
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	3334      	adds	r3, #52	@ 0x34
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	3338      	adds	r3, #56	@ 0x38
 800a8a0:	404a      	eors	r2, r1
 800a8a2:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	331c      	adds	r3, #28
 800a8a8:	6819      	ldr	r1, [r3, #0]
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3338      	adds	r3, #56	@ 0x38
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	333c      	adds	r3, #60	@ 0x3c
 800a8b4:	404a      	eors	r2, r1
 800a8b6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3320      	adds	r3, #32
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	f67f af66 	bls.w	800a798 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 800a8cc:	bf00      	nop
    }

    return( 0 );
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	371c      	adds	r7, #28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	08012408 	.word	0x08012408
 800a8e0:	08010208 	.word	0x08010208

0800a8e4 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b0d0      	sub	sp, #320	@ 0x140
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a8ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a8f2:	6018      	str	r0, [r3, #0]
 800a8f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a8f8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a8fc:	6019      	str	r1, [r3, #0]
 800a8fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a902:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a906:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fdf3 	bl	800a4f8 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800a912:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a916:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3308      	adds	r3, #8
 800a91e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800a922:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a926:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a930:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800a932:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a936:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800a93a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a93e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a942:	f107 0014 	add.w	r0, r7, #20
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	6819      	ldr	r1, [r3, #0]
 800a94a:	f7ff fdf5 	bl	800a538 <mbedtls_aes_setkey_enc>
 800a94e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800a952:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 80dd 	bne.w	800ab16 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 800a95c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a960:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a96a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800a972:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a976:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a980:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	011b      	lsls	r3, r3, #4
 800a988:	4413      	add	r3, r2
 800a98a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 800a98e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a992:	1d13      	adds	r3, r2, #4
 800a994:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a998:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a99c:	1d19      	adds	r1, r3, #4
 800a99e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a9a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a9aa:	1d13      	adds	r3, r2, #4
 800a9ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a9b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a9b4:	1d19      	adds	r1, r3, #4
 800a9b6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800a9ba:	6812      	ldr	r2, [r2, #0]
 800a9bc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a9be:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a9c2:	1d13      	adds	r3, r2, #4
 800a9c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a9c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a9d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a9da:	1d13      	adds	r3, r2, #4
 800a9dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a9e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a9e4:	1d19      	adds	r1, r3, #4
 800a9e6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800a9ea:	6812      	ldr	r2, [r2, #0]
 800a9ec:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800a9ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a9f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800aa00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa04:	3b20      	subs	r3, #32
 800aa06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aa0a:	e04f      	b.n	800aaac <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800aa12:	e03d      	b.n	800aa90 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800aa14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	4a44      	ldr	r2, [pc, #272]	@ (800ab30 <mbedtls_aes_setkey_dec+0x24c>)
 800aa1e:	5cd3      	ldrb	r3, [r2, r3]
 800aa20:	461a      	mov	r2, r3
 800aa22:	4b44      	ldr	r3, [pc, #272]	@ (800ab34 <mbedtls_aes_setkey_dec+0x250>)
 800aa24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800aa28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	0a1b      	lsrs	r3, r3, #8
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	493f      	ldr	r1, [pc, #252]	@ (800ab30 <mbedtls_aes_setkey_dec+0x24c>)
 800aa34:	5ccb      	ldrb	r3, [r1, r3]
 800aa36:	4619      	mov	r1, r3
 800aa38:	4b3f      	ldr	r3, [pc, #252]	@ (800ab38 <mbedtls_aes_setkey_dec+0x254>)
 800aa3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800aa3e:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800aa40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	4939      	ldr	r1, [pc, #228]	@ (800ab30 <mbedtls_aes_setkey_dec+0x24c>)
 800aa4c:	5ccb      	ldrb	r3, [r1, r3]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4b3a      	ldr	r3, [pc, #232]	@ (800ab3c <mbedtls_aes_setkey_dec+0x258>)
 800aa52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800aa56:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800aa5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	0e1b      	lsrs	r3, r3, #24
 800aa62:	4a33      	ldr	r2, [pc, #204]	@ (800ab30 <mbedtls_aes_setkey_dec+0x24c>)
 800aa64:	5cd3      	ldrb	r3, [r2, r3]
 800aa66:	461a      	mov	r2, r3
 800aa68:	4b35      	ldr	r3, [pc, #212]	@ (800ab40 <mbedtls_aes_setkey_dec+0x25c>)
 800aa6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800aa6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800aa72:	1d18      	adds	r0, r3, #4
 800aa74:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800aa78:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800aa7a:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 800aa7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800aa80:	3301      	adds	r3, #1
 800aa82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800aa86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aa90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	ddbd      	ble.n	800aa14 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800aa98:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800aaa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aaa6:	3b20      	subs	r3, #32
 800aaa8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aaac:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dcab      	bgt.n	800aa0c <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 800aab4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800aab8:	1d13      	adds	r3, r2, #4
 800aaba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aabe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800aac2:	1d19      	adds	r1, r3, #4
 800aac4:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800aac8:	6812      	ldr	r2, [r2, #0]
 800aaca:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800aacc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800aad0:	1d13      	adds	r3, r2, #4
 800aad2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800aada:	1d19      	adds	r1, r3, #4
 800aadc:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800aae4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800aae8:	1d13      	adds	r3, r2, #4
 800aaea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800aaee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800aaf2:	1d19      	adds	r1, r3, #4
 800aaf4:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800aaf8:	6812      	ldr	r2, [r2, #0]
 800aafa:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800aafc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800ab00:	1d13      	adds	r3, r2, #4
 800ab02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800ab06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ab0a:	1d19      	adds	r1, r3, #4
 800ab0c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e000      	b.n	800ab18 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 800ab16:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 800ab18:	f107 0314 	add.w	r3, r7, #20
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff fcf9 	bl	800a514 <mbedtls_aes_free>

    return( ret );
 800ab22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	08010208 	.word	0x08010208
 800ab34:	08011408 	.word	0x08011408
 800ab38:	08011808 	.word	0x08011808
 800ab3c:	08011c08 	.word	0x08011c08
 800ab40:	08012008 	.word	0x08012008

0800ab44 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b08f      	sub	sp, #60	@ 0x3c
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	021b      	lsls	r3, r3, #8
 800ab64:	431a      	orrs	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	3302      	adds	r3, #2
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	3303      	adds	r3, #3
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	061b      	lsls	r3, r3, #24
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab86:	4053      	eors	r3, r2
 800ab88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3305      	adds	r3, #5
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3306      	adds	r3, #6
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	041b      	lsls	r3, r3, #16
 800aba4:	431a      	orrs	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	3307      	adds	r3, #7
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	061b      	lsls	r3, r3, #24
 800abae:	4313      	orrs	r3, r2
 800abb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	1d1a      	adds	r2, r3, #4
 800abb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abbc:	4053      	eors	r3, r2
 800abbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3308      	adds	r3, #8
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	3309      	adds	r3, #9
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	021b      	lsls	r3, r3, #8
 800abd0:	431a      	orrs	r2, r3
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	330a      	adds	r3, #10
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	431a      	orrs	r2, r3
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	330b      	adds	r3, #11
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	061b      	lsls	r3, r3, #24
 800abe4:	4313      	orrs	r3, r2
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	1d1a      	adds	r2, r3, #4
 800abec:	633a      	str	r2, [r7, #48]	@ 0x30
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf2:	4053      	eors	r3, r2
 800abf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	330c      	adds	r3, #12
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	330d      	adds	r3, #13
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	431a      	orrs	r2, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	330e      	adds	r3, #14
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	041b      	lsls	r3, r3, #16
 800ac10:	431a      	orrs	r2, r3
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	330f      	adds	r3, #15
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	061b      	lsls	r3, r3, #24
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	623b      	str	r3, [r7, #32]
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	1d1a      	adds	r2, r3, #4
 800ac22:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a3a      	ldr	r2, [r7, #32]
 800ac28:	4053      	eors	r3, r2
 800ac2a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	105b      	asrs	r3, r3, #1
 800ac32:	3b01      	subs	r3, #1
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac36:	e0fa      	b.n	800ae2e <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	1d1a      	adds	r2, r3, #4
 800ac3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	49ab      	ldr	r1, [pc, #684]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ac46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac4a:	405a      	eors	r2, r3
 800ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4e:	0a1b      	lsrs	r3, r3, #8
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	49a9      	ldr	r1, [pc, #676]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ac54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac58:	405a      	eors	r2, r3
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5c:	0c1b      	lsrs	r3, r3, #16
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	49a6      	ldr	r1, [pc, #664]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ac62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac66:	405a      	eors	r2, r3
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	0e1b      	lsrs	r3, r3, #24
 800ac6c:	49a4      	ldr	r1, [pc, #656]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ac6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac72:	4053      	eors	r3, r2
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	499c      	ldr	r1, [pc, #624]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ac84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac88:	405a      	eors	r2, r3
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	4999      	ldr	r1, [pc, #612]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ac92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac96:	405a      	eors	r2, r3
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	0c1b      	lsrs	r3, r3, #16
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	4997      	ldr	r1, [pc, #604]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800aca0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aca4:	405a      	eors	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca8:	0e1b      	lsrs	r3, r3, #24
 800acaa:	4995      	ldr	r1, [pc, #596]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800acac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800acb0:	4053      	eors	r3, r2
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	498c      	ldr	r1, [pc, #560]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800acc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800acc6:	405a      	eors	r2, r3
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	b2db      	uxtb	r3, r3
 800acce:	498a      	ldr	r1, [pc, #552]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800acd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800acd4:	405a      	eors	r2, r3
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4987      	ldr	r1, [pc, #540]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800acde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ace2:	405a      	eors	r2, r3
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	0e1b      	lsrs	r3, r3, #24
 800ace8:	4985      	ldr	r1, [pc, #532]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800acea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800acee:	4053      	eors	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	1d1a      	adds	r2, r3, #4
 800acf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	497d      	ldr	r1, [pc, #500]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ad00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad04:	405a      	eors	r2, r3
 800ad06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad08:	0a1b      	lsrs	r3, r3, #8
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	497a      	ldr	r1, [pc, #488]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ad0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad12:	405a      	eors	r2, r3
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	0c1b      	lsrs	r3, r3, #16
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	4978      	ldr	r1, [pc, #480]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ad1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad20:	405a      	eors	r2, r3
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	0e1b      	lsrs	r3, r3, #24
 800ad26:	4976      	ldr	r1, [pc, #472]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ad28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad2c:	4053      	eors	r3, r2
 800ad2e:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	1d1a      	adds	r2, r3, #4
 800ad34:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	496d      	ldr	r1, [pc, #436]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ad3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad42:	405a      	eors	r2, r3
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	496b      	ldr	r1, [pc, #428]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ad4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad50:	405a      	eors	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	0c1b      	lsrs	r3, r3, #16
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	4968      	ldr	r1, [pc, #416]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ad5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad5e:	405a      	eors	r2, r3
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	0e1b      	lsrs	r3, r3, #24
 800ad64:	4966      	ldr	r1, [pc, #408]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ad66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad6a:	4053      	eors	r3, r2
 800ad6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	1d1a      	adds	r2, r3, #4
 800ad72:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	495e      	ldr	r1, [pc, #376]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ad7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad80:	405a      	eors	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	495b      	ldr	r1, [pc, #364]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ad8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad8e:	405a      	eors	r2, r3
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	0c1b      	lsrs	r3, r3, #16
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	4959      	ldr	r1, [pc, #356]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ad98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad9c:	405a      	eors	r2, r3
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	0e1b      	lsrs	r3, r3, #24
 800ada2:	4957      	ldr	r1, [pc, #348]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ada4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ada8:	4053      	eors	r3, r2
 800adaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adae:	1d1a      	adds	r2, r3, #4
 800adb0:	633a      	str	r2, [r7, #48]	@ 0x30
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	494e      	ldr	r1, [pc, #312]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800adba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adbe:	405a      	eors	r2, r3
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	494c      	ldr	r1, [pc, #304]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800adc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adcc:	405a      	eors	r2, r3
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	0c1b      	lsrs	r3, r3, #16
 800add2:	b2db      	uxtb	r3, r3
 800add4:	4949      	ldr	r1, [pc, #292]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800add6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adda:	405a      	eors	r2, r3
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	0e1b      	lsrs	r3, r3, #24
 800ade0:	4947      	ldr	r1, [pc, #284]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ade2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ade6:	4053      	eors	r3, r2
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	1d1a      	adds	r2, r3, #4
 800adee:	633a      	str	r2, [r7, #48]	@ 0x30
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	493f      	ldr	r1, [pc, #252]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800adf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800adfc:	405a      	eors	r2, r3
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	493c      	ldr	r1, [pc, #240]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ae06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae0a:	405a      	eors	r2, r3
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	493a      	ldr	r1, [pc, #232]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ae14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae18:	405a      	eors	r2, r3
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	0e1b      	lsrs	r3, r3, #24
 800ae1e:	4938      	ldr	r1, [pc, #224]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ae20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae24:	4053      	eors	r3, r2
 800ae26:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800ae28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f73f af01 	bgt.w	800ac38 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800ae36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	492c      	ldr	r1, [pc, #176]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ae44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae48:	405a      	eors	r2, r3
 800ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	4929      	ldr	r1, [pc, #164]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ae52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae56:	405a      	eors	r2, r3
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	0c1b      	lsrs	r3, r3, #16
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	4927      	ldr	r1, [pc, #156]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ae60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae64:	405a      	eors	r2, r3
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	0e1b      	lsrs	r3, r3, #24
 800ae6a:	4925      	ldr	r1, [pc, #148]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800ae6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae70:	4053      	eors	r3, r2
 800ae72:	61fb      	str	r3, [r7, #28]
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	1d1a      	adds	r2, r3, #4
 800ae78:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	491c      	ldr	r1, [pc, #112]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800ae82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae86:	405a      	eors	r2, r3
 800ae88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	491a      	ldr	r1, [pc, #104]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800ae90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae94:	405a      	eors	r2, r3
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	0c1b      	lsrs	r3, r3, #16
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	4917      	ldr	r1, [pc, #92]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800ae9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aea2:	405a      	eors	r2, r3
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	0e1b      	lsrs	r3, r3, #24
 800aea8:	4915      	ldr	r1, [pc, #84]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800aeaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aeae:	4053      	eors	r3, r2
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	490d      	ldr	r1, [pc, #52]	@ (800aef4 <mbedtls_internal_aes_encrypt+0x3b0>)
 800aec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aec4:	405a      	eors	r2, r3
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	0a1b      	lsrs	r3, r3, #8
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	490a      	ldr	r1, [pc, #40]	@ (800aef8 <mbedtls_internal_aes_encrypt+0x3b4>)
 800aece:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aed2:	405a      	eors	r2, r3
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	0c1b      	lsrs	r3, r3, #16
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	4908      	ldr	r1, [pc, #32]	@ (800aefc <mbedtls_internal_aes_encrypt+0x3b8>)
 800aedc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aee0:	405a      	eors	r2, r3
 800aee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee4:	0e1b      	lsrs	r3, r3, #24
 800aee6:	4906      	ldr	r1, [pc, #24]	@ (800af00 <mbedtls_internal_aes_encrypt+0x3bc>)
 800aee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aeec:	4053      	eors	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	e007      	b.n	800af04 <mbedtls_internal_aes_encrypt+0x3c0>
 800aef4:	08010308 	.word	0x08010308
 800aef8:	08010708 	.word	0x08010708
 800aefc:	08010b08 	.word	0x08010b08
 800af00:	08010f08 	.word	0x08010f08
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	633a      	str	r2, [r7, #48]	@ 0x30
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	4979      	ldr	r1, [pc, #484]	@ (800b0f4 <mbedtls_internal_aes_encrypt+0x5b0>)
 800af10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af14:	405a      	eors	r2, r3
 800af16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af18:	0a1b      	lsrs	r3, r3, #8
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	4976      	ldr	r1, [pc, #472]	@ (800b0f8 <mbedtls_internal_aes_encrypt+0x5b4>)
 800af1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af22:	405a      	eors	r2, r3
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	0c1b      	lsrs	r3, r3, #16
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	4974      	ldr	r1, [pc, #464]	@ (800b0fc <mbedtls_internal_aes_encrypt+0x5b8>)
 800af2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af30:	405a      	eors	r2, r3
 800af32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af34:	0e1b      	lsrs	r3, r3, #24
 800af36:	4972      	ldr	r1, [pc, #456]	@ (800b100 <mbedtls_internal_aes_encrypt+0x5bc>)
 800af38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af3c:	4053      	eors	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	633a      	str	r2, [r7, #48]	@ 0x30
 800af46:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800af48:	69fa      	ldr	r2, [r7, #28]
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	496d      	ldr	r1, [pc, #436]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af4e:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 800af50:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	b2db      	uxtb	r3, r3
 800af58:	496a      	ldr	r1, [pc, #424]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af5a:	5ccb      	ldrb	r3, [r1, r3]
 800af5c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800af5e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	0c1b      	lsrs	r3, r3, #16
 800af64:	b2db      	uxtb	r3, r3
 800af66:	4967      	ldr	r1, [pc, #412]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af68:	5ccb      	ldrb	r3, [r1, r3]
 800af6a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800af6c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	0e1b      	lsrs	r3, r3, #24
 800af72:	4964      	ldr	r1, [pc, #400]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af74:	5ccb      	ldrb	r3, [r1, r3]
 800af76:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 800af78:	4053      	eors	r3, r2
 800af7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 800af7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	633a      	str	r2, [r7, #48]	@ 0x30
 800af82:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	495e      	ldr	r1, [pc, #376]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af8a:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 800af8c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	0a1b      	lsrs	r3, r3, #8
 800af92:	b2db      	uxtb	r3, r3
 800af94:	495b      	ldr	r1, [pc, #364]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800af96:	5ccb      	ldrb	r3, [r1, r3]
 800af98:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800af9a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	0c1b      	lsrs	r3, r3, #16
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	4958      	ldr	r1, [pc, #352]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afa4:	5ccb      	ldrb	r3, [r1, r3]
 800afa6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800afa8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	0e1b      	lsrs	r3, r3, #24
 800afae:	4955      	ldr	r1, [pc, #340]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afb0:	5ccb      	ldrb	r3, [r1, r3]
 800afb2:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 800afb4:	4053      	eors	r3, r2
 800afb6:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	1d1a      	adds	r2, r3, #4
 800afbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800afbe:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	494f      	ldr	r1, [pc, #316]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afc6:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 800afc8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	0a1b      	lsrs	r3, r3, #8
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	494c      	ldr	r1, [pc, #304]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afd2:	5ccb      	ldrb	r3, [r1, r3]
 800afd4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800afd6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	0c1b      	lsrs	r3, r3, #16
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	4949      	ldr	r1, [pc, #292]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afe0:	5ccb      	ldrb	r3, [r1, r3]
 800afe2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800afe4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	0e1b      	lsrs	r3, r3, #24
 800afea:	4946      	ldr	r1, [pc, #280]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800afec:	5ccb      	ldrb	r3, [r1, r3]
 800afee:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800aff0:	4053      	eors	r3, r2
 800aff2:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	1d1a      	adds	r2, r3, #4
 800aff8:	633a      	str	r2, [r7, #48]	@ 0x30
 800affa:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	b2d2      	uxtb	r2, r2
 800b000:	4940      	ldr	r1, [pc, #256]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800b002:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 800b004:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	493d      	ldr	r1, [pc, #244]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800b00e:	5ccb      	ldrb	r3, [r1, r3]
 800b010:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800b012:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	0c1b      	lsrs	r3, r3, #16
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	493a      	ldr	r1, [pc, #232]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800b01c:	5ccb      	ldrb	r3, [r1, r3]
 800b01e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800b020:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	0e1b      	lsrs	r3, r3, #24
 800b026:	4937      	ldr	r1, [pc, #220]	@ (800b104 <mbedtls_internal_aes_encrypt+0x5c0>)
 800b028:	5ccb      	ldrb	r3, [r1, r3]
 800b02a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800b02c:	4053      	eors	r3, r2
 800b02e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b032:	b2da      	uxtb	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03a:	0a1a      	lsrs	r2, r3, #8
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3301      	adds	r3, #1
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	0c1a      	lsrs	r2, r3, #16
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3302      	adds	r3, #2
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	0e1a      	lsrs	r2, r3, #24
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3303      	adds	r3, #3
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3304      	adds	r3, #4
 800b060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b068:	0a1a      	lsrs	r2, r3, #8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3305      	adds	r3, #5
 800b06e:	b2d2      	uxtb	r2, r2
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b074:	0c1a      	lsrs	r2, r3, #16
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3306      	adds	r3, #6
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b080:	0e1a      	lsrs	r2, r3, #24
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3307      	adds	r3, #7
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3308      	adds	r3, #8
 800b08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b096:	0a1a      	lsrs	r2, r3, #8
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3309      	adds	r3, #9
 800b09c:	b2d2      	uxtb	r2, r2
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	0c1a      	lsrs	r2, r3, #16
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	330a      	adds	r3, #10
 800b0a8:	b2d2      	uxtb	r2, r2
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ae:	0e1a      	lsrs	r2, r3, #24
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	330b      	adds	r3, #11
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	330c      	adds	r3, #12
 800b0bc:	6a3a      	ldr	r2, [r7, #32]
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	0a1a      	lsrs	r2, r3, #8
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	330d      	adds	r3, #13
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	0c1a      	lsrs	r2, r3, #16
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	330e      	adds	r3, #14
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	0e1a      	lsrs	r2, r3, #24
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	330f      	adds	r3, #15
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	373c      	adds	r7, #60	@ 0x3c
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	08010308 	.word	0x08010308
 800b0f8:	08010708 	.word	0x08010708
 800b0fc:	08010b08 	.word	0x08010b08
 800b100:	08010f08 	.word	0x08010f08
 800b104:	08010208 	.word	0x08010208

0800b108 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800b108:	b480      	push	{r7}
 800b10a:	b08f      	sub	sp, #60	@ 0x3c
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3301      	adds	r3, #1
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	021b      	lsls	r3, r3, #8
 800b128:	431a      	orrs	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	3302      	adds	r3, #2
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	041b      	lsls	r3, r3, #16
 800b132:	431a      	orrs	r2, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3303      	adds	r3, #3
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	061b      	lsls	r3, r3, #24
 800b13c:	4313      	orrs	r3, r2
 800b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	633a      	str	r2, [r7, #48]	@ 0x30
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b14a:	4053      	eors	r3, r2
 800b14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3304      	adds	r3, #4
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	3305      	adds	r3, #5
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	021b      	lsls	r3, r3, #8
 800b15e:	431a      	orrs	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	3306      	adds	r3, #6
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	431a      	orrs	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3307      	adds	r3, #7
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	061b      	lsls	r3, r3, #24
 800b172:	4313      	orrs	r3, r2
 800b174:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	1d1a      	adds	r2, r3, #4
 800b17a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b180:	4053      	eors	r3, r2
 800b182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3308      	adds	r3, #8
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	3309      	adds	r3, #9
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	431a      	orrs	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	330a      	adds	r3, #10
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	041b      	lsls	r3, r3, #16
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	330b      	adds	r3, #11
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	061b      	lsls	r3, r3, #24
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ae:	1d1a      	adds	r2, r3, #4
 800b1b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b6:	4053      	eors	r3, r2
 800b1b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	330c      	adds	r3, #12
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	330d      	adds	r3, #13
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	021b      	lsls	r3, r3, #8
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	330e      	adds	r3, #14
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	431a      	orrs	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	330f      	adds	r3, #15
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	061b      	lsls	r3, r3, #24
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	623b      	str	r3, [r7, #32]
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e4:	1d1a      	adds	r2, r3, #4
 800b1e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6a3a      	ldr	r2, [r7, #32]
 800b1ec:	4053      	eors	r3, r2
 800b1ee:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	105b      	asrs	r3, r3, #1
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1fa:	e0fa      	b.n	800b3f2 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	633a      	str	r2, [r7, #48]	@ 0x30
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b206:	b2db      	uxtb	r3, r3
 800b208:	49ab      	ldr	r1, [pc, #684]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b20a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b20e:	405a      	eors	r2, r3
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	0a1b      	lsrs	r3, r3, #8
 800b214:	b2db      	uxtb	r3, r3
 800b216:	49a9      	ldr	r1, [pc, #676]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b218:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b21c:	405a      	eors	r2, r3
 800b21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b220:	0c1b      	lsrs	r3, r3, #16
 800b222:	b2db      	uxtb	r3, r3
 800b224:	49a6      	ldr	r1, [pc, #664]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b22a:	405a      	eors	r2, r3
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	0e1b      	lsrs	r3, r3, #24
 800b230:	49a4      	ldr	r1, [pc, #656]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b236:	4053      	eors	r3, r2
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23c:	1d1a      	adds	r2, r3, #4
 800b23e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b244:	b2db      	uxtb	r3, r3
 800b246:	499c      	ldr	r1, [pc, #624]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b24c:	405a      	eors	r2, r3
 800b24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b250:	0a1b      	lsrs	r3, r3, #8
 800b252:	b2db      	uxtb	r3, r3
 800b254:	4999      	ldr	r1, [pc, #612]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b25a:	405a      	eors	r2, r3
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	0c1b      	lsrs	r3, r3, #16
 800b260:	b2db      	uxtb	r3, r3
 800b262:	4997      	ldr	r1, [pc, #604]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b268:	405a      	eors	r2, r3
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	0e1b      	lsrs	r3, r3, #24
 800b26e:	4995      	ldr	r1, [pc, #596]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b274:	4053      	eors	r3, r2
 800b276:	61bb      	str	r3, [r7, #24]
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	1d1a      	adds	r2, r3, #4
 800b27c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	b2db      	uxtb	r3, r3
 800b284:	498c      	ldr	r1, [pc, #560]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b28a:	405a      	eors	r2, r3
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b2db      	uxtb	r3, r3
 800b292:	498a      	ldr	r1, [pc, #552]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b294:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b298:	405a      	eors	r2, r3
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	4987      	ldr	r1, [pc, #540]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b2a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2a6:	405a      	eors	r2, r3
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	0e1b      	lsrs	r3, r3, #24
 800b2ac:	4985      	ldr	r1, [pc, #532]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b2ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2b2:	4053      	eors	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	497d      	ldr	r1, [pc, #500]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b2c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2c8:	405a      	eors	r2, r3
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	497a      	ldr	r1, [pc, #488]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b2d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2d6:	405a      	eors	r2, r3
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	0c1b      	lsrs	r3, r3, #16
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	4978      	ldr	r1, [pc, #480]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b2e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2e4:	405a      	eors	r2, r3
 800b2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e8:	0e1b      	lsrs	r3, r3, #24
 800b2ea:	4976      	ldr	r1, [pc, #472]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b2ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b2f0:	4053      	eors	r3, r2
 800b2f2:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	496d      	ldr	r1, [pc, #436]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b302:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b306:	405a      	eors	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	496b      	ldr	r1, [pc, #428]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b310:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b314:	405a      	eors	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	4968      	ldr	r1, [pc, #416]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b31e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b322:	405a      	eors	r2, r3
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	0e1b      	lsrs	r3, r3, #24
 800b328:	4966      	ldr	r1, [pc, #408]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b32a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b32e:	4053      	eors	r3, r2
 800b330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	633a      	str	r2, [r7, #48]	@ 0x30
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	495e      	ldr	r1, [pc, #376]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b344:	405a      	eors	r2, r3
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	0a1b      	lsrs	r3, r3, #8
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	495b      	ldr	r1, [pc, #364]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b34e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b352:	405a      	eors	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	0c1b      	lsrs	r3, r3, #16
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	4959      	ldr	r1, [pc, #356]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b35c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b360:	405a      	eors	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	0e1b      	lsrs	r3, r3, #24
 800b366:	4957      	ldr	r1, [pc, #348]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b36c:	4053      	eors	r3, r2
 800b36e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	1d1a      	adds	r2, r3, #4
 800b374:	633a      	str	r2, [r7, #48]	@ 0x30
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	494e      	ldr	r1, [pc, #312]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b37e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b382:	405a      	eors	r2, r3
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	0a1b      	lsrs	r3, r3, #8
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	494c      	ldr	r1, [pc, #304]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b38c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b390:	405a      	eors	r2, r3
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	0c1b      	lsrs	r3, r3, #16
 800b396:	b2db      	uxtb	r3, r3
 800b398:	4949      	ldr	r1, [pc, #292]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b39a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b39e:	405a      	eors	r2, r3
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	0e1b      	lsrs	r3, r3, #24
 800b3a4:	4947      	ldr	r1, [pc, #284]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b3a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3aa:	4053      	eors	r3, r2
 800b3ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b0:	1d1a      	adds	r2, r3, #4
 800b3b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	493f      	ldr	r1, [pc, #252]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b3bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3c0:	405a      	eors	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	0a1b      	lsrs	r3, r3, #8
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	493c      	ldr	r1, [pc, #240]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b3ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3ce:	405a      	eors	r2, r3
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	0c1b      	lsrs	r3, r3, #16
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	493a      	ldr	r1, [pc, #232]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b3d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3dc:	405a      	eors	r2, r3
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	4938      	ldr	r1, [pc, #224]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b3e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3e8:	4053      	eors	r3, r2
 800b3ea:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f73f af01 	bgt.w	800b1fc <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	1d1a      	adds	r2, r3, #4
 800b3fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	b2db      	uxtb	r3, r3
 800b406:	492c      	ldr	r1, [pc, #176]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b408:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b40c:	405a      	eors	r2, r3
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4929      	ldr	r1, [pc, #164]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b416:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b41a:	405a      	eors	r2, r3
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	0c1b      	lsrs	r3, r3, #16
 800b420:	b2db      	uxtb	r3, r3
 800b422:	4927      	ldr	r1, [pc, #156]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b428:	405a      	eors	r2, r3
 800b42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42c:	0e1b      	lsrs	r3, r3, #24
 800b42e:	4925      	ldr	r1, [pc, #148]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b430:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b434:	4053      	eors	r3, r2
 800b436:	61fb      	str	r3, [r7, #28]
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	1d1a      	adds	r2, r3, #4
 800b43c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	b2db      	uxtb	r3, r3
 800b444:	491c      	ldr	r1, [pc, #112]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b44a:	405a      	eors	r2, r3
 800b44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	b2db      	uxtb	r3, r3
 800b452:	491a      	ldr	r1, [pc, #104]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b458:	405a      	eors	r2, r3
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	0c1b      	lsrs	r3, r3, #16
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	4917      	ldr	r1, [pc, #92]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b466:	405a      	eors	r2, r3
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	0e1b      	lsrs	r3, r3, #24
 800b46c:	4915      	ldr	r1, [pc, #84]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b46e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b472:	4053      	eors	r3, r2
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	1d1a      	adds	r2, r3, #4
 800b47a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b480:	b2db      	uxtb	r3, r3
 800b482:	490d      	ldr	r1, [pc, #52]	@ (800b4b8 <mbedtls_internal_aes_decrypt+0x3b0>)
 800b484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b488:	405a      	eors	r2, r3
 800b48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48c:	0a1b      	lsrs	r3, r3, #8
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	490a      	ldr	r1, [pc, #40]	@ (800b4bc <mbedtls_internal_aes_decrypt+0x3b4>)
 800b492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b496:	405a      	eors	r2, r3
 800b498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49a:	0c1b      	lsrs	r3, r3, #16
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	4908      	ldr	r1, [pc, #32]	@ (800b4c0 <mbedtls_internal_aes_decrypt+0x3b8>)
 800b4a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4a4:	405a      	eors	r2, r3
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	0e1b      	lsrs	r3, r3, #24
 800b4aa:	4906      	ldr	r1, [pc, #24]	@ (800b4c4 <mbedtls_internal_aes_decrypt+0x3bc>)
 800b4ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4b0:	4053      	eors	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b6:	e007      	b.n	800b4c8 <mbedtls_internal_aes_decrypt+0x3c0>
 800b4b8:	08011408 	.word	0x08011408
 800b4bc:	08011808 	.word	0x08011808
 800b4c0:	08011c08 	.word	0x08011c08
 800b4c4:	08012008 	.word	0x08012008
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	4979      	ldr	r1, [pc, #484]	@ (800b6b8 <mbedtls_internal_aes_decrypt+0x5b0>)
 800b4d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4d8:	405a      	eors	r2, r3
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	0a1b      	lsrs	r3, r3, #8
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4976      	ldr	r1, [pc, #472]	@ (800b6bc <mbedtls_internal_aes_decrypt+0x5b4>)
 800b4e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4e6:	405a      	eors	r2, r3
 800b4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ea:	0c1b      	lsrs	r3, r3, #16
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	4974      	ldr	r1, [pc, #464]	@ (800b6c0 <mbedtls_internal_aes_decrypt+0x5b8>)
 800b4f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4f4:	405a      	eors	r2, r3
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	0e1b      	lsrs	r3, r3, #24
 800b4fa:	4972      	ldr	r1, [pc, #456]	@ (800b6c4 <mbedtls_internal_aes_decrypt+0x5bc>)
 800b4fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b500:	4053      	eors	r3, r2
 800b502:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	633a      	str	r2, [r7, #48]	@ 0x30
 800b50a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800b50c:	69fa      	ldr	r2, [r7, #28]
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	496d      	ldr	r1, [pc, #436]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b512:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 800b514:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	0a1b      	lsrs	r3, r3, #8
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	496a      	ldr	r1, [pc, #424]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b51e:	5ccb      	ldrb	r3, [r1, r3]
 800b520:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800b522:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	0c1b      	lsrs	r3, r3, #16
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	4967      	ldr	r1, [pc, #412]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b52c:	5ccb      	ldrb	r3, [r1, r3]
 800b52e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800b530:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	0e1b      	lsrs	r3, r3, #24
 800b536:	4964      	ldr	r1, [pc, #400]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b538:	5ccb      	ldrb	r3, [r1, r3]
 800b53a:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 800b53c:	4053      	eors	r3, r2
 800b53e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 800b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	633a      	str	r2, [r7, #48]	@ 0x30
 800b546:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	495e      	ldr	r1, [pc, #376]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b54e:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 800b550:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	0a1b      	lsrs	r3, r3, #8
 800b556:	b2db      	uxtb	r3, r3
 800b558:	495b      	ldr	r1, [pc, #364]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b55a:	5ccb      	ldrb	r3, [r1, r3]
 800b55c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800b55e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	b2db      	uxtb	r3, r3
 800b566:	4958      	ldr	r1, [pc, #352]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b568:	5ccb      	ldrb	r3, [r1, r3]
 800b56a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800b56c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	0e1b      	lsrs	r3, r3, #24
 800b572:	4955      	ldr	r1, [pc, #340]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b574:	5ccb      	ldrb	r3, [r1, r3]
 800b576:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 800b578:	4053      	eors	r3, r2
 800b57a:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 800b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	633a      	str	r2, [r7, #48]	@ 0x30
 800b582:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	b2d2      	uxtb	r2, r2
 800b588:	494f      	ldr	r1, [pc, #316]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b58a:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 800b58c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	0a1b      	lsrs	r3, r3, #8
 800b592:	b2db      	uxtb	r3, r3
 800b594:	494c      	ldr	r1, [pc, #304]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b596:	5ccb      	ldrb	r3, [r1, r3]
 800b598:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800b59a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	4949      	ldr	r1, [pc, #292]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5a4:	5ccb      	ldrb	r3, [r1, r3]
 800b5a6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800b5a8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	0e1b      	lsrs	r3, r3, #24
 800b5ae:	4946      	ldr	r1, [pc, #280]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5b0:	5ccb      	ldrb	r3, [r1, r3]
 800b5b2:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800b5b4:	4053      	eors	r3, r2
 800b5b6:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5be:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	b2d2      	uxtb	r2, r2
 800b5c4:	4940      	ldr	r1, [pc, #256]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5c6:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 800b5c8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	0a1b      	lsrs	r3, r3, #8
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	493d      	ldr	r1, [pc, #244]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5d2:	5ccb      	ldrb	r3, [r1, r3]
 800b5d4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800b5d6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	0c1b      	lsrs	r3, r3, #16
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	493a      	ldr	r1, [pc, #232]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5e0:	5ccb      	ldrb	r3, [r1, r3]
 800b5e2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800b5e4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	0e1b      	lsrs	r3, r3, #24
 800b5ea:	4937      	ldr	r1, [pc, #220]	@ (800b6c8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800b5ec:	5ccb      	ldrb	r3, [r1, r3]
 800b5ee:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800b5f0:	4053      	eors	r3, r2
 800b5f2:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fe:	0a1a      	lsrs	r2, r3, #8
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3301      	adds	r3, #1
 800b604:	b2d2      	uxtb	r2, r2
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	0c1a      	lsrs	r2, r3, #16
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3302      	adds	r3, #2
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	0e1a      	lsrs	r2, r3, #24
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3303      	adds	r3, #3
 800b61c:	b2d2      	uxtb	r2, r2
 800b61e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62c:	0a1a      	lsrs	r2, r3, #8
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3305      	adds	r3, #5
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b638:	0c1a      	lsrs	r2, r3, #16
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3306      	adds	r3, #6
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
 800b642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b644:	0e1a      	lsrs	r2, r3, #24
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3307      	adds	r3, #7
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3308      	adds	r3, #8
 800b652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	0a1a      	lsrs	r2, r3, #8
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3309      	adds	r3, #9
 800b660:	b2d2      	uxtb	r2, r2
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	0c1a      	lsrs	r2, r3, #16
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	330a      	adds	r3, #10
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	0e1a      	lsrs	r2, r3, #24
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	330b      	adds	r3, #11
 800b678:	b2d2      	uxtb	r2, r2
 800b67a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	330c      	adds	r3, #12
 800b680:	6a3a      	ldr	r2, [r7, #32]
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	0a1a      	lsrs	r2, r3, #8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	330d      	adds	r3, #13
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	0c1a      	lsrs	r2, r3, #16
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	330e      	adds	r3, #14
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	0e1a      	lsrs	r2, r3, #24
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	330f      	adds	r3, #15
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	373c      	adds	r7, #60	@ 0x3c
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	08011408 	.word	0x08011408
 800b6bc:	08011808 	.word	0x08011808
 800b6c0:	08011c08 	.word	0x08011c08
 800b6c4:	08012008 	.word	0x08012008
 800b6c8:	08011308 	.word	0x08011308

0800b6cc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d106      	bne.n	800b6ee <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff fa2d 	bl	800ab44 <mbedtls_internal_aes_encrypt>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	e005      	b.n	800b6fa <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fd08 	bl	800b108 <mbedtls_internal_aes_decrypt>
 800b6f8:	4603      	mov	r3, r0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
	...

0800b704 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 800b70e:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <mbedtls_platform_zeroize+0x20>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	2100      	movs	r1, #0
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	4798      	blx	r3
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000040 	.word	0x20000040

0800b728 <_calloc_r>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	fba1 5402 	umull	r5, r4, r1, r2
 800b72e:	b93c      	cbnz	r4, 800b740 <_calloc_r+0x18>
 800b730:	4629      	mov	r1, r5
 800b732:	f000 f851 	bl	800b7d8 <_malloc_r>
 800b736:	4606      	mov	r6, r0
 800b738:	b928      	cbnz	r0, 800b746 <_calloc_r+0x1e>
 800b73a:	2600      	movs	r6, #0
 800b73c:	4630      	mov	r0, r6
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	220c      	movs	r2, #12
 800b742:	6002      	str	r2, [r0, #0]
 800b744:	e7f9      	b.n	800b73a <_calloc_r+0x12>
 800b746:	462a      	mov	r2, r5
 800b748:	4621      	mov	r1, r4
 800b74a:	f001 f8be 	bl	800c8ca <memset>
 800b74e:	e7f5      	b.n	800b73c <_calloc_r+0x14>

0800b750 <__itoa>:
 800b750:	1e93      	subs	r3, r2, #2
 800b752:	2b22      	cmp	r3, #34	@ 0x22
 800b754:	b510      	push	{r4, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	d904      	bls.n	800b764 <__itoa+0x14>
 800b75a:	2300      	movs	r3, #0
 800b75c:	700b      	strb	r3, [r1, #0]
 800b75e:	461c      	mov	r4, r3
 800b760:	4620      	mov	r0, r4
 800b762:	bd10      	pop	{r4, pc}
 800b764:	2a0a      	cmp	r2, #10
 800b766:	d109      	bne.n	800b77c <__itoa+0x2c>
 800b768:	2800      	cmp	r0, #0
 800b76a:	da07      	bge.n	800b77c <__itoa+0x2c>
 800b76c:	232d      	movs	r3, #45	@ 0x2d
 800b76e:	700b      	strb	r3, [r1, #0]
 800b770:	4240      	negs	r0, r0
 800b772:	2101      	movs	r1, #1
 800b774:	4421      	add	r1, r4
 800b776:	f000 f8bb 	bl	800b8f0 <__utoa>
 800b77a:	e7f1      	b.n	800b760 <__itoa+0x10>
 800b77c:	2100      	movs	r1, #0
 800b77e:	e7f9      	b.n	800b774 <__itoa+0x24>

0800b780 <itoa>:
 800b780:	f7ff bfe6 	b.w	800b750 <__itoa>

0800b784 <malloc>:
 800b784:	4b02      	ldr	r3, [pc, #8]	@ (800b790 <malloc+0xc>)
 800b786:	4601      	mov	r1, r0
 800b788:	6818      	ldr	r0, [r3, #0]
 800b78a:	f000 b825 	b.w	800b7d8 <_malloc_r>
 800b78e:	bf00      	nop
 800b790:	20000050 	.word	0x20000050

0800b794 <sbrk_aligned>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	4e0f      	ldr	r6, [pc, #60]	@ (800b7d4 <sbrk_aligned+0x40>)
 800b798:	460c      	mov	r4, r1
 800b79a:	6831      	ldr	r1, [r6, #0]
 800b79c:	4605      	mov	r5, r0
 800b79e:	b911      	cbnz	r1, 800b7a6 <sbrk_aligned+0x12>
 800b7a0:	f001 f938 	bl	800ca14 <_sbrk_r>
 800b7a4:	6030      	str	r0, [r6, #0]
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f001 f933 	bl	800ca14 <_sbrk_r>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d103      	bne.n	800b7ba <sbrk_aligned+0x26>
 800b7b2:	f04f 34ff 	mov.w	r4, #4294967295
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	1cc4      	adds	r4, r0, #3
 800b7bc:	f024 0403 	bic.w	r4, r4, #3
 800b7c0:	42a0      	cmp	r0, r4
 800b7c2:	d0f8      	beq.n	800b7b6 <sbrk_aligned+0x22>
 800b7c4:	1a21      	subs	r1, r4, r0
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f001 f924 	bl	800ca14 <_sbrk_r>
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d1f2      	bne.n	800b7b6 <sbrk_aligned+0x22>
 800b7d0:	e7ef      	b.n	800b7b2 <sbrk_aligned+0x1e>
 800b7d2:	bf00      	nop
 800b7d4:	20009ec0 	.word	0x20009ec0

0800b7d8 <_malloc_r>:
 800b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	1ccd      	adds	r5, r1, #3
 800b7de:	f025 0503 	bic.w	r5, r5, #3
 800b7e2:	3508      	adds	r5, #8
 800b7e4:	2d0c      	cmp	r5, #12
 800b7e6:	bf38      	it	cc
 800b7e8:	250c      	movcc	r5, #12
 800b7ea:	2d00      	cmp	r5, #0
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	db01      	blt.n	800b7f4 <_malloc_r+0x1c>
 800b7f0:	42a9      	cmp	r1, r5
 800b7f2:	d904      	bls.n	800b7fe <_malloc_r+0x26>
 800b7f4:	230c      	movs	r3, #12
 800b7f6:	6033      	str	r3, [r6, #0]
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8d4 <_malloc_r+0xfc>
 800b802:	f000 f869 	bl	800b8d8 <__malloc_lock>
 800b806:	f8d8 3000 	ldr.w	r3, [r8]
 800b80a:	461c      	mov	r4, r3
 800b80c:	bb44      	cbnz	r4, 800b860 <_malloc_r+0x88>
 800b80e:	4629      	mov	r1, r5
 800b810:	4630      	mov	r0, r6
 800b812:	f7ff ffbf 	bl	800b794 <sbrk_aligned>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	4604      	mov	r4, r0
 800b81a:	d158      	bne.n	800b8ce <_malloc_r+0xf6>
 800b81c:	f8d8 4000 	ldr.w	r4, [r8]
 800b820:	4627      	mov	r7, r4
 800b822:	2f00      	cmp	r7, #0
 800b824:	d143      	bne.n	800b8ae <_malloc_r+0xd6>
 800b826:	2c00      	cmp	r4, #0
 800b828:	d04b      	beq.n	800b8c2 <_malloc_r+0xea>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	4639      	mov	r1, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	eb04 0903 	add.w	r9, r4, r3
 800b834:	f001 f8ee 	bl	800ca14 <_sbrk_r>
 800b838:	4581      	cmp	r9, r0
 800b83a:	d142      	bne.n	800b8c2 <_malloc_r+0xea>
 800b83c:	6821      	ldr	r1, [r4, #0]
 800b83e:	1a6d      	subs	r5, r5, r1
 800b840:	4629      	mov	r1, r5
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff ffa6 	bl	800b794 <sbrk_aligned>
 800b848:	3001      	adds	r0, #1
 800b84a:	d03a      	beq.n	800b8c2 <_malloc_r+0xea>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	442b      	add	r3, r5
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	f8d8 3000 	ldr.w	r3, [r8]
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	bb62      	cbnz	r2, 800b8b4 <_malloc_r+0xdc>
 800b85a:	f8c8 7000 	str.w	r7, [r8]
 800b85e:	e00f      	b.n	800b880 <_malloc_r+0xa8>
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	1b52      	subs	r2, r2, r5
 800b864:	d420      	bmi.n	800b8a8 <_malloc_r+0xd0>
 800b866:	2a0b      	cmp	r2, #11
 800b868:	d917      	bls.n	800b89a <_malloc_r+0xc2>
 800b86a:	1961      	adds	r1, r4, r5
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	6025      	str	r5, [r4, #0]
 800b870:	bf18      	it	ne
 800b872:	6059      	strne	r1, [r3, #4]
 800b874:	6863      	ldr	r3, [r4, #4]
 800b876:	bf08      	it	eq
 800b878:	f8c8 1000 	streq.w	r1, [r8]
 800b87c:	5162      	str	r2, [r4, r5]
 800b87e:	604b      	str	r3, [r1, #4]
 800b880:	4630      	mov	r0, r6
 800b882:	f000 f82f 	bl	800b8e4 <__malloc_unlock>
 800b886:	f104 000b 	add.w	r0, r4, #11
 800b88a:	1d23      	adds	r3, r4, #4
 800b88c:	f020 0007 	bic.w	r0, r0, #7
 800b890:	1ac2      	subs	r2, r0, r3
 800b892:	bf1c      	itt	ne
 800b894:	1a1b      	subne	r3, r3, r0
 800b896:	50a3      	strne	r3, [r4, r2]
 800b898:	e7af      	b.n	800b7fa <_malloc_r+0x22>
 800b89a:	6862      	ldr	r2, [r4, #4]
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	bf0c      	ite	eq
 800b8a0:	f8c8 2000 	streq.w	r2, [r8]
 800b8a4:	605a      	strne	r2, [r3, #4]
 800b8a6:	e7eb      	b.n	800b880 <_malloc_r+0xa8>
 800b8a8:	4623      	mov	r3, r4
 800b8aa:	6864      	ldr	r4, [r4, #4]
 800b8ac:	e7ae      	b.n	800b80c <_malloc_r+0x34>
 800b8ae:	463c      	mov	r4, r7
 800b8b0:	687f      	ldr	r7, [r7, #4]
 800b8b2:	e7b6      	b.n	800b822 <_malloc_r+0x4a>
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	d1fb      	bne.n	800b8b4 <_malloc_r+0xdc>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	6053      	str	r3, [r2, #4]
 800b8c0:	e7de      	b.n	800b880 <_malloc_r+0xa8>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	6033      	str	r3, [r6, #0]
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f000 f80c 	bl	800b8e4 <__malloc_unlock>
 800b8cc:	e794      	b.n	800b7f8 <_malloc_r+0x20>
 800b8ce:	6005      	str	r5, [r0, #0]
 800b8d0:	e7d6      	b.n	800b880 <_malloc_r+0xa8>
 800b8d2:	bf00      	nop
 800b8d4:	20009ec4 	.word	0x20009ec4

0800b8d8 <__malloc_lock>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	@ (800b8e0 <__malloc_lock+0x8>)
 800b8da:	f001 b8e8 	b.w	800caae <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	2000a008 	.word	0x2000a008

0800b8e4 <__malloc_unlock>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	@ (800b8ec <__malloc_unlock+0x8>)
 800b8e6:	f001 b8e3 	b.w	800cab0 <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	2000a008 	.word	0x2000a008

0800b8f0 <__utoa>:
 800b8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8f2:	4c1f      	ldr	r4, [pc, #124]	@ (800b970 <__utoa+0x80>)
 800b8f4:	b08b      	sub	sp, #44	@ 0x2c
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	466e      	mov	r6, sp
 800b8fc:	f104 0c20 	add.w	ip, r4, #32
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	6861      	ldr	r1, [r4, #4]
 800b904:	4637      	mov	r7, r6
 800b906:	c703      	stmia	r7!, {r0, r1}
 800b908:	3408      	adds	r4, #8
 800b90a:	4564      	cmp	r4, ip
 800b90c:	463e      	mov	r6, r7
 800b90e:	d1f7      	bne.n	800b900 <__utoa+0x10>
 800b910:	7921      	ldrb	r1, [r4, #4]
 800b912:	7139      	strb	r1, [r7, #4]
 800b914:	1e91      	subs	r1, r2, #2
 800b916:	6820      	ldr	r0, [r4, #0]
 800b918:	6038      	str	r0, [r7, #0]
 800b91a:	2922      	cmp	r1, #34	@ 0x22
 800b91c:	f04f 0100 	mov.w	r1, #0
 800b920:	d904      	bls.n	800b92c <__utoa+0x3c>
 800b922:	7019      	strb	r1, [r3, #0]
 800b924:	460b      	mov	r3, r1
 800b926:	4618      	mov	r0, r3
 800b928:	b00b      	add	sp, #44	@ 0x2c
 800b92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92c:	1e58      	subs	r0, r3, #1
 800b92e:	4684      	mov	ip, r0
 800b930:	fbb5 f7f2 	udiv	r7, r5, r2
 800b934:	fb02 5617 	mls	r6, r2, r7, r5
 800b938:	3628      	adds	r6, #40	@ 0x28
 800b93a:	446e      	add	r6, sp
 800b93c:	460c      	mov	r4, r1
 800b93e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b942:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b946:	462e      	mov	r6, r5
 800b948:	42b2      	cmp	r2, r6
 800b94a:	f101 0101 	add.w	r1, r1, #1
 800b94e:	463d      	mov	r5, r7
 800b950:	d9ee      	bls.n	800b930 <__utoa+0x40>
 800b952:	2200      	movs	r2, #0
 800b954:	545a      	strb	r2, [r3, r1]
 800b956:	1919      	adds	r1, r3, r4
 800b958:	1aa5      	subs	r5, r4, r2
 800b95a:	42aa      	cmp	r2, r5
 800b95c:	dae3      	bge.n	800b926 <__utoa+0x36>
 800b95e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b962:	780e      	ldrb	r6, [r1, #0]
 800b964:	7006      	strb	r6, [r0, #0]
 800b966:	3201      	adds	r2, #1
 800b968:	f801 5901 	strb.w	r5, [r1], #-1
 800b96c:	e7f4      	b.n	800b958 <__utoa+0x68>
 800b96e:	bf00      	nop
 800b970:	08012430 	.word	0x08012430

0800b974 <__cvt>:
 800b974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	ec57 6b10 	vmov	r6, r7, d0
 800b97c:	2f00      	cmp	r7, #0
 800b97e:	460c      	mov	r4, r1
 800b980:	4619      	mov	r1, r3
 800b982:	463b      	mov	r3, r7
 800b984:	bfbb      	ittet	lt
 800b986:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b98a:	461f      	movlt	r7, r3
 800b98c:	2300      	movge	r3, #0
 800b98e:	232d      	movlt	r3, #45	@ 0x2d
 800b990:	700b      	strb	r3, [r1, #0]
 800b992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b994:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b998:	4691      	mov	r9, r2
 800b99a:	f023 0820 	bic.w	r8, r3, #32
 800b99e:	bfbc      	itt	lt
 800b9a0:	4632      	movlt	r2, r6
 800b9a2:	4616      	movlt	r6, r2
 800b9a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9a8:	d005      	beq.n	800b9b6 <__cvt+0x42>
 800b9aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9ae:	d100      	bne.n	800b9b2 <__cvt+0x3e>
 800b9b0:	3401      	adds	r4, #1
 800b9b2:	2102      	movs	r1, #2
 800b9b4:	e000      	b.n	800b9b8 <__cvt+0x44>
 800b9b6:	2103      	movs	r1, #3
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9301      	str	r3, [sp, #4]
 800b9bc:	ab02      	add	r3, sp, #8
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	ec47 6b10 	vmov	d0, r6, r7
 800b9c4:	4653      	mov	r3, sl
 800b9c6:	4622      	mov	r2, r4
 800b9c8:	f001 f91a 	bl	800cc00 <_dtoa_r>
 800b9cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	d119      	bne.n	800ba08 <__cvt+0x94>
 800b9d4:	f019 0f01 	tst.w	r9, #1
 800b9d8:	d00e      	beq.n	800b9f8 <__cvt+0x84>
 800b9da:	eb00 0904 	add.w	r9, r0, r4
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	f7f5 f87f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9ea:	b108      	cbz	r0, 800b9f0 <__cvt+0x7c>
 800b9ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9f0:	2230      	movs	r2, #48	@ 0x30
 800b9f2:	9b03      	ldr	r3, [sp, #12]
 800b9f4:	454b      	cmp	r3, r9
 800b9f6:	d31e      	bcc.n	800ba36 <__cvt+0xc2>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9fc:	1b5b      	subs	r3, r3, r5
 800b9fe:	4628      	mov	r0, r5
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	b004      	add	sp, #16
 800ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba0c:	eb00 0904 	add.w	r9, r0, r4
 800ba10:	d1e5      	bne.n	800b9de <__cvt+0x6a>
 800ba12:	7803      	ldrb	r3, [r0, #0]
 800ba14:	2b30      	cmp	r3, #48	@ 0x30
 800ba16:	d10a      	bne.n	800ba2e <__cvt+0xba>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	4639      	mov	r1, r7
 800ba20:	f7f5 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba24:	b918      	cbnz	r0, 800ba2e <__cvt+0xba>
 800ba26:	f1c4 0401 	rsb	r4, r4, #1
 800ba2a:	f8ca 4000 	str.w	r4, [sl]
 800ba2e:	f8da 3000 	ldr.w	r3, [sl]
 800ba32:	4499      	add	r9, r3
 800ba34:	e7d3      	b.n	800b9de <__cvt+0x6a>
 800ba36:	1c59      	adds	r1, r3, #1
 800ba38:	9103      	str	r1, [sp, #12]
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	e7d9      	b.n	800b9f2 <__cvt+0x7e>

0800ba3e <__exponent>:
 800ba3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba40:	2900      	cmp	r1, #0
 800ba42:	bfba      	itte	lt
 800ba44:	4249      	neglt	r1, r1
 800ba46:	232d      	movlt	r3, #45	@ 0x2d
 800ba48:	232b      	movge	r3, #43	@ 0x2b
 800ba4a:	2909      	cmp	r1, #9
 800ba4c:	7002      	strb	r2, [r0, #0]
 800ba4e:	7043      	strb	r3, [r0, #1]
 800ba50:	dd29      	ble.n	800baa6 <__exponent+0x68>
 800ba52:	f10d 0307 	add.w	r3, sp, #7
 800ba56:	461d      	mov	r5, r3
 800ba58:	270a      	movs	r7, #10
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba60:	fb07 1416 	mls	r4, r7, r6, r1
 800ba64:	3430      	adds	r4, #48	@ 0x30
 800ba66:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	2c63      	cmp	r4, #99	@ 0x63
 800ba6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba72:	4631      	mov	r1, r6
 800ba74:	dcf1      	bgt.n	800ba5a <__exponent+0x1c>
 800ba76:	3130      	adds	r1, #48	@ 0x30
 800ba78:	1e94      	subs	r4, r2, #2
 800ba7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba7e:	1c41      	adds	r1, r0, #1
 800ba80:	4623      	mov	r3, r4
 800ba82:	42ab      	cmp	r3, r5
 800ba84:	d30a      	bcc.n	800ba9c <__exponent+0x5e>
 800ba86:	f10d 0309 	add.w	r3, sp, #9
 800ba8a:	1a9b      	subs	r3, r3, r2
 800ba8c:	42ac      	cmp	r4, r5
 800ba8e:	bf88      	it	hi
 800ba90:	2300      	movhi	r3, #0
 800ba92:	3302      	adds	r3, #2
 800ba94:	4403      	add	r3, r0
 800ba96:	1a18      	subs	r0, r3, r0
 800ba98:	b003      	add	sp, #12
 800ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800baa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800baa4:	e7ed      	b.n	800ba82 <__exponent+0x44>
 800baa6:	2330      	movs	r3, #48	@ 0x30
 800baa8:	3130      	adds	r1, #48	@ 0x30
 800baaa:	7083      	strb	r3, [r0, #2]
 800baac:	70c1      	strb	r1, [r0, #3]
 800baae:	1d03      	adds	r3, r0, #4
 800bab0:	e7f1      	b.n	800ba96 <__exponent+0x58>
	...

0800bab4 <_printf_float>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	b08d      	sub	sp, #52	@ 0x34
 800baba:	460c      	mov	r4, r1
 800babc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bac0:	4616      	mov	r6, r2
 800bac2:	461f      	mov	r7, r3
 800bac4:	4605      	mov	r5, r0
 800bac6:	f000 ff17 	bl	800c8f8 <_localeconv_r>
 800baca:	6803      	ldr	r3, [r0, #0]
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f4 fbde 	bl	8000290 <strlen>
 800bad4:	2300      	movs	r3, #0
 800bad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bad8:	f8d8 3000 	ldr.w	r3, [r8]
 800badc:	9005      	str	r0, [sp, #20]
 800bade:	3307      	adds	r3, #7
 800bae0:	f023 0307 	bic.w	r3, r3, #7
 800bae4:	f103 0208 	add.w	r2, r3, #8
 800bae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800baec:	f8d4 b000 	ldr.w	fp, [r4]
 800baf0:	f8c8 2000 	str.w	r2, [r8]
 800baf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bafc:	9307      	str	r3, [sp, #28]
 800bafe:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb0a:	4b9c      	ldr	r3, [pc, #624]	@ (800bd7c <_printf_float+0x2c8>)
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	f7f5 f81c 	bl	8000b4c <__aeabi_dcmpun>
 800bb14:	bb70      	cbnz	r0, 800bb74 <_printf_float+0xc0>
 800bb16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb1a:	4b98      	ldr	r3, [pc, #608]	@ (800bd7c <_printf_float+0x2c8>)
 800bb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb20:	f7f4 fff6 	bl	8000b10 <__aeabi_dcmple>
 800bb24:	bb30      	cbnz	r0, 800bb74 <_printf_float+0xc0>
 800bb26:	2200      	movs	r2, #0
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	f7f4 ffe5 	bl	8000afc <__aeabi_dcmplt>
 800bb32:	b110      	cbz	r0, 800bb3a <_printf_float+0x86>
 800bb34:	232d      	movs	r3, #45	@ 0x2d
 800bb36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb3a:	4a91      	ldr	r2, [pc, #580]	@ (800bd80 <_printf_float+0x2cc>)
 800bb3c:	4b91      	ldr	r3, [pc, #580]	@ (800bd84 <_printf_float+0x2d0>)
 800bb3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb42:	bf94      	ite	ls
 800bb44:	4690      	movls	r8, r2
 800bb46:	4698      	movhi	r8, r3
 800bb48:	2303      	movs	r3, #3
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	f02b 0304 	bic.w	r3, fp, #4
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	f04f 0900 	mov.w	r9, #0
 800bb56:	9700      	str	r7, [sp, #0]
 800bb58:	4633      	mov	r3, r6
 800bb5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f000 f9d2 	bl	800bf08 <_printf_common>
 800bb64:	3001      	adds	r0, #1
 800bb66:	f040 808d 	bne.w	800bc84 <_printf_float+0x1d0>
 800bb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6e:	b00d      	add	sp, #52	@ 0x34
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	4642      	mov	r2, r8
 800bb76:	464b      	mov	r3, r9
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	f7f4 ffe6 	bl	8000b4c <__aeabi_dcmpun>
 800bb80:	b140      	cbz	r0, 800bb94 <_printf_float+0xe0>
 800bb82:	464b      	mov	r3, r9
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfbc      	itt	lt
 800bb88:	232d      	movlt	r3, #45	@ 0x2d
 800bb8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb8e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd88 <_printf_float+0x2d4>)
 800bb90:	4b7e      	ldr	r3, [pc, #504]	@ (800bd8c <_printf_float+0x2d8>)
 800bb92:	e7d4      	b.n	800bb3e <_printf_float+0x8a>
 800bb94:	6863      	ldr	r3, [r4, #4]
 800bb96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb9a:	9206      	str	r2, [sp, #24]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	d13b      	bne.n	800bc18 <_printf_float+0x164>
 800bba0:	2306      	movs	r3, #6
 800bba2:	6063      	str	r3, [r4, #4]
 800bba4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bba8:	2300      	movs	r3, #0
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbb4:	ab09      	add	r3, sp, #36	@ 0x24
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6861      	ldr	r1, [r4, #4]
 800bbba:	ec49 8b10 	vmov	d0, r8, r9
 800bbbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7ff fed6 	bl	800b974 <__cvt>
 800bbc8:	9b06      	ldr	r3, [sp, #24]
 800bbca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbcc:	2b47      	cmp	r3, #71	@ 0x47
 800bbce:	4680      	mov	r8, r0
 800bbd0:	d129      	bne.n	800bc26 <_printf_float+0x172>
 800bbd2:	1cc8      	adds	r0, r1, #3
 800bbd4:	db02      	blt.n	800bbdc <_printf_float+0x128>
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	dd41      	ble.n	800bc60 <_printf_float+0x1ac>
 800bbdc:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbe0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbe4:	3901      	subs	r1, #1
 800bbe6:	4652      	mov	r2, sl
 800bbe8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bbec:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbee:	f7ff ff26 	bl	800ba3e <__exponent>
 800bbf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbf4:	1813      	adds	r3, r2, r0
 800bbf6:	2a01      	cmp	r2, #1
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	6123      	str	r3, [r4, #16]
 800bbfc:	dc02      	bgt.n	800bc04 <_printf_float+0x150>
 800bbfe:	6822      	ldr	r2, [r4, #0]
 800bc00:	07d2      	lsls	r2, r2, #31
 800bc02:	d501      	bpl.n	800bc08 <_printf_float+0x154>
 800bc04:	3301      	adds	r3, #1
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0a2      	beq.n	800bb56 <_printf_float+0xa2>
 800bc10:	232d      	movs	r3, #45	@ 0x2d
 800bc12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc16:	e79e      	b.n	800bb56 <_printf_float+0xa2>
 800bc18:	9a06      	ldr	r2, [sp, #24]
 800bc1a:	2a47      	cmp	r2, #71	@ 0x47
 800bc1c:	d1c2      	bne.n	800bba4 <_printf_float+0xf0>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1c0      	bne.n	800bba4 <_printf_float+0xf0>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e7bd      	b.n	800bba2 <_printf_float+0xee>
 800bc26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc2a:	d9db      	bls.n	800bbe4 <_printf_float+0x130>
 800bc2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc30:	d118      	bne.n	800bc64 <_printf_float+0x1b0>
 800bc32:	2900      	cmp	r1, #0
 800bc34:	6863      	ldr	r3, [r4, #4]
 800bc36:	dd0b      	ble.n	800bc50 <_printf_float+0x19c>
 800bc38:	6121      	str	r1, [r4, #16]
 800bc3a:	b913      	cbnz	r3, 800bc42 <_printf_float+0x18e>
 800bc3c:	6822      	ldr	r2, [r4, #0]
 800bc3e:	07d0      	lsls	r0, r2, #31
 800bc40:	d502      	bpl.n	800bc48 <_printf_float+0x194>
 800bc42:	3301      	adds	r3, #1
 800bc44:	440b      	add	r3, r1
 800bc46:	6123      	str	r3, [r4, #16]
 800bc48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc4a:	f04f 0900 	mov.w	r9, #0
 800bc4e:	e7db      	b.n	800bc08 <_printf_float+0x154>
 800bc50:	b913      	cbnz	r3, 800bc58 <_printf_float+0x1a4>
 800bc52:	6822      	ldr	r2, [r4, #0]
 800bc54:	07d2      	lsls	r2, r2, #31
 800bc56:	d501      	bpl.n	800bc5c <_printf_float+0x1a8>
 800bc58:	3302      	adds	r3, #2
 800bc5a:	e7f4      	b.n	800bc46 <_printf_float+0x192>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7f2      	b.n	800bc46 <_printf_float+0x192>
 800bc60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc66:	4299      	cmp	r1, r3
 800bc68:	db05      	blt.n	800bc76 <_printf_float+0x1c2>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	6121      	str	r1, [r4, #16]
 800bc6e:	07d8      	lsls	r0, r3, #31
 800bc70:	d5ea      	bpl.n	800bc48 <_printf_float+0x194>
 800bc72:	1c4b      	adds	r3, r1, #1
 800bc74:	e7e7      	b.n	800bc46 <_printf_float+0x192>
 800bc76:	2900      	cmp	r1, #0
 800bc78:	bfd4      	ite	le
 800bc7a:	f1c1 0202 	rsble	r2, r1, #2
 800bc7e:	2201      	movgt	r2, #1
 800bc80:	4413      	add	r3, r2
 800bc82:	e7e0      	b.n	800bc46 <_printf_float+0x192>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	055a      	lsls	r2, r3, #21
 800bc88:	d407      	bmi.n	800bc9a <_printf_float+0x1e6>
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	d12b      	bne.n	800bcf0 <_printf_float+0x23c>
 800bc98:	e767      	b.n	800bb6a <_printf_float+0xb6>
 800bc9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc9e:	f240 80dd 	bls.w	800be5c <_printf_float+0x3a8>
 800bca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bca6:	2200      	movs	r2, #0
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f7f4 ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d033      	beq.n	800bd1a <_printf_float+0x266>
 800bcb2:	4a37      	ldr	r2, [pc, #220]	@ (800bd90 <_printf_float+0x2dc>)
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b8      	blx	r7
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	f43f af54 	beq.w	800bb6a <_printf_float+0xb6>
 800bcc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcc6:	4543      	cmp	r3, r8
 800bcc8:	db02      	blt.n	800bcd0 <_printf_float+0x21c>
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	07d8      	lsls	r0, r3, #31
 800bcce:	d50f      	bpl.n	800bcf0 <_printf_float+0x23c>
 800bcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	47b8      	blx	r7
 800bcda:	3001      	adds	r0, #1
 800bcdc:	f43f af45 	beq.w	800bb6a <_printf_float+0xb6>
 800bce0:	f04f 0900 	mov.w	r9, #0
 800bce4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bce8:	f104 0a1a 	add.w	sl, r4, #26
 800bcec:	45c8      	cmp	r8, r9
 800bcee:	dc09      	bgt.n	800bd04 <_printf_float+0x250>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	079b      	lsls	r3, r3, #30
 800bcf4:	f100 8103 	bmi.w	800befe <_printf_float+0x44a>
 800bcf8:	68e0      	ldr	r0, [r4, #12]
 800bcfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcfc:	4298      	cmp	r0, r3
 800bcfe:	bfb8      	it	lt
 800bd00:	4618      	movlt	r0, r3
 800bd02:	e734      	b.n	800bb6e <_printf_float+0xba>
 800bd04:	2301      	movs	r3, #1
 800bd06:	4652      	mov	r2, sl
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b8      	blx	r7
 800bd0e:	3001      	adds	r0, #1
 800bd10:	f43f af2b 	beq.w	800bb6a <_printf_float+0xb6>
 800bd14:	f109 0901 	add.w	r9, r9, #1
 800bd18:	e7e8      	b.n	800bcec <_printf_float+0x238>
 800bd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dc39      	bgt.n	800bd94 <_printf_float+0x2e0>
 800bd20:	4a1b      	ldr	r2, [pc, #108]	@ (800bd90 <_printf_float+0x2dc>)
 800bd22:	2301      	movs	r3, #1
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	f43f af1d 	beq.w	800bb6a <_printf_float+0xb6>
 800bd30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd34:	ea59 0303 	orrs.w	r3, r9, r3
 800bd38:	d102      	bne.n	800bd40 <_printf_float+0x28c>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	07d9      	lsls	r1, r3, #31
 800bd3e:	d5d7      	bpl.n	800bcf0 <_printf_float+0x23c>
 800bd40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd44:	4631      	mov	r1, r6
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b8      	blx	r7
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	f43f af0d 	beq.w	800bb6a <_printf_float+0xb6>
 800bd50:	f04f 0a00 	mov.w	sl, #0
 800bd54:	f104 0b1a 	add.w	fp, r4, #26
 800bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5a:	425b      	negs	r3, r3
 800bd5c:	4553      	cmp	r3, sl
 800bd5e:	dc01      	bgt.n	800bd64 <_printf_float+0x2b0>
 800bd60:	464b      	mov	r3, r9
 800bd62:	e793      	b.n	800bc8c <_printf_float+0x1d8>
 800bd64:	2301      	movs	r3, #1
 800bd66:	465a      	mov	r2, fp
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f43f aefb 	beq.w	800bb6a <_printf_float+0xb6>
 800bd74:	f10a 0a01 	add.w	sl, sl, #1
 800bd78:	e7ee      	b.n	800bd58 <_printf_float+0x2a4>
 800bd7a:	bf00      	nop
 800bd7c:	7fefffff 	.word	0x7fefffff
 800bd80:	08012455 	.word	0x08012455
 800bd84:	08012459 	.word	0x08012459
 800bd88:	0801245d 	.word	0x0801245d
 800bd8c:	08012461 	.word	0x08012461
 800bd90:	08012465 	.word	0x08012465
 800bd94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd9a:	4553      	cmp	r3, sl
 800bd9c:	bfa8      	it	ge
 800bd9e:	4653      	movge	r3, sl
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	4699      	mov	r9, r3
 800bda4:	dc36      	bgt.n	800be14 <_printf_float+0x360>
 800bda6:	f04f 0b00 	mov.w	fp, #0
 800bdaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdae:	f104 021a 	add.w	r2, r4, #26
 800bdb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdb4:	9306      	str	r3, [sp, #24]
 800bdb6:	eba3 0309 	sub.w	r3, r3, r9
 800bdba:	455b      	cmp	r3, fp
 800bdbc:	dc31      	bgt.n	800be22 <_printf_float+0x36e>
 800bdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc0:	459a      	cmp	sl, r3
 800bdc2:	dc3a      	bgt.n	800be3a <_printf_float+0x386>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	07da      	lsls	r2, r3, #31
 800bdc8:	d437      	bmi.n	800be3a <_printf_float+0x386>
 800bdca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdcc:	ebaa 0903 	sub.w	r9, sl, r3
 800bdd0:	9b06      	ldr	r3, [sp, #24]
 800bdd2:	ebaa 0303 	sub.w	r3, sl, r3
 800bdd6:	4599      	cmp	r9, r3
 800bdd8:	bfa8      	it	ge
 800bdda:	4699      	movge	r9, r3
 800bddc:	f1b9 0f00 	cmp.w	r9, #0
 800bde0:	dc33      	bgt.n	800be4a <_printf_float+0x396>
 800bde2:	f04f 0800 	mov.w	r8, #0
 800bde6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdea:	f104 0b1a 	add.w	fp, r4, #26
 800bdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf0:	ebaa 0303 	sub.w	r3, sl, r3
 800bdf4:	eba3 0309 	sub.w	r3, r3, r9
 800bdf8:	4543      	cmp	r3, r8
 800bdfa:	f77f af79 	ble.w	800bcf0 <_printf_float+0x23c>
 800bdfe:	2301      	movs	r3, #1
 800be00:	465a      	mov	r2, fp
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f aeae 	beq.w	800bb6a <_printf_float+0xb6>
 800be0e:	f108 0801 	add.w	r8, r8, #1
 800be12:	e7ec      	b.n	800bdee <_printf_float+0x33a>
 800be14:	4642      	mov	r2, r8
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	d1c2      	bne.n	800bda6 <_printf_float+0x2f2>
 800be20:	e6a3      	b.n	800bb6a <_printf_float+0xb6>
 800be22:	2301      	movs	r3, #1
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	9206      	str	r2, [sp, #24]
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae9c 	beq.w	800bb6a <_printf_float+0xb6>
 800be32:	9a06      	ldr	r2, [sp, #24]
 800be34:	f10b 0b01 	add.w	fp, fp, #1
 800be38:	e7bb      	b.n	800bdb2 <_printf_float+0x2fe>
 800be3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be3e:	4631      	mov	r1, r6
 800be40:	4628      	mov	r0, r5
 800be42:	47b8      	blx	r7
 800be44:	3001      	adds	r0, #1
 800be46:	d1c0      	bne.n	800bdca <_printf_float+0x316>
 800be48:	e68f      	b.n	800bb6a <_printf_float+0xb6>
 800be4a:	9a06      	ldr	r2, [sp, #24]
 800be4c:	464b      	mov	r3, r9
 800be4e:	4442      	add	r2, r8
 800be50:	4631      	mov	r1, r6
 800be52:	4628      	mov	r0, r5
 800be54:	47b8      	blx	r7
 800be56:	3001      	adds	r0, #1
 800be58:	d1c3      	bne.n	800bde2 <_printf_float+0x32e>
 800be5a:	e686      	b.n	800bb6a <_printf_float+0xb6>
 800be5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be60:	f1ba 0f01 	cmp.w	sl, #1
 800be64:	dc01      	bgt.n	800be6a <_printf_float+0x3b6>
 800be66:	07db      	lsls	r3, r3, #31
 800be68:	d536      	bpl.n	800bed8 <_printf_float+0x424>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4642      	mov	r2, r8
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	f43f ae78 	beq.w	800bb6a <_printf_float+0xb6>
 800be7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	f43f ae70 	beq.w	800bb6a <_printf_float+0xb6>
 800be8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be8e:	2200      	movs	r2, #0
 800be90:	2300      	movs	r3, #0
 800be92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be96:	f7f4 fe27 	bl	8000ae8 <__aeabi_dcmpeq>
 800be9a:	b9c0      	cbnz	r0, 800bece <_printf_float+0x41a>
 800be9c:	4653      	mov	r3, sl
 800be9e:	f108 0201 	add.w	r2, r8, #1
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b8      	blx	r7
 800bea8:	3001      	adds	r0, #1
 800beaa:	d10c      	bne.n	800bec6 <_printf_float+0x412>
 800beac:	e65d      	b.n	800bb6a <_printf_float+0xb6>
 800beae:	2301      	movs	r3, #1
 800beb0:	465a      	mov	r2, fp
 800beb2:	4631      	mov	r1, r6
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b8      	blx	r7
 800beb8:	3001      	adds	r0, #1
 800beba:	f43f ae56 	beq.w	800bb6a <_printf_float+0xb6>
 800bebe:	f108 0801 	add.w	r8, r8, #1
 800bec2:	45d0      	cmp	r8, sl
 800bec4:	dbf3      	blt.n	800beae <_printf_float+0x3fa>
 800bec6:	464b      	mov	r3, r9
 800bec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800becc:	e6df      	b.n	800bc8e <_printf_float+0x1da>
 800bece:	f04f 0800 	mov.w	r8, #0
 800bed2:	f104 0b1a 	add.w	fp, r4, #26
 800bed6:	e7f4      	b.n	800bec2 <_printf_float+0x40e>
 800bed8:	2301      	movs	r3, #1
 800beda:	4642      	mov	r2, r8
 800bedc:	e7e1      	b.n	800bea2 <_printf_float+0x3ee>
 800bede:	2301      	movs	r3, #1
 800bee0:	464a      	mov	r2, r9
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	f43f ae3e 	beq.w	800bb6a <_printf_float+0xb6>
 800beee:	f108 0801 	add.w	r8, r8, #1
 800bef2:	68e3      	ldr	r3, [r4, #12]
 800bef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bef6:	1a5b      	subs	r3, r3, r1
 800bef8:	4543      	cmp	r3, r8
 800befa:	dcf0      	bgt.n	800bede <_printf_float+0x42a>
 800befc:	e6fc      	b.n	800bcf8 <_printf_float+0x244>
 800befe:	f04f 0800 	mov.w	r8, #0
 800bf02:	f104 0919 	add.w	r9, r4, #25
 800bf06:	e7f4      	b.n	800bef2 <_printf_float+0x43e>

0800bf08 <_printf_common>:
 800bf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	4698      	mov	r8, r3
 800bf10:	688a      	ldr	r2, [r1, #8]
 800bf12:	690b      	ldr	r3, [r1, #16]
 800bf14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	bfb8      	it	lt
 800bf1c:	4613      	movlt	r3, r2
 800bf1e:	6033      	str	r3, [r6, #0]
 800bf20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf24:	4607      	mov	r7, r0
 800bf26:	460c      	mov	r4, r1
 800bf28:	b10a      	cbz	r2, 800bf2e <_printf_common+0x26>
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	6033      	str	r3, [r6, #0]
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	0699      	lsls	r1, r3, #26
 800bf32:	bf42      	ittt	mi
 800bf34:	6833      	ldrmi	r3, [r6, #0]
 800bf36:	3302      	addmi	r3, #2
 800bf38:	6033      	strmi	r3, [r6, #0]
 800bf3a:	6825      	ldr	r5, [r4, #0]
 800bf3c:	f015 0506 	ands.w	r5, r5, #6
 800bf40:	d106      	bne.n	800bf50 <_printf_common+0x48>
 800bf42:	f104 0a19 	add.w	sl, r4, #25
 800bf46:	68e3      	ldr	r3, [r4, #12]
 800bf48:	6832      	ldr	r2, [r6, #0]
 800bf4a:	1a9b      	subs	r3, r3, r2
 800bf4c:	42ab      	cmp	r3, r5
 800bf4e:	dc26      	bgt.n	800bf9e <_printf_common+0x96>
 800bf50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf54:	6822      	ldr	r2, [r4, #0]
 800bf56:	3b00      	subs	r3, #0
 800bf58:	bf18      	it	ne
 800bf5a:	2301      	movne	r3, #1
 800bf5c:	0692      	lsls	r2, r2, #26
 800bf5e:	d42b      	bmi.n	800bfb8 <_printf_common+0xb0>
 800bf60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf64:	4641      	mov	r1, r8
 800bf66:	4638      	mov	r0, r7
 800bf68:	47c8      	blx	r9
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d01e      	beq.n	800bfac <_printf_common+0xa4>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	6922      	ldr	r2, [r4, #16]
 800bf72:	f003 0306 	and.w	r3, r3, #6
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	bf02      	ittt	eq
 800bf7a:	68e5      	ldreq	r5, [r4, #12]
 800bf7c:	6833      	ldreq	r3, [r6, #0]
 800bf7e:	1aed      	subeq	r5, r5, r3
 800bf80:	68a3      	ldr	r3, [r4, #8]
 800bf82:	bf0c      	ite	eq
 800bf84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf88:	2500      	movne	r5, #0
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	bfc4      	itt	gt
 800bf8e:	1a9b      	subgt	r3, r3, r2
 800bf90:	18ed      	addgt	r5, r5, r3
 800bf92:	2600      	movs	r6, #0
 800bf94:	341a      	adds	r4, #26
 800bf96:	42b5      	cmp	r5, r6
 800bf98:	d11a      	bne.n	800bfd0 <_printf_common+0xc8>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e008      	b.n	800bfb0 <_printf_common+0xa8>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4652      	mov	r2, sl
 800bfa2:	4641      	mov	r1, r8
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	47c8      	blx	r9
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d103      	bne.n	800bfb4 <_printf_common+0xac>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	e7c6      	b.n	800bf46 <_printf_common+0x3e>
 800bfb8:	18e1      	adds	r1, r4, r3
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	2030      	movs	r0, #48	@ 0x30
 800bfbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfc2:	4422      	add	r2, r4
 800bfc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfcc:	3302      	adds	r3, #2
 800bfce:	e7c7      	b.n	800bf60 <_printf_common+0x58>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4641      	mov	r1, r8
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	47c8      	blx	r9
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d0e6      	beq.n	800bfac <_printf_common+0xa4>
 800bfde:	3601      	adds	r6, #1
 800bfe0:	e7d9      	b.n	800bf96 <_printf_common+0x8e>
	...

0800bfe4 <_printf_i>:
 800bfe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	7e0f      	ldrb	r7, [r1, #24]
 800bfea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfec:	2f78      	cmp	r7, #120	@ 0x78
 800bfee:	4691      	mov	r9, r2
 800bff0:	4680      	mov	r8, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	469a      	mov	sl, r3
 800bff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bffa:	d807      	bhi.n	800c00c <_printf_i+0x28>
 800bffc:	2f62      	cmp	r7, #98	@ 0x62
 800bffe:	d80a      	bhi.n	800c016 <_printf_i+0x32>
 800c000:	2f00      	cmp	r7, #0
 800c002:	f000 80d2 	beq.w	800c1aa <_printf_i+0x1c6>
 800c006:	2f58      	cmp	r7, #88	@ 0x58
 800c008:	f000 80b9 	beq.w	800c17e <_printf_i+0x19a>
 800c00c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c014:	e03a      	b.n	800c08c <_printf_i+0xa8>
 800c016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c01a:	2b15      	cmp	r3, #21
 800c01c:	d8f6      	bhi.n	800c00c <_printf_i+0x28>
 800c01e:	a101      	add	r1, pc, #4	@ (adr r1, 800c024 <_printf_i+0x40>)
 800c020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c024:	0800c07d 	.word	0x0800c07d
 800c028:	0800c091 	.word	0x0800c091
 800c02c:	0800c00d 	.word	0x0800c00d
 800c030:	0800c00d 	.word	0x0800c00d
 800c034:	0800c00d 	.word	0x0800c00d
 800c038:	0800c00d 	.word	0x0800c00d
 800c03c:	0800c091 	.word	0x0800c091
 800c040:	0800c00d 	.word	0x0800c00d
 800c044:	0800c00d 	.word	0x0800c00d
 800c048:	0800c00d 	.word	0x0800c00d
 800c04c:	0800c00d 	.word	0x0800c00d
 800c050:	0800c191 	.word	0x0800c191
 800c054:	0800c0bb 	.word	0x0800c0bb
 800c058:	0800c14b 	.word	0x0800c14b
 800c05c:	0800c00d 	.word	0x0800c00d
 800c060:	0800c00d 	.word	0x0800c00d
 800c064:	0800c1b3 	.word	0x0800c1b3
 800c068:	0800c00d 	.word	0x0800c00d
 800c06c:	0800c0bb 	.word	0x0800c0bb
 800c070:	0800c00d 	.word	0x0800c00d
 800c074:	0800c00d 	.word	0x0800c00d
 800c078:	0800c153 	.word	0x0800c153
 800c07c:	6833      	ldr	r3, [r6, #0]
 800c07e:	1d1a      	adds	r2, r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6032      	str	r2, [r6, #0]
 800c084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c08c:	2301      	movs	r3, #1
 800c08e:	e09d      	b.n	800c1cc <_printf_i+0x1e8>
 800c090:	6833      	ldr	r3, [r6, #0]
 800c092:	6820      	ldr	r0, [r4, #0]
 800c094:	1d19      	adds	r1, r3, #4
 800c096:	6031      	str	r1, [r6, #0]
 800c098:	0606      	lsls	r6, r0, #24
 800c09a:	d501      	bpl.n	800c0a0 <_printf_i+0xbc>
 800c09c:	681d      	ldr	r5, [r3, #0]
 800c09e:	e003      	b.n	800c0a8 <_printf_i+0xc4>
 800c0a0:	0645      	lsls	r5, r0, #25
 800c0a2:	d5fb      	bpl.n	800c09c <_printf_i+0xb8>
 800c0a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0a8:	2d00      	cmp	r5, #0
 800c0aa:	da03      	bge.n	800c0b4 <_printf_i+0xd0>
 800c0ac:	232d      	movs	r3, #45	@ 0x2d
 800c0ae:	426d      	negs	r5, r5
 800c0b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b4:	4859      	ldr	r0, [pc, #356]	@ (800c21c <_printf_i+0x238>)
 800c0b6:	230a      	movs	r3, #10
 800c0b8:	e011      	b.n	800c0de <_printf_i+0xfa>
 800c0ba:	6821      	ldr	r1, [r4, #0]
 800c0bc:	6833      	ldr	r3, [r6, #0]
 800c0be:	0608      	lsls	r0, r1, #24
 800c0c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0c4:	d402      	bmi.n	800c0cc <_printf_i+0xe8>
 800c0c6:	0649      	lsls	r1, r1, #25
 800c0c8:	bf48      	it	mi
 800c0ca:	b2ad      	uxthmi	r5, r5
 800c0cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0ce:	4853      	ldr	r0, [pc, #332]	@ (800c21c <_printf_i+0x238>)
 800c0d0:	6033      	str	r3, [r6, #0]
 800c0d2:	bf14      	ite	ne
 800c0d4:	230a      	movne	r3, #10
 800c0d6:	2308      	moveq	r3, #8
 800c0d8:	2100      	movs	r1, #0
 800c0da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0de:	6866      	ldr	r6, [r4, #4]
 800c0e0:	60a6      	str	r6, [r4, #8]
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	bfa2      	ittt	ge
 800c0e6:	6821      	ldrge	r1, [r4, #0]
 800c0e8:	f021 0104 	bicge.w	r1, r1, #4
 800c0ec:	6021      	strge	r1, [r4, #0]
 800c0ee:	b90d      	cbnz	r5, 800c0f4 <_printf_i+0x110>
 800c0f0:	2e00      	cmp	r6, #0
 800c0f2:	d04b      	beq.n	800c18c <_printf_i+0x1a8>
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0fa:	fb03 5711 	mls	r7, r3, r1, r5
 800c0fe:	5dc7      	ldrb	r7, [r0, r7]
 800c100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c104:	462f      	mov	r7, r5
 800c106:	42bb      	cmp	r3, r7
 800c108:	460d      	mov	r5, r1
 800c10a:	d9f4      	bls.n	800c0f6 <_printf_i+0x112>
 800c10c:	2b08      	cmp	r3, #8
 800c10e:	d10b      	bne.n	800c128 <_printf_i+0x144>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	07df      	lsls	r7, r3, #31
 800c114:	d508      	bpl.n	800c128 <_printf_i+0x144>
 800c116:	6923      	ldr	r3, [r4, #16]
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	4299      	cmp	r1, r3
 800c11c:	bfde      	ittt	le
 800c11e:	2330      	movle	r3, #48	@ 0x30
 800c120:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c124:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c128:	1b92      	subs	r2, r2, r6
 800c12a:	6122      	str	r2, [r4, #16]
 800c12c:	f8cd a000 	str.w	sl, [sp]
 800c130:	464b      	mov	r3, r9
 800c132:	aa03      	add	r2, sp, #12
 800c134:	4621      	mov	r1, r4
 800c136:	4640      	mov	r0, r8
 800c138:	f7ff fee6 	bl	800bf08 <_printf_common>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d14a      	bne.n	800c1d6 <_printf_i+0x1f2>
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	b004      	add	sp, #16
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	f043 0320 	orr.w	r3, r3, #32
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	4833      	ldr	r0, [pc, #204]	@ (800c220 <_printf_i+0x23c>)
 800c154:	2778      	movs	r7, #120	@ 0x78
 800c156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	6831      	ldr	r1, [r6, #0]
 800c15e:	061f      	lsls	r7, r3, #24
 800c160:	f851 5b04 	ldr.w	r5, [r1], #4
 800c164:	d402      	bmi.n	800c16c <_printf_i+0x188>
 800c166:	065f      	lsls	r7, r3, #25
 800c168:	bf48      	it	mi
 800c16a:	b2ad      	uxthmi	r5, r5
 800c16c:	6031      	str	r1, [r6, #0]
 800c16e:	07d9      	lsls	r1, r3, #31
 800c170:	bf44      	itt	mi
 800c172:	f043 0320 	orrmi.w	r3, r3, #32
 800c176:	6023      	strmi	r3, [r4, #0]
 800c178:	b11d      	cbz	r5, 800c182 <_printf_i+0x19e>
 800c17a:	2310      	movs	r3, #16
 800c17c:	e7ac      	b.n	800c0d8 <_printf_i+0xf4>
 800c17e:	4827      	ldr	r0, [pc, #156]	@ (800c21c <_printf_i+0x238>)
 800c180:	e7e9      	b.n	800c156 <_printf_i+0x172>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	f023 0320 	bic.w	r3, r3, #32
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	e7f6      	b.n	800c17a <_printf_i+0x196>
 800c18c:	4616      	mov	r6, r2
 800c18e:	e7bd      	b.n	800c10c <_printf_i+0x128>
 800c190:	6833      	ldr	r3, [r6, #0]
 800c192:	6825      	ldr	r5, [r4, #0]
 800c194:	6961      	ldr	r1, [r4, #20]
 800c196:	1d18      	adds	r0, r3, #4
 800c198:	6030      	str	r0, [r6, #0]
 800c19a:	062e      	lsls	r6, r5, #24
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	d501      	bpl.n	800c1a4 <_printf_i+0x1c0>
 800c1a0:	6019      	str	r1, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <_printf_i+0x1c6>
 800c1a4:	0668      	lsls	r0, r5, #25
 800c1a6:	d5fb      	bpl.n	800c1a0 <_printf_i+0x1bc>
 800c1a8:	8019      	strh	r1, [r3, #0]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6123      	str	r3, [r4, #16]
 800c1ae:	4616      	mov	r6, r2
 800c1b0:	e7bc      	b.n	800c12c <_printf_i+0x148>
 800c1b2:	6833      	ldr	r3, [r6, #0]
 800c1b4:	1d1a      	adds	r2, r3, #4
 800c1b6:	6032      	str	r2, [r6, #0]
 800c1b8:	681e      	ldr	r6, [r3, #0]
 800c1ba:	6862      	ldr	r2, [r4, #4]
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7f4 f816 	bl	80001f0 <memchr>
 800c1c4:	b108      	cbz	r0, 800c1ca <_printf_i+0x1e6>
 800c1c6:	1b80      	subs	r0, r0, r6
 800c1c8:	6060      	str	r0, [r4, #4]
 800c1ca:	6863      	ldr	r3, [r4, #4]
 800c1cc:	6123      	str	r3, [r4, #16]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d4:	e7aa      	b.n	800c12c <_printf_i+0x148>
 800c1d6:	6923      	ldr	r3, [r4, #16]
 800c1d8:	4632      	mov	r2, r6
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4640      	mov	r0, r8
 800c1de:	47d0      	blx	sl
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d0ad      	beq.n	800c140 <_printf_i+0x15c>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	079b      	lsls	r3, r3, #30
 800c1e8:	d413      	bmi.n	800c212 <_printf_i+0x22e>
 800c1ea:	68e0      	ldr	r0, [r4, #12]
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	4298      	cmp	r0, r3
 800c1f0:	bfb8      	it	lt
 800c1f2:	4618      	movlt	r0, r3
 800c1f4:	e7a6      	b.n	800c144 <_printf_i+0x160>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4632      	mov	r2, r6
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	47d0      	blx	sl
 800c200:	3001      	adds	r0, #1
 800c202:	d09d      	beq.n	800c140 <_printf_i+0x15c>
 800c204:	3501      	adds	r5, #1
 800c206:	68e3      	ldr	r3, [r4, #12]
 800c208:	9903      	ldr	r1, [sp, #12]
 800c20a:	1a5b      	subs	r3, r3, r1
 800c20c:	42ab      	cmp	r3, r5
 800c20e:	dcf2      	bgt.n	800c1f6 <_printf_i+0x212>
 800c210:	e7eb      	b.n	800c1ea <_printf_i+0x206>
 800c212:	2500      	movs	r5, #0
 800c214:	f104 0619 	add.w	r6, r4, #25
 800c218:	e7f5      	b.n	800c206 <_printf_i+0x222>
 800c21a:	bf00      	nop
 800c21c:	08012467 	.word	0x08012467
 800c220:	08012478 	.word	0x08012478

0800c224 <_scanf_float>:
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	b087      	sub	sp, #28
 800c22a:	4617      	mov	r7, r2
 800c22c:	9303      	str	r3, [sp, #12]
 800c22e:	688b      	ldr	r3, [r1, #8]
 800c230:	1e5a      	subs	r2, r3, #1
 800c232:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c236:	bf81      	itttt	hi
 800c238:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c23c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c240:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c244:	608b      	strhi	r3, [r1, #8]
 800c246:	680b      	ldr	r3, [r1, #0]
 800c248:	460a      	mov	r2, r1
 800c24a:	f04f 0500 	mov.w	r5, #0
 800c24e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c252:	f842 3b1c 	str.w	r3, [r2], #28
 800c256:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c25a:	4680      	mov	r8, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	bf98      	it	ls
 800c260:	f04f 0b00 	movls.w	fp, #0
 800c264:	9201      	str	r2, [sp, #4]
 800c266:	4616      	mov	r6, r2
 800c268:	46aa      	mov	sl, r5
 800c26a:	46a9      	mov	r9, r5
 800c26c:	9502      	str	r5, [sp, #8]
 800c26e:	68a2      	ldr	r2, [r4, #8]
 800c270:	b152      	cbz	r2, 800c288 <_scanf_float+0x64>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2b4e      	cmp	r3, #78	@ 0x4e
 800c278:	d864      	bhi.n	800c344 <_scanf_float+0x120>
 800c27a:	2b40      	cmp	r3, #64	@ 0x40
 800c27c:	d83c      	bhi.n	800c2f8 <_scanf_float+0xd4>
 800c27e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c282:	b2c8      	uxtb	r0, r1
 800c284:	280e      	cmp	r0, #14
 800c286:	d93a      	bls.n	800c2fe <_scanf_float+0xda>
 800c288:	f1b9 0f00 	cmp.w	r9, #0
 800c28c:	d003      	beq.n	800c296 <_scanf_float+0x72>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c29a:	f1ba 0f01 	cmp.w	sl, #1
 800c29e:	f200 8117 	bhi.w	800c4d0 <_scanf_float+0x2ac>
 800c2a2:	9b01      	ldr	r3, [sp, #4]
 800c2a4:	429e      	cmp	r6, r3
 800c2a6:	f200 8108 	bhi.w	800c4ba <_scanf_float+0x296>
 800c2aa:	2001      	movs	r0, #1
 800c2ac:	b007      	add	sp, #28
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c2b6:	2a0d      	cmp	r2, #13
 800c2b8:	d8e6      	bhi.n	800c288 <_scanf_float+0x64>
 800c2ba:	a101      	add	r1, pc, #4	@ (adr r1, 800c2c0 <_scanf_float+0x9c>)
 800c2bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2c0:	0800c407 	.word	0x0800c407
 800c2c4:	0800c289 	.word	0x0800c289
 800c2c8:	0800c289 	.word	0x0800c289
 800c2cc:	0800c289 	.word	0x0800c289
 800c2d0:	0800c467 	.word	0x0800c467
 800c2d4:	0800c43f 	.word	0x0800c43f
 800c2d8:	0800c289 	.word	0x0800c289
 800c2dc:	0800c289 	.word	0x0800c289
 800c2e0:	0800c415 	.word	0x0800c415
 800c2e4:	0800c289 	.word	0x0800c289
 800c2e8:	0800c289 	.word	0x0800c289
 800c2ec:	0800c289 	.word	0x0800c289
 800c2f0:	0800c289 	.word	0x0800c289
 800c2f4:	0800c3cd 	.word	0x0800c3cd
 800c2f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c2fc:	e7db      	b.n	800c2b6 <_scanf_float+0x92>
 800c2fe:	290e      	cmp	r1, #14
 800c300:	d8c2      	bhi.n	800c288 <_scanf_float+0x64>
 800c302:	a001      	add	r0, pc, #4	@ (adr r0, 800c308 <_scanf_float+0xe4>)
 800c304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c308:	0800c3bd 	.word	0x0800c3bd
 800c30c:	0800c289 	.word	0x0800c289
 800c310:	0800c3bd 	.word	0x0800c3bd
 800c314:	0800c453 	.word	0x0800c453
 800c318:	0800c289 	.word	0x0800c289
 800c31c:	0800c365 	.word	0x0800c365
 800c320:	0800c3a3 	.word	0x0800c3a3
 800c324:	0800c3a3 	.word	0x0800c3a3
 800c328:	0800c3a3 	.word	0x0800c3a3
 800c32c:	0800c3a3 	.word	0x0800c3a3
 800c330:	0800c3a3 	.word	0x0800c3a3
 800c334:	0800c3a3 	.word	0x0800c3a3
 800c338:	0800c3a3 	.word	0x0800c3a3
 800c33c:	0800c3a3 	.word	0x0800c3a3
 800c340:	0800c3a3 	.word	0x0800c3a3
 800c344:	2b6e      	cmp	r3, #110	@ 0x6e
 800c346:	d809      	bhi.n	800c35c <_scanf_float+0x138>
 800c348:	2b60      	cmp	r3, #96	@ 0x60
 800c34a:	d8b2      	bhi.n	800c2b2 <_scanf_float+0x8e>
 800c34c:	2b54      	cmp	r3, #84	@ 0x54
 800c34e:	d07b      	beq.n	800c448 <_scanf_float+0x224>
 800c350:	2b59      	cmp	r3, #89	@ 0x59
 800c352:	d199      	bne.n	800c288 <_scanf_float+0x64>
 800c354:	2d07      	cmp	r5, #7
 800c356:	d197      	bne.n	800c288 <_scanf_float+0x64>
 800c358:	2508      	movs	r5, #8
 800c35a:	e02c      	b.n	800c3b6 <_scanf_float+0x192>
 800c35c:	2b74      	cmp	r3, #116	@ 0x74
 800c35e:	d073      	beq.n	800c448 <_scanf_float+0x224>
 800c360:	2b79      	cmp	r3, #121	@ 0x79
 800c362:	e7f6      	b.n	800c352 <_scanf_float+0x12e>
 800c364:	6821      	ldr	r1, [r4, #0]
 800c366:	05c8      	lsls	r0, r1, #23
 800c368:	d51b      	bpl.n	800c3a2 <_scanf_float+0x17e>
 800c36a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c36e:	6021      	str	r1, [r4, #0]
 800c370:	f109 0901 	add.w	r9, r9, #1
 800c374:	f1bb 0f00 	cmp.w	fp, #0
 800c378:	d003      	beq.n	800c382 <_scanf_float+0x15e>
 800c37a:	3201      	adds	r2, #1
 800c37c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c380:	60a2      	str	r2, [r4, #8]
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	3b01      	subs	r3, #1
 800c386:	60a3      	str	r3, [r4, #8]
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	3301      	adds	r3, #1
 800c38c:	6123      	str	r3, [r4, #16]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3b01      	subs	r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	607b      	str	r3, [r7, #4]
 800c396:	f340 8087 	ble.w	800c4a8 <_scanf_float+0x284>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	3301      	adds	r3, #1
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	e765      	b.n	800c26e <_scanf_float+0x4a>
 800c3a2:	eb1a 0105 	adds.w	r1, sl, r5
 800c3a6:	f47f af6f 	bne.w	800c288 <_scanf_float+0x64>
 800c3aa:	6822      	ldr	r2, [r4, #0]
 800c3ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c3b0:	6022      	str	r2, [r4, #0]
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	468a      	mov	sl, r1
 800c3b6:	f806 3b01 	strb.w	r3, [r6], #1
 800c3ba:	e7e2      	b.n	800c382 <_scanf_float+0x15e>
 800c3bc:	6822      	ldr	r2, [r4, #0]
 800c3be:	0610      	lsls	r0, r2, #24
 800c3c0:	f57f af62 	bpl.w	800c288 <_scanf_float+0x64>
 800c3c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3c8:	6022      	str	r2, [r4, #0]
 800c3ca:	e7f4      	b.n	800c3b6 <_scanf_float+0x192>
 800c3cc:	f1ba 0f00 	cmp.w	sl, #0
 800c3d0:	d10e      	bne.n	800c3f0 <_scanf_float+0x1cc>
 800c3d2:	f1b9 0f00 	cmp.w	r9, #0
 800c3d6:	d10e      	bne.n	800c3f6 <_scanf_float+0x1d2>
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c3de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c3e2:	d108      	bne.n	800c3f6 <_scanf_float+0x1d2>
 800c3e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3e8:	6022      	str	r2, [r4, #0]
 800c3ea:	f04f 0a01 	mov.w	sl, #1
 800c3ee:	e7e2      	b.n	800c3b6 <_scanf_float+0x192>
 800c3f0:	f1ba 0f02 	cmp.w	sl, #2
 800c3f4:	d055      	beq.n	800c4a2 <_scanf_float+0x27e>
 800c3f6:	2d01      	cmp	r5, #1
 800c3f8:	d002      	beq.n	800c400 <_scanf_float+0x1dc>
 800c3fa:	2d04      	cmp	r5, #4
 800c3fc:	f47f af44 	bne.w	800c288 <_scanf_float+0x64>
 800c400:	3501      	adds	r5, #1
 800c402:	b2ed      	uxtb	r5, r5
 800c404:	e7d7      	b.n	800c3b6 <_scanf_float+0x192>
 800c406:	f1ba 0f01 	cmp.w	sl, #1
 800c40a:	f47f af3d 	bne.w	800c288 <_scanf_float+0x64>
 800c40e:	f04f 0a02 	mov.w	sl, #2
 800c412:	e7d0      	b.n	800c3b6 <_scanf_float+0x192>
 800c414:	b97d      	cbnz	r5, 800c436 <_scanf_float+0x212>
 800c416:	f1b9 0f00 	cmp.w	r9, #0
 800c41a:	f47f af38 	bne.w	800c28e <_scanf_float+0x6a>
 800c41e:	6822      	ldr	r2, [r4, #0]
 800c420:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c424:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c428:	f040 8108 	bne.w	800c63c <_scanf_float+0x418>
 800c42c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	2501      	movs	r5, #1
 800c434:	e7bf      	b.n	800c3b6 <_scanf_float+0x192>
 800c436:	2d03      	cmp	r5, #3
 800c438:	d0e2      	beq.n	800c400 <_scanf_float+0x1dc>
 800c43a:	2d05      	cmp	r5, #5
 800c43c:	e7de      	b.n	800c3fc <_scanf_float+0x1d8>
 800c43e:	2d02      	cmp	r5, #2
 800c440:	f47f af22 	bne.w	800c288 <_scanf_float+0x64>
 800c444:	2503      	movs	r5, #3
 800c446:	e7b6      	b.n	800c3b6 <_scanf_float+0x192>
 800c448:	2d06      	cmp	r5, #6
 800c44a:	f47f af1d 	bne.w	800c288 <_scanf_float+0x64>
 800c44e:	2507      	movs	r5, #7
 800c450:	e7b1      	b.n	800c3b6 <_scanf_float+0x192>
 800c452:	6822      	ldr	r2, [r4, #0]
 800c454:	0591      	lsls	r1, r2, #22
 800c456:	f57f af17 	bpl.w	800c288 <_scanf_float+0x64>
 800c45a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c45e:	6022      	str	r2, [r4, #0]
 800c460:	f8cd 9008 	str.w	r9, [sp, #8]
 800c464:	e7a7      	b.n	800c3b6 <_scanf_float+0x192>
 800c466:	6822      	ldr	r2, [r4, #0]
 800c468:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c46c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c470:	d006      	beq.n	800c480 <_scanf_float+0x25c>
 800c472:	0550      	lsls	r0, r2, #21
 800c474:	f57f af08 	bpl.w	800c288 <_scanf_float+0x64>
 800c478:	f1b9 0f00 	cmp.w	r9, #0
 800c47c:	f000 80de 	beq.w	800c63c <_scanf_float+0x418>
 800c480:	0591      	lsls	r1, r2, #22
 800c482:	bf58      	it	pl
 800c484:	9902      	ldrpl	r1, [sp, #8]
 800c486:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c48a:	bf58      	it	pl
 800c48c:	eba9 0101 	subpl.w	r1, r9, r1
 800c490:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c494:	bf58      	it	pl
 800c496:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	f04f 0900 	mov.w	r9, #0
 800c4a0:	e789      	b.n	800c3b6 <_scanf_float+0x192>
 800c4a2:	f04f 0a03 	mov.w	sl, #3
 800c4a6:	e786      	b.n	800c3b6 <_scanf_float+0x192>
 800c4a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4798      	blx	r3
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	f43f aedb 	beq.w	800c26e <_scanf_float+0x4a>
 800c4b8:	e6e6      	b.n	800c288 <_scanf_float+0x64>
 800c4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4c2:	463a      	mov	r2, r7
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	4798      	blx	r3
 800c4c8:	6923      	ldr	r3, [r4, #16]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	6123      	str	r3, [r4, #16]
 800c4ce:	e6e8      	b.n	800c2a2 <_scanf_float+0x7e>
 800c4d0:	1e6b      	subs	r3, r5, #1
 800c4d2:	2b06      	cmp	r3, #6
 800c4d4:	d824      	bhi.n	800c520 <_scanf_float+0x2fc>
 800c4d6:	2d02      	cmp	r5, #2
 800c4d8:	d836      	bhi.n	800c548 <_scanf_float+0x324>
 800c4da:	9b01      	ldr	r3, [sp, #4]
 800c4dc:	429e      	cmp	r6, r3
 800c4de:	f67f aee4 	bls.w	800c2aa <_scanf_float+0x86>
 800c4e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4ea:	463a      	mov	r2, r7
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	4798      	blx	r3
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	6123      	str	r3, [r4, #16]
 800c4f6:	e7f0      	b.n	800c4da <_scanf_float+0x2b6>
 800c4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c500:	463a      	mov	r2, r7
 800c502:	4640      	mov	r0, r8
 800c504:	4798      	blx	r3
 800c506:	6923      	ldr	r3, [r4, #16]
 800c508:	3b01      	subs	r3, #1
 800c50a:	6123      	str	r3, [r4, #16]
 800c50c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c510:	fa5f fa8a 	uxtb.w	sl, sl
 800c514:	f1ba 0f02 	cmp.w	sl, #2
 800c518:	d1ee      	bne.n	800c4f8 <_scanf_float+0x2d4>
 800c51a:	3d03      	subs	r5, #3
 800c51c:	b2ed      	uxtb	r5, r5
 800c51e:	1b76      	subs	r6, r6, r5
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	05da      	lsls	r2, r3, #23
 800c524:	d530      	bpl.n	800c588 <_scanf_float+0x364>
 800c526:	055b      	lsls	r3, r3, #21
 800c528:	d511      	bpl.n	800c54e <_scanf_float+0x32a>
 800c52a:	9b01      	ldr	r3, [sp, #4]
 800c52c:	429e      	cmp	r6, r3
 800c52e:	f67f aebc 	bls.w	800c2aa <_scanf_float+0x86>
 800c532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c53a:	463a      	mov	r2, r7
 800c53c:	4640      	mov	r0, r8
 800c53e:	4798      	blx	r3
 800c540:	6923      	ldr	r3, [r4, #16]
 800c542:	3b01      	subs	r3, #1
 800c544:	6123      	str	r3, [r4, #16]
 800c546:	e7f0      	b.n	800c52a <_scanf_float+0x306>
 800c548:	46aa      	mov	sl, r5
 800c54a:	46b3      	mov	fp, r6
 800c54c:	e7de      	b.n	800c50c <_scanf_float+0x2e8>
 800c54e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	2965      	cmp	r1, #101	@ 0x65
 800c556:	f103 33ff 	add.w	r3, r3, #4294967295
 800c55a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c55e:	6123      	str	r3, [r4, #16]
 800c560:	d00c      	beq.n	800c57c <_scanf_float+0x358>
 800c562:	2945      	cmp	r1, #69	@ 0x45
 800c564:	d00a      	beq.n	800c57c <_scanf_float+0x358>
 800c566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c56a:	463a      	mov	r2, r7
 800c56c:	4640      	mov	r0, r8
 800c56e:	4798      	blx	r3
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c576:	3b01      	subs	r3, #1
 800c578:	1eb5      	subs	r5, r6, #2
 800c57a:	6123      	str	r3, [r4, #16]
 800c57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c580:	463a      	mov	r2, r7
 800c582:	4640      	mov	r0, r8
 800c584:	4798      	blx	r3
 800c586:	462e      	mov	r6, r5
 800c588:	6822      	ldr	r2, [r4, #0]
 800c58a:	f012 0210 	ands.w	r2, r2, #16
 800c58e:	d001      	beq.n	800c594 <_scanf_float+0x370>
 800c590:	2000      	movs	r0, #0
 800c592:	e68b      	b.n	800c2ac <_scanf_float+0x88>
 800c594:	7032      	strb	r2, [r6, #0]
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c59c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5a0:	d11c      	bne.n	800c5dc <_scanf_float+0x3b8>
 800c5a2:	9b02      	ldr	r3, [sp, #8]
 800c5a4:	454b      	cmp	r3, r9
 800c5a6:	eba3 0209 	sub.w	r2, r3, r9
 800c5aa:	d123      	bne.n	800c5f4 <_scanf_float+0x3d0>
 800c5ac:	9901      	ldr	r1, [sp, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	f002 fbe9 	bl	800ed88 <_strtod_r>
 800c5b6:	9b03      	ldr	r3, [sp, #12]
 800c5b8:	6821      	ldr	r1, [r4, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f011 0f02 	tst.w	r1, #2
 800c5c0:	ec57 6b10 	vmov	r6, r7, d0
 800c5c4:	f103 0204 	add.w	r2, r3, #4
 800c5c8:	d01f      	beq.n	800c60a <_scanf_float+0x3e6>
 800c5ca:	9903      	ldr	r1, [sp, #12]
 800c5cc:	600a      	str	r2, [r1, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	e9c3 6700 	strd	r6, r7, [r3]
 800c5d4:	68e3      	ldr	r3, [r4, #12]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	60e3      	str	r3, [r4, #12]
 800c5da:	e7d9      	b.n	800c590 <_scanf_float+0x36c>
 800c5dc:	9b04      	ldr	r3, [sp, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0e4      	beq.n	800c5ac <_scanf_float+0x388>
 800c5e2:	9905      	ldr	r1, [sp, #20]
 800c5e4:	230a      	movs	r3, #10
 800c5e6:	3101      	adds	r1, #1
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	f002 fc4d 	bl	800ee88 <_strtol_r>
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	9e05      	ldr	r6, [sp, #20]
 800c5f2:	1ac2      	subs	r2, r0, r3
 800c5f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c5f8:	429e      	cmp	r6, r3
 800c5fa:	bf28      	it	cs
 800c5fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c600:	4910      	ldr	r1, [pc, #64]	@ (800c644 <_scanf_float+0x420>)
 800c602:	4630      	mov	r0, r6
 800c604:	f000 f8e4 	bl	800c7d0 <siprintf>
 800c608:	e7d0      	b.n	800c5ac <_scanf_float+0x388>
 800c60a:	f011 0f04 	tst.w	r1, #4
 800c60e:	9903      	ldr	r1, [sp, #12]
 800c610:	600a      	str	r2, [r1, #0]
 800c612:	d1dc      	bne.n	800c5ce <_scanf_float+0x3aa>
 800c614:	681d      	ldr	r5, [r3, #0]
 800c616:	4632      	mov	r2, r6
 800c618:	463b      	mov	r3, r7
 800c61a:	4630      	mov	r0, r6
 800c61c:	4639      	mov	r1, r7
 800c61e:	f7f4 fa95 	bl	8000b4c <__aeabi_dcmpun>
 800c622:	b128      	cbz	r0, 800c630 <_scanf_float+0x40c>
 800c624:	4808      	ldr	r0, [pc, #32]	@ (800c648 <_scanf_float+0x424>)
 800c626:	f000 fa5b 	bl	800cae0 <nanf>
 800c62a:	ed85 0a00 	vstr	s0, [r5]
 800c62e:	e7d1      	b.n	800c5d4 <_scanf_float+0x3b0>
 800c630:	4630      	mov	r0, r6
 800c632:	4639      	mov	r1, r7
 800c634:	f7f4 fae8 	bl	8000c08 <__aeabi_d2f>
 800c638:	6028      	str	r0, [r5, #0]
 800c63a:	e7cb      	b.n	800c5d4 <_scanf_float+0x3b0>
 800c63c:	f04f 0900 	mov.w	r9, #0
 800c640:	e629      	b.n	800c296 <_scanf_float+0x72>
 800c642:	bf00      	nop
 800c644:	08012489 	.word	0x08012489
 800c648:	0801281d 	.word	0x0801281d

0800c64c <std>:
 800c64c:	2300      	movs	r3, #0
 800c64e:	b510      	push	{r4, lr}
 800c650:	4604      	mov	r4, r0
 800c652:	e9c0 3300 	strd	r3, r3, [r0]
 800c656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c65a:	6083      	str	r3, [r0, #8]
 800c65c:	8181      	strh	r1, [r0, #12]
 800c65e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c660:	81c2      	strh	r2, [r0, #14]
 800c662:	6183      	str	r3, [r0, #24]
 800c664:	4619      	mov	r1, r3
 800c666:	2208      	movs	r2, #8
 800c668:	305c      	adds	r0, #92	@ 0x5c
 800c66a:	f000 f92e 	bl	800c8ca <memset>
 800c66e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a4 <std+0x58>)
 800c670:	6263      	str	r3, [r4, #36]	@ 0x24
 800c672:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a8 <std+0x5c>)
 800c674:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c676:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ac <std+0x60>)
 800c678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c67a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b0 <std+0x64>)
 800c67c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c67e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b4 <std+0x68>)
 800c680:	6224      	str	r4, [r4, #32]
 800c682:	429c      	cmp	r4, r3
 800c684:	d006      	beq.n	800c694 <std+0x48>
 800c686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c68a:	4294      	cmp	r4, r2
 800c68c:	d002      	beq.n	800c694 <std+0x48>
 800c68e:	33d0      	adds	r3, #208	@ 0xd0
 800c690:	429c      	cmp	r4, r3
 800c692:	d105      	bne.n	800c6a0 <std+0x54>
 800c694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c69c:	f000 ba06 	b.w	800caac <__retarget_lock_init_recursive>
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	bf00      	nop
 800c6a4:	0800c811 	.word	0x0800c811
 800c6a8:	0800c833 	.word	0x0800c833
 800c6ac:	0800c86b 	.word	0x0800c86b
 800c6b0:	0800c88f 	.word	0x0800c88f
 800c6b4:	20009ec8 	.word	0x20009ec8

0800c6b8 <stdio_exit_handler>:
 800c6b8:	4a02      	ldr	r2, [pc, #8]	@ (800c6c4 <stdio_exit_handler+0xc>)
 800c6ba:	4903      	ldr	r1, [pc, #12]	@ (800c6c8 <stdio_exit_handler+0x10>)
 800c6bc:	4803      	ldr	r0, [pc, #12]	@ (800c6cc <stdio_exit_handler+0x14>)
 800c6be:	f000 b869 	b.w	800c794 <_fwalk_sglue>
 800c6c2:	bf00      	nop
 800c6c4:	20000044 	.word	0x20000044
 800c6c8:	0800f245 	.word	0x0800f245
 800c6cc:	20000054 	.word	0x20000054

0800c6d0 <cleanup_stdio>:
 800c6d0:	6841      	ldr	r1, [r0, #4]
 800c6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c704 <cleanup_stdio+0x34>)
 800c6d4:	4299      	cmp	r1, r3
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	4604      	mov	r4, r0
 800c6da:	d001      	beq.n	800c6e0 <cleanup_stdio+0x10>
 800c6dc:	f002 fdb2 	bl	800f244 <_fflush_r>
 800c6e0:	68a1      	ldr	r1, [r4, #8]
 800c6e2:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <cleanup_stdio+0x38>)
 800c6e4:	4299      	cmp	r1, r3
 800c6e6:	d002      	beq.n	800c6ee <cleanup_stdio+0x1e>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f002 fdab 	bl	800f244 <_fflush_r>
 800c6ee:	68e1      	ldr	r1, [r4, #12]
 800c6f0:	4b06      	ldr	r3, [pc, #24]	@ (800c70c <cleanup_stdio+0x3c>)
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	d004      	beq.n	800c700 <cleanup_stdio+0x30>
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fc:	f002 bda2 	b.w	800f244 <_fflush_r>
 800c700:	bd10      	pop	{r4, pc}
 800c702:	bf00      	nop
 800c704:	20009ec8 	.word	0x20009ec8
 800c708:	20009f30 	.word	0x20009f30
 800c70c:	20009f98 	.word	0x20009f98

0800c710 <global_stdio_init.part.0>:
 800c710:	b510      	push	{r4, lr}
 800c712:	4b0b      	ldr	r3, [pc, #44]	@ (800c740 <global_stdio_init.part.0+0x30>)
 800c714:	4c0b      	ldr	r4, [pc, #44]	@ (800c744 <global_stdio_init.part.0+0x34>)
 800c716:	4a0c      	ldr	r2, [pc, #48]	@ (800c748 <global_stdio_init.part.0+0x38>)
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	4620      	mov	r0, r4
 800c71c:	2200      	movs	r2, #0
 800c71e:	2104      	movs	r1, #4
 800c720:	f7ff ff94 	bl	800c64c <std>
 800c724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c728:	2201      	movs	r2, #1
 800c72a:	2109      	movs	r1, #9
 800c72c:	f7ff ff8e 	bl	800c64c <std>
 800c730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c734:	2202      	movs	r2, #2
 800c736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73a:	2112      	movs	r1, #18
 800c73c:	f7ff bf86 	b.w	800c64c <std>
 800c740:	2000a000 	.word	0x2000a000
 800c744:	20009ec8 	.word	0x20009ec8
 800c748:	0800c6b9 	.word	0x0800c6b9

0800c74c <__sfp_lock_acquire>:
 800c74c:	4801      	ldr	r0, [pc, #4]	@ (800c754 <__sfp_lock_acquire+0x8>)
 800c74e:	f000 b9ae 	b.w	800caae <__retarget_lock_acquire_recursive>
 800c752:	bf00      	nop
 800c754:	2000a009 	.word	0x2000a009

0800c758 <__sfp_lock_release>:
 800c758:	4801      	ldr	r0, [pc, #4]	@ (800c760 <__sfp_lock_release+0x8>)
 800c75a:	f000 b9a9 	b.w	800cab0 <__retarget_lock_release_recursive>
 800c75e:	bf00      	nop
 800c760:	2000a009 	.word	0x2000a009

0800c764 <__sinit>:
 800c764:	b510      	push	{r4, lr}
 800c766:	4604      	mov	r4, r0
 800c768:	f7ff fff0 	bl	800c74c <__sfp_lock_acquire>
 800c76c:	6a23      	ldr	r3, [r4, #32]
 800c76e:	b11b      	cbz	r3, 800c778 <__sinit+0x14>
 800c770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c774:	f7ff bff0 	b.w	800c758 <__sfp_lock_release>
 800c778:	4b04      	ldr	r3, [pc, #16]	@ (800c78c <__sinit+0x28>)
 800c77a:	6223      	str	r3, [r4, #32]
 800c77c:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <__sinit+0x2c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1f5      	bne.n	800c770 <__sinit+0xc>
 800c784:	f7ff ffc4 	bl	800c710 <global_stdio_init.part.0>
 800c788:	e7f2      	b.n	800c770 <__sinit+0xc>
 800c78a:	bf00      	nop
 800c78c:	0800c6d1 	.word	0x0800c6d1
 800c790:	2000a000 	.word	0x2000a000

0800c794 <_fwalk_sglue>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	4607      	mov	r7, r0
 800c79a:	4688      	mov	r8, r1
 800c79c:	4614      	mov	r4, r2
 800c79e:	2600      	movs	r6, #0
 800c7a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7a4:	f1b9 0901 	subs.w	r9, r9, #1
 800c7a8:	d505      	bpl.n	800c7b6 <_fwalk_sglue+0x22>
 800c7aa:	6824      	ldr	r4, [r4, #0]
 800c7ac:	2c00      	cmp	r4, #0
 800c7ae:	d1f7      	bne.n	800c7a0 <_fwalk_sglue+0xc>
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	89ab      	ldrh	r3, [r5, #12]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d907      	bls.n	800c7cc <_fwalk_sglue+0x38>
 800c7bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	d003      	beq.n	800c7cc <_fwalk_sglue+0x38>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	47c0      	blx	r8
 800c7ca:	4306      	orrs	r6, r0
 800c7cc:	3568      	adds	r5, #104	@ 0x68
 800c7ce:	e7e9      	b.n	800c7a4 <_fwalk_sglue+0x10>

0800c7d0 <siprintf>:
 800c7d0:	b40e      	push	{r1, r2, r3}
 800c7d2:	b500      	push	{lr}
 800c7d4:	b09c      	sub	sp, #112	@ 0x70
 800c7d6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7d8:	9002      	str	r0, [sp, #8]
 800c7da:	9006      	str	r0, [sp, #24]
 800c7dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c7e0:	4809      	ldr	r0, [pc, #36]	@ (800c808 <siprintf+0x38>)
 800c7e2:	9107      	str	r1, [sp, #28]
 800c7e4:	9104      	str	r1, [sp, #16]
 800c7e6:	4909      	ldr	r1, [pc, #36]	@ (800c80c <siprintf+0x3c>)
 800c7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	6800      	ldr	r0, [r0, #0]
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	a902      	add	r1, sp, #8
 800c7f4:	f002 fba6 	bl	800ef44 <_svfiprintf_r>
 800c7f8:	9b02      	ldr	r3, [sp, #8]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	b01c      	add	sp, #112	@ 0x70
 800c800:	f85d eb04 	ldr.w	lr, [sp], #4
 800c804:	b003      	add	sp, #12
 800c806:	4770      	bx	lr
 800c808:	20000050 	.word	0x20000050
 800c80c:	ffff0208 	.word	0xffff0208

0800c810 <__sread>:
 800c810:	b510      	push	{r4, lr}
 800c812:	460c      	mov	r4, r1
 800c814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c818:	f000 f8ea 	bl	800c9f0 <_read_r>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	bfab      	itete	ge
 800c820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c822:	89a3      	ldrhlt	r3, [r4, #12]
 800c824:	181b      	addge	r3, r3, r0
 800c826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c82a:	bfac      	ite	ge
 800c82c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c82e:	81a3      	strhlt	r3, [r4, #12]
 800c830:	bd10      	pop	{r4, pc}

0800c832 <__swrite>:
 800c832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c836:	461f      	mov	r7, r3
 800c838:	898b      	ldrh	r3, [r1, #12]
 800c83a:	05db      	lsls	r3, r3, #23
 800c83c:	4605      	mov	r5, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	4616      	mov	r6, r2
 800c842:	d505      	bpl.n	800c850 <__swrite+0x1e>
 800c844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c848:	2302      	movs	r3, #2
 800c84a:	2200      	movs	r2, #0
 800c84c:	f000 f8be 	bl	800c9cc <_lseek_r>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	4632      	mov	r2, r6
 800c85e:	463b      	mov	r3, r7
 800c860:	4628      	mov	r0, r5
 800c862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	f000 b8e5 	b.w	800ca34 <_write_r>

0800c86a <__sseek>:
 800c86a:	b510      	push	{r4, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c872:	f000 f8ab 	bl	800c9cc <_lseek_r>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	bf15      	itete	ne
 800c87c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c87e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c886:	81a3      	strheq	r3, [r4, #12]
 800c888:	bf18      	it	ne
 800c88a:	81a3      	strhne	r3, [r4, #12]
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <__sclose>:
 800c88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c892:	f000 b835 	b.w	800c900 <_close_r>

0800c896 <memmove>:
 800c896:	4288      	cmp	r0, r1
 800c898:	b510      	push	{r4, lr}
 800c89a:	eb01 0402 	add.w	r4, r1, r2
 800c89e:	d902      	bls.n	800c8a6 <memmove+0x10>
 800c8a0:	4284      	cmp	r4, r0
 800c8a2:	4623      	mov	r3, r4
 800c8a4:	d807      	bhi.n	800c8b6 <memmove+0x20>
 800c8a6:	1e43      	subs	r3, r0, #1
 800c8a8:	42a1      	cmp	r1, r4
 800c8aa:	d008      	beq.n	800c8be <memmove+0x28>
 800c8ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8b4:	e7f8      	b.n	800c8a8 <memmove+0x12>
 800c8b6:	4402      	add	r2, r0
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	428a      	cmp	r2, r1
 800c8bc:	d100      	bne.n	800c8c0 <memmove+0x2a>
 800c8be:	bd10      	pop	{r4, pc}
 800c8c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8c8:	e7f7      	b.n	800c8ba <memmove+0x24>

0800c8ca <memset>:
 800c8ca:	4402      	add	r2, r0
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d100      	bne.n	800c8d4 <memset+0xa>
 800c8d2:	4770      	bx	lr
 800c8d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c8d8:	e7f9      	b.n	800c8ce <memset+0x4>

0800c8da <strcat>:
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	4602      	mov	r2, r0
 800c8de:	7814      	ldrb	r4, [r2, #0]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	3201      	adds	r2, #1
 800c8e4:	2c00      	cmp	r4, #0
 800c8e6:	d1fa      	bne.n	800c8de <strcat+0x4>
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	d1f9      	bne.n	800c8ea <strcat+0x10>
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <_localeconv_r>:
 800c8f8:	4800      	ldr	r0, [pc, #0]	@ (800c8fc <_localeconv_r+0x4>)
 800c8fa:	4770      	bx	lr
 800c8fc:	20000190 	.word	0x20000190

0800c900 <_close_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d06      	ldr	r5, [pc, #24]	@ (800c91c <_close_r+0x1c>)
 800c904:	2300      	movs	r3, #0
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f5 ffb4 	bl	8002878 <_close>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_close_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_close_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	2000a004 	.word	0x2000a004

0800c920 <_reclaim_reent>:
 800c920:	4b29      	ldr	r3, [pc, #164]	@ (800c9c8 <_reclaim_reent+0xa8>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4283      	cmp	r3, r0
 800c926:	b570      	push	{r4, r5, r6, lr}
 800c928:	4604      	mov	r4, r0
 800c92a:	d04b      	beq.n	800c9c4 <_reclaim_reent+0xa4>
 800c92c:	69c3      	ldr	r3, [r0, #28]
 800c92e:	b1ab      	cbz	r3, 800c95c <_reclaim_reent+0x3c>
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	b16b      	cbz	r3, 800c950 <_reclaim_reent+0x30>
 800c934:	2500      	movs	r5, #0
 800c936:	69e3      	ldr	r3, [r4, #28]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	5959      	ldr	r1, [r3, r5]
 800c93c:	2900      	cmp	r1, #0
 800c93e:	d13b      	bne.n	800c9b8 <_reclaim_reent+0x98>
 800c940:	3504      	adds	r5, #4
 800c942:	2d80      	cmp	r5, #128	@ 0x80
 800c944:	d1f7      	bne.n	800c936 <_reclaim_reent+0x16>
 800c946:	69e3      	ldr	r3, [r4, #28]
 800c948:	4620      	mov	r0, r4
 800c94a:	68d9      	ldr	r1, [r3, #12]
 800c94c:	f000 ff1c 	bl	800d788 <_free_r>
 800c950:	69e3      	ldr	r3, [r4, #28]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	b111      	cbz	r1, 800c95c <_reclaim_reent+0x3c>
 800c956:	4620      	mov	r0, r4
 800c958:	f000 ff16 	bl	800d788 <_free_r>
 800c95c:	6961      	ldr	r1, [r4, #20]
 800c95e:	b111      	cbz	r1, 800c966 <_reclaim_reent+0x46>
 800c960:	4620      	mov	r0, r4
 800c962:	f000 ff11 	bl	800d788 <_free_r>
 800c966:	69e1      	ldr	r1, [r4, #28]
 800c968:	b111      	cbz	r1, 800c970 <_reclaim_reent+0x50>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 ff0c 	bl	800d788 <_free_r>
 800c970:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c972:	b111      	cbz	r1, 800c97a <_reclaim_reent+0x5a>
 800c974:	4620      	mov	r0, r4
 800c976:	f000 ff07 	bl	800d788 <_free_r>
 800c97a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c97c:	b111      	cbz	r1, 800c984 <_reclaim_reent+0x64>
 800c97e:	4620      	mov	r0, r4
 800c980:	f000 ff02 	bl	800d788 <_free_r>
 800c984:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c986:	b111      	cbz	r1, 800c98e <_reclaim_reent+0x6e>
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fefd 	bl	800d788 <_free_r>
 800c98e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c990:	b111      	cbz	r1, 800c998 <_reclaim_reent+0x78>
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fef8 	bl	800d788 <_free_r>
 800c998:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c99a:	b111      	cbz	r1, 800c9a2 <_reclaim_reent+0x82>
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fef3 	bl	800d788 <_free_r>
 800c9a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9a4:	b111      	cbz	r1, 800c9ac <_reclaim_reent+0x8c>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 feee 	bl	800d788 <_free_r>
 800c9ac:	6a23      	ldr	r3, [r4, #32]
 800c9ae:	b14b      	cbz	r3, 800c9c4 <_reclaim_reent+0xa4>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b6:	4718      	bx	r3
 800c9b8:	680e      	ldr	r6, [r1, #0]
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 fee4 	bl	800d788 <_free_r>
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	e7bb      	b.n	800c93c <_reclaim_reent+0x1c>
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20000050 	.word	0x20000050

0800c9cc <_lseek_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	4d07      	ldr	r5, [pc, #28]	@ (800c9ec <_lseek_r+0x20>)
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	602a      	str	r2, [r5, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f7f5 ff73 	bl	80028c6 <_lseek>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_lseek_r+0x1e>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_lseek_r+0x1e>
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	2000a004 	.word	0x2000a004

0800c9f0 <_read_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ca10 <_read_r+0x20>)
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	602a      	str	r2, [r5, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f7f5 ff01 	bl	8002806 <_read>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_read_r+0x1e>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_read_r+0x1e>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	2000a004 	.word	0x2000a004

0800ca14 <_sbrk_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d06      	ldr	r5, [pc, #24]	@ (800ca30 <_sbrk_r+0x1c>)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	602b      	str	r3, [r5, #0]
 800ca20:	f7f5 ff5e 	bl	80028e0 <_sbrk>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d102      	bne.n	800ca2e <_sbrk_r+0x1a>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	b103      	cbz	r3, 800ca2e <_sbrk_r+0x1a>
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
 800ca30:	2000a004 	.word	0x2000a004

0800ca34 <_write_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4d07      	ldr	r5, [pc, #28]	@ (800ca54 <_write_r+0x20>)
 800ca38:	4604      	mov	r4, r0
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	602a      	str	r2, [r5, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	f7f5 fefc 	bl	8002840 <_write>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d102      	bne.n	800ca52 <_write_r+0x1e>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	b103      	cbz	r3, 800ca52 <_write_r+0x1e>
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	2000a004 	.word	0x2000a004

0800ca58 <__errno>:
 800ca58:	4b01      	ldr	r3, [pc, #4]	@ (800ca60 <__errno+0x8>)
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20000050 	.word	0x20000050

0800ca64 <__libc_init_array>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	4d0d      	ldr	r5, [pc, #52]	@ (800ca9c <__libc_init_array+0x38>)
 800ca68:	4c0d      	ldr	r4, [pc, #52]	@ (800caa0 <__libc_init_array+0x3c>)
 800ca6a:	1b64      	subs	r4, r4, r5
 800ca6c:	10a4      	asrs	r4, r4, #2
 800ca6e:	2600      	movs	r6, #0
 800ca70:	42a6      	cmp	r6, r4
 800ca72:	d109      	bne.n	800ca88 <__libc_init_array+0x24>
 800ca74:	4d0b      	ldr	r5, [pc, #44]	@ (800caa4 <__libc_init_array+0x40>)
 800ca76:	4c0c      	ldr	r4, [pc, #48]	@ (800caa8 <__libc_init_array+0x44>)
 800ca78:	f003 fa88 	bl	800ff8c <_init>
 800ca7c:	1b64      	subs	r4, r4, r5
 800ca7e:	10a4      	asrs	r4, r4, #2
 800ca80:	2600      	movs	r6, #0
 800ca82:	42a6      	cmp	r6, r4
 800ca84:	d105      	bne.n	800ca92 <__libc_init_array+0x2e>
 800ca86:	bd70      	pop	{r4, r5, r6, pc}
 800ca88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca8c:	4798      	blx	r3
 800ca8e:	3601      	adds	r6, #1
 800ca90:	e7ee      	b.n	800ca70 <__libc_init_array+0xc>
 800ca92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca96:	4798      	blx	r3
 800ca98:	3601      	adds	r6, #1
 800ca9a:	e7f2      	b.n	800ca82 <__libc_init_array+0x1e>
 800ca9c:	08012888 	.word	0x08012888
 800caa0:	08012888 	.word	0x08012888
 800caa4:	08012888 	.word	0x08012888
 800caa8:	0801288c 	.word	0x0801288c

0800caac <__retarget_lock_init_recursive>:
 800caac:	4770      	bx	lr

0800caae <__retarget_lock_acquire_recursive>:
 800caae:	4770      	bx	lr

0800cab0 <__retarget_lock_release_recursive>:
 800cab0:	4770      	bx	lr

0800cab2 <strcpy>:
 800cab2:	4603      	mov	r3, r0
 800cab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab8:	f803 2b01 	strb.w	r2, [r3], #1
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	d1f9      	bne.n	800cab4 <strcpy+0x2>
 800cac0:	4770      	bx	lr

0800cac2 <memcpy>:
 800cac2:	440a      	add	r2, r1
 800cac4:	4291      	cmp	r1, r2
 800cac6:	f100 33ff 	add.w	r3, r0, #4294967295
 800caca:	d100      	bne.n	800cace <memcpy+0xc>
 800cacc:	4770      	bx	lr
 800cace:	b510      	push	{r4, lr}
 800cad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cad8:	4291      	cmp	r1, r2
 800cada:	d1f9      	bne.n	800cad0 <memcpy+0xe>
 800cadc:	bd10      	pop	{r4, pc}
	...

0800cae0 <nanf>:
 800cae0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cae8 <nanf+0x8>
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	7fc00000 	.word	0x7fc00000

0800caec <quorem>:
 800caec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	6903      	ldr	r3, [r0, #16]
 800caf2:	690c      	ldr	r4, [r1, #16]
 800caf4:	42a3      	cmp	r3, r4
 800caf6:	4607      	mov	r7, r0
 800caf8:	db7e      	blt.n	800cbf8 <quorem+0x10c>
 800cafa:	3c01      	subs	r4, #1
 800cafc:	f101 0814 	add.w	r8, r1, #20
 800cb00:	00a3      	lsls	r3, r4, #2
 800cb02:	f100 0514 	add.w	r5, r0, #20
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb16:	3301      	adds	r3, #1
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb1e:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb22:	d32e      	bcc.n	800cb82 <quorem+0x96>
 800cb24:	f04f 0a00 	mov.w	sl, #0
 800cb28:	46c4      	mov	ip, r8
 800cb2a:	46ae      	mov	lr, r5
 800cb2c:	46d3      	mov	fp, sl
 800cb2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb32:	b298      	uxth	r0, r3
 800cb34:	fb06 a000 	mla	r0, r6, r0, sl
 800cb38:	0c02      	lsrs	r2, r0, #16
 800cb3a:	0c1b      	lsrs	r3, r3, #16
 800cb3c:	fb06 2303 	mla	r3, r6, r3, r2
 800cb40:	f8de 2000 	ldr.w	r2, [lr]
 800cb44:	b280      	uxth	r0, r0
 800cb46:	b292      	uxth	r2, r2
 800cb48:	1a12      	subs	r2, r2, r0
 800cb4a:	445a      	add	r2, fp
 800cb4c:	f8de 0000 	ldr.w	r0, [lr]
 800cb50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cb64:	45e1      	cmp	r9, ip
 800cb66:	f84e 2b04 	str.w	r2, [lr], #4
 800cb6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cb6e:	d2de      	bcs.n	800cb2e <quorem+0x42>
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	58eb      	ldr	r3, [r5, r3]
 800cb74:	b92b      	cbnz	r3, 800cb82 <quorem+0x96>
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	3b04      	subs	r3, #4
 800cb7a:	429d      	cmp	r5, r3
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	d32f      	bcc.n	800cbe0 <quorem+0xf4>
 800cb80:	613c      	str	r4, [r7, #16]
 800cb82:	4638      	mov	r0, r7
 800cb84:	f001 f90e 	bl	800dda4 <__mcmp>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	db25      	blt.n	800cbd8 <quorem+0xec>
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb94:	f8d1 c000 	ldr.w	ip, [r1]
 800cb98:	fa1f fe82 	uxth.w	lr, r2
 800cb9c:	fa1f f38c 	uxth.w	r3, ip
 800cba0:	eba3 030e 	sub.w	r3, r3, lr
 800cba4:	4403      	add	r3, r0
 800cba6:	0c12      	lsrs	r2, r2, #16
 800cba8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbb6:	45c1      	cmp	r9, r8
 800cbb8:	f841 3b04 	str.w	r3, [r1], #4
 800cbbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbc0:	d2e6      	bcs.n	800cb90 <quorem+0xa4>
 800cbc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbca:	b922      	cbnz	r2, 800cbd6 <quorem+0xea>
 800cbcc:	3b04      	subs	r3, #4
 800cbce:	429d      	cmp	r5, r3
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	d30b      	bcc.n	800cbec <quorem+0x100>
 800cbd4:	613c      	str	r4, [r7, #16]
 800cbd6:	3601      	adds	r6, #1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	b003      	add	sp, #12
 800cbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	3b04      	subs	r3, #4
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d1cb      	bne.n	800cb80 <quorem+0x94>
 800cbe8:	3c01      	subs	r4, #1
 800cbea:	e7c6      	b.n	800cb7a <quorem+0x8e>
 800cbec:	6812      	ldr	r2, [r2, #0]
 800cbee:	3b04      	subs	r3, #4
 800cbf0:	2a00      	cmp	r2, #0
 800cbf2:	d1ef      	bne.n	800cbd4 <quorem+0xe8>
 800cbf4:	3c01      	subs	r4, #1
 800cbf6:	e7ea      	b.n	800cbce <quorem+0xe2>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e7ee      	b.n	800cbda <quorem+0xee>
 800cbfc:	0000      	movs	r0, r0
	...

0800cc00 <_dtoa_r>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	69c7      	ldr	r7, [r0, #28]
 800cc06:	b099      	sub	sp, #100	@ 0x64
 800cc08:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc0c:	ec55 4b10 	vmov	r4, r5, d0
 800cc10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cc12:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc14:	4683      	mov	fp, r0
 800cc16:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc1a:	b97f      	cbnz	r7, 800cc3c <_dtoa_r+0x3c>
 800cc1c:	2010      	movs	r0, #16
 800cc1e:	f7fe fdb1 	bl	800b784 <malloc>
 800cc22:	4602      	mov	r2, r0
 800cc24:	f8cb 001c 	str.w	r0, [fp, #28]
 800cc28:	b920      	cbnz	r0, 800cc34 <_dtoa_r+0x34>
 800cc2a:	4ba7      	ldr	r3, [pc, #668]	@ (800cec8 <_dtoa_r+0x2c8>)
 800cc2c:	21ef      	movs	r1, #239	@ 0xef
 800cc2e:	48a7      	ldr	r0, [pc, #668]	@ (800cecc <_dtoa_r+0x2cc>)
 800cc30:	f002 fb4a 	bl	800f2c8 <__assert_func>
 800cc34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc38:	6007      	str	r7, [r0, #0]
 800cc3a:	60c7      	str	r7, [r0, #12]
 800cc3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc40:	6819      	ldr	r1, [r3, #0]
 800cc42:	b159      	cbz	r1, 800cc5c <_dtoa_r+0x5c>
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	604a      	str	r2, [r1, #4]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	4093      	lsls	r3, r2
 800cc4c:	608b      	str	r3, [r1, #8]
 800cc4e:	4658      	mov	r0, fp
 800cc50:	f000 fe24 	bl	800d89c <_Bfree>
 800cc54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	1e2b      	subs	r3, r5, #0
 800cc5e:	bfb9      	ittee	lt
 800cc60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cc64:	9303      	strlt	r3, [sp, #12]
 800cc66:	2300      	movge	r3, #0
 800cc68:	6033      	strge	r3, [r6, #0]
 800cc6a:	9f03      	ldr	r7, [sp, #12]
 800cc6c:	4b98      	ldr	r3, [pc, #608]	@ (800ced0 <_dtoa_r+0x2d0>)
 800cc6e:	bfbc      	itt	lt
 800cc70:	2201      	movlt	r2, #1
 800cc72:	6032      	strlt	r2, [r6, #0]
 800cc74:	43bb      	bics	r3, r7
 800cc76:	d112      	bne.n	800cc9e <_dtoa_r+0x9e>
 800cc78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc84:	4323      	orrs	r3, r4
 800cc86:	f000 854d 	beq.w	800d724 <_dtoa_r+0xb24>
 800cc8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cee4 <_dtoa_r+0x2e4>
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 854f 	beq.w	800d734 <_dtoa_r+0xb34>
 800cc96:	f10a 0303 	add.w	r3, sl, #3
 800cc9a:	f000 bd49 	b.w	800d730 <_dtoa_r+0xb30>
 800cc9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cca2:	2200      	movs	r2, #0
 800cca4:	ec51 0b17 	vmov	r0, r1, d7
 800cca8:	2300      	movs	r3, #0
 800ccaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ccae:	f7f3 ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccb2:	4680      	mov	r8, r0
 800ccb4:	b158      	cbz	r0, 800ccce <_dtoa_r+0xce>
 800ccb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccb8:	2301      	movs	r3, #1
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccbe:	b113      	cbz	r3, 800ccc6 <_dtoa_r+0xc6>
 800ccc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ccc2:	4b84      	ldr	r3, [pc, #528]	@ (800ced4 <_dtoa_r+0x2d4>)
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cee8 <_dtoa_r+0x2e8>
 800ccca:	f000 bd33 	b.w	800d734 <_dtoa_r+0xb34>
 800ccce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ccd2:	aa16      	add	r2, sp, #88	@ 0x58
 800ccd4:	a917      	add	r1, sp, #92	@ 0x5c
 800ccd6:	4658      	mov	r0, fp
 800ccd8:	f001 f984 	bl	800dfe4 <__d2b>
 800ccdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cce0:	4681      	mov	r9, r0
 800cce2:	2e00      	cmp	r6, #0
 800cce4:	d077      	beq.n	800cdd6 <_dtoa_r+0x1d6>
 800cce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cce8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ccec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ccf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ccfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd00:	4619      	mov	r1, r3
 800cd02:	2200      	movs	r2, #0
 800cd04:	4b74      	ldr	r3, [pc, #464]	@ (800ced8 <_dtoa_r+0x2d8>)
 800cd06:	f7f3 facf 	bl	80002a8 <__aeabi_dsub>
 800cd0a:	a369      	add	r3, pc, #420	@ (adr r3, 800ceb0 <_dtoa_r+0x2b0>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fc82 	bl	8000618 <__aeabi_dmul>
 800cd14:	a368      	add	r3, pc, #416	@ (adr r3, 800ceb8 <_dtoa_r+0x2b8>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 fac7 	bl	80002ac <__adddf3>
 800cd1e:	4604      	mov	r4, r0
 800cd20:	4630      	mov	r0, r6
 800cd22:	460d      	mov	r5, r1
 800cd24:	f7f3 fc0e 	bl	8000544 <__aeabi_i2d>
 800cd28:	a365      	add	r3, pc, #404	@ (adr r3, 800cec0 <_dtoa_r+0x2c0>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fc73 	bl	8000618 <__aeabi_dmul>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fab7 	bl	80002ac <__adddf3>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	f7f3 ff19 	bl	8000b78 <__aeabi_d2iz>
 800cd46:	2200      	movs	r2, #0
 800cd48:	4607      	mov	r7, r0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f7f3 fed4 	bl	8000afc <__aeabi_dcmplt>
 800cd54:	b140      	cbz	r0, 800cd68 <_dtoa_r+0x168>
 800cd56:	4638      	mov	r0, r7
 800cd58:	f7f3 fbf4 	bl	8000544 <__aeabi_i2d>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	462b      	mov	r3, r5
 800cd60:	f7f3 fec2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd64:	b900      	cbnz	r0, 800cd68 <_dtoa_r+0x168>
 800cd66:	3f01      	subs	r7, #1
 800cd68:	2f16      	cmp	r7, #22
 800cd6a:	d851      	bhi.n	800ce10 <_dtoa_r+0x210>
 800cd6c:	4b5b      	ldr	r3, [pc, #364]	@ (800cedc <_dtoa_r+0x2dc>)
 800cd6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd7a:	f7f3 febf 	bl	8000afc <__aeabi_dcmplt>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d048      	beq.n	800ce14 <_dtoa_r+0x214>
 800cd82:	3f01      	subs	r7, #1
 800cd84:	2300      	movs	r3, #0
 800cd86:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cd8a:	1b9b      	subs	r3, r3, r6
 800cd8c:	1e5a      	subs	r2, r3, #1
 800cd8e:	bf44      	itt	mi
 800cd90:	f1c3 0801 	rsbmi	r8, r3, #1
 800cd94:	2300      	movmi	r3, #0
 800cd96:	9208      	str	r2, [sp, #32]
 800cd98:	bf54      	ite	pl
 800cd9a:	f04f 0800 	movpl.w	r8, #0
 800cd9e:	9308      	strmi	r3, [sp, #32]
 800cda0:	2f00      	cmp	r7, #0
 800cda2:	db39      	blt.n	800ce18 <_dtoa_r+0x218>
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cda8:	443b      	add	r3, r7
 800cdaa:	9308      	str	r3, [sp, #32]
 800cdac:	2300      	movs	r3, #0
 800cdae:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	d864      	bhi.n	800ce80 <_dtoa_r+0x280>
 800cdb6:	2b05      	cmp	r3, #5
 800cdb8:	bfc4      	itt	gt
 800cdba:	3b04      	subgt	r3, #4
 800cdbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc0:	f1a3 0302 	sub.w	r3, r3, #2
 800cdc4:	bfcc      	ite	gt
 800cdc6:	2400      	movgt	r4, #0
 800cdc8:	2401      	movle	r4, #1
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d863      	bhi.n	800ce96 <_dtoa_r+0x296>
 800cdce:	e8df f003 	tbb	[pc, r3]
 800cdd2:	372a      	.short	0x372a
 800cdd4:	5535      	.short	0x5535
 800cdd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cdda:	441e      	add	r6, r3
 800cddc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cde0:	2b20      	cmp	r3, #32
 800cde2:	bfc1      	itttt	gt
 800cde4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cde8:	409f      	lslgt	r7, r3
 800cdea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cdee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cdf2:	bfd6      	itet	le
 800cdf4:	f1c3 0320 	rsble	r3, r3, #32
 800cdf8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cdfc:	fa04 f003 	lslle.w	r0, r4, r3
 800ce00:	f7f3 fb90 	bl	8000524 <__aeabi_ui2d>
 800ce04:	2201      	movs	r2, #1
 800ce06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce0a:	3e01      	subs	r6, #1
 800ce0c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce0e:	e777      	b.n	800cd00 <_dtoa_r+0x100>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e7b8      	b.n	800cd86 <_dtoa_r+0x186>
 800ce14:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce16:	e7b7      	b.n	800cd88 <_dtoa_r+0x188>
 800ce18:	427b      	negs	r3, r7
 800ce1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	eba8 0807 	sub.w	r8, r8, r7
 800ce22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce24:	e7c4      	b.n	800cdb0 <_dtoa_r+0x1b0>
 800ce26:	2300      	movs	r3, #0
 800ce28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dc35      	bgt.n	800ce9c <_dtoa_r+0x29c>
 800ce30:	2301      	movs	r3, #1
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	461a      	mov	r2, r3
 800ce38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce3a:	e00b      	b.n	800ce54 <_dtoa_r+0x254>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e7f3      	b.n	800ce28 <_dtoa_r+0x228>
 800ce40:	2300      	movs	r3, #0
 800ce42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce46:	18fb      	adds	r3, r7, r3
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	9307      	str	r3, [sp, #28]
 800ce50:	bfb8      	it	lt
 800ce52:	2301      	movlt	r3, #1
 800ce54:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ce58:	2100      	movs	r1, #0
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	f102 0514 	add.w	r5, r2, #20
 800ce60:	429d      	cmp	r5, r3
 800ce62:	d91f      	bls.n	800cea4 <_dtoa_r+0x2a4>
 800ce64:	6041      	str	r1, [r0, #4]
 800ce66:	4658      	mov	r0, fp
 800ce68:	f000 fcd8 	bl	800d81c <_Balloc>
 800ce6c:	4682      	mov	sl, r0
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d13c      	bne.n	800ceec <_dtoa_r+0x2ec>
 800ce72:	4b1b      	ldr	r3, [pc, #108]	@ (800cee0 <_dtoa_r+0x2e0>)
 800ce74:	4602      	mov	r2, r0
 800ce76:	f240 11af 	movw	r1, #431	@ 0x1af
 800ce7a:	e6d8      	b.n	800cc2e <_dtoa_r+0x2e>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e7e0      	b.n	800ce42 <_dtoa_r+0x242>
 800ce80:	2401      	movs	r4, #1
 800ce82:	2300      	movs	r3, #0
 800ce84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce86:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce88:	f04f 33ff 	mov.w	r3, #4294967295
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	9307      	str	r3, [sp, #28]
 800ce90:	2200      	movs	r2, #0
 800ce92:	2312      	movs	r3, #18
 800ce94:	e7d0      	b.n	800ce38 <_dtoa_r+0x238>
 800ce96:	2301      	movs	r3, #1
 800ce98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce9a:	e7f5      	b.n	800ce88 <_dtoa_r+0x288>
 800ce9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	9307      	str	r3, [sp, #28]
 800cea2:	e7d7      	b.n	800ce54 <_dtoa_r+0x254>
 800cea4:	3101      	adds	r1, #1
 800cea6:	0052      	lsls	r2, r2, #1
 800cea8:	e7d8      	b.n	800ce5c <_dtoa_r+0x25c>
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
 800ceb0:	636f4361 	.word	0x636f4361
 800ceb4:	3fd287a7 	.word	0x3fd287a7
 800ceb8:	8b60c8b3 	.word	0x8b60c8b3
 800cebc:	3fc68a28 	.word	0x3fc68a28
 800cec0:	509f79fb 	.word	0x509f79fb
 800cec4:	3fd34413 	.word	0x3fd34413
 800cec8:	0801249b 	.word	0x0801249b
 800cecc:	080124b2 	.word	0x080124b2
 800ced0:	7ff00000 	.word	0x7ff00000
 800ced4:	08012466 	.word	0x08012466
 800ced8:	3ff80000 	.word	0x3ff80000
 800cedc:	080125a8 	.word	0x080125a8
 800cee0:	0801250a 	.word	0x0801250a
 800cee4:	08012497 	.word	0x08012497
 800cee8:	08012465 	.word	0x08012465
 800ceec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cef0:	6018      	str	r0, [r3, #0]
 800cef2:	9b07      	ldr	r3, [sp, #28]
 800cef4:	2b0e      	cmp	r3, #14
 800cef6:	f200 80a4 	bhi.w	800d042 <_dtoa_r+0x442>
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	f000 80a1 	beq.w	800d042 <_dtoa_r+0x442>
 800cf00:	2f00      	cmp	r7, #0
 800cf02:	dd33      	ble.n	800cf6c <_dtoa_r+0x36c>
 800cf04:	4bad      	ldr	r3, [pc, #692]	@ (800d1bc <_dtoa_r+0x5bc>)
 800cf06:	f007 020f 	and.w	r2, r7, #15
 800cf0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf0e:	ed93 7b00 	vldr	d7, [r3]
 800cf12:	05f8      	lsls	r0, r7, #23
 800cf14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf1c:	d516      	bpl.n	800cf4c <_dtoa_r+0x34c>
 800cf1e:	4ba8      	ldr	r3, [pc, #672]	@ (800d1c0 <_dtoa_r+0x5c0>)
 800cf20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf28:	f7f3 fca0 	bl	800086c <__aeabi_ddiv>
 800cf2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf30:	f004 040f 	and.w	r4, r4, #15
 800cf34:	2603      	movs	r6, #3
 800cf36:	4da2      	ldr	r5, [pc, #648]	@ (800d1c0 <_dtoa_r+0x5c0>)
 800cf38:	b954      	cbnz	r4, 800cf50 <_dtoa_r+0x350>
 800cf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf42:	f7f3 fc93 	bl	800086c <__aeabi_ddiv>
 800cf46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf4a:	e028      	b.n	800cf9e <_dtoa_r+0x39e>
 800cf4c:	2602      	movs	r6, #2
 800cf4e:	e7f2      	b.n	800cf36 <_dtoa_r+0x336>
 800cf50:	07e1      	lsls	r1, r4, #31
 800cf52:	d508      	bpl.n	800cf66 <_dtoa_r+0x366>
 800cf54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf5c:	f7f3 fb5c 	bl	8000618 <__aeabi_dmul>
 800cf60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf64:	3601      	adds	r6, #1
 800cf66:	1064      	asrs	r4, r4, #1
 800cf68:	3508      	adds	r5, #8
 800cf6a:	e7e5      	b.n	800cf38 <_dtoa_r+0x338>
 800cf6c:	f000 80d2 	beq.w	800d114 <_dtoa_r+0x514>
 800cf70:	427c      	negs	r4, r7
 800cf72:	4b92      	ldr	r3, [pc, #584]	@ (800d1bc <_dtoa_r+0x5bc>)
 800cf74:	4d92      	ldr	r5, [pc, #584]	@ (800d1c0 <_dtoa_r+0x5c0>)
 800cf76:	f004 020f 	and.w	r2, r4, #15
 800cf7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf86:	f7f3 fb47 	bl	8000618 <__aeabi_dmul>
 800cf8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf8e:	1124      	asrs	r4, r4, #4
 800cf90:	2300      	movs	r3, #0
 800cf92:	2602      	movs	r6, #2
 800cf94:	2c00      	cmp	r4, #0
 800cf96:	f040 80b2 	bne.w	800d0fe <_dtoa_r+0x4fe>
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1d3      	bne.n	800cf46 <_dtoa_r+0x346>
 800cf9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfa0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 80b7 	beq.w	800d118 <_dtoa_r+0x518>
 800cfaa:	4b86      	ldr	r3, [pc, #536]	@ (800d1c4 <_dtoa_r+0x5c4>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 fda3 	bl	8000afc <__aeabi_dcmplt>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f000 80ae 	beq.w	800d118 <_dtoa_r+0x518>
 800cfbc:	9b07      	ldr	r3, [sp, #28]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 80aa 	beq.w	800d118 <_dtoa_r+0x518>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	dd37      	ble.n	800d03a <_dtoa_r+0x43a>
 800cfca:	1e7b      	subs	r3, r7, #1
 800cfcc:	9304      	str	r3, [sp, #16]
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4b7d      	ldr	r3, [pc, #500]	@ (800d1c8 <_dtoa_r+0x5c8>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	f7f3 fb1f 	bl	8000618 <__aeabi_dmul>
 800cfda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfde:	9c00      	ldr	r4, [sp, #0]
 800cfe0:	3601      	adds	r6, #1
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7f3 faae 	bl	8000544 <__aeabi_i2d>
 800cfe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfec:	f7f3 fb14 	bl	8000618 <__aeabi_dmul>
 800cff0:	4b76      	ldr	r3, [pc, #472]	@ (800d1cc <_dtoa_r+0x5cc>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	f7f3 f95a 	bl	80002ac <__adddf3>
 800cff8:	4605      	mov	r5, r0
 800cffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cffe:	2c00      	cmp	r4, #0
 800d000:	f040 808d 	bne.w	800d11e <_dtoa_r+0x51e>
 800d004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d008:	4b71      	ldr	r3, [pc, #452]	@ (800d1d0 <_dtoa_r+0x5d0>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	f7f3 f94c 	bl	80002a8 <__aeabi_dsub>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d018:	462a      	mov	r2, r5
 800d01a:	4633      	mov	r3, r6
 800d01c:	f7f3 fd8c 	bl	8000b38 <__aeabi_dcmpgt>
 800d020:	2800      	cmp	r0, #0
 800d022:	f040 828b 	bne.w	800d53c <_dtoa_r+0x93c>
 800d026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02a:	462a      	mov	r2, r5
 800d02c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d030:	f7f3 fd64 	bl	8000afc <__aeabi_dcmplt>
 800d034:	2800      	cmp	r0, #0
 800d036:	f040 8128 	bne.w	800d28a <_dtoa_r+0x68a>
 800d03a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d03e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d044:	2b00      	cmp	r3, #0
 800d046:	f2c0 815a 	blt.w	800d2fe <_dtoa_r+0x6fe>
 800d04a:	2f0e      	cmp	r7, #14
 800d04c:	f300 8157 	bgt.w	800d2fe <_dtoa_r+0x6fe>
 800d050:	4b5a      	ldr	r3, [pc, #360]	@ (800d1bc <_dtoa_r+0x5bc>)
 800d052:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d056:	ed93 7b00 	vldr	d7, [r3]
 800d05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	ed8d 7b00 	vstr	d7, [sp]
 800d062:	da03      	bge.n	800d06c <_dtoa_r+0x46c>
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f340 8101 	ble.w	800d26e <_dtoa_r+0x66e>
 800d06c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d070:	4656      	mov	r6, sl
 800d072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 fbf7 	bl	800086c <__aeabi_ddiv>
 800d07e:	f7f3 fd7b 	bl	8000b78 <__aeabi_d2iz>
 800d082:	4680      	mov	r8, r0
 800d084:	f7f3 fa5e 	bl	8000544 <__aeabi_i2d>
 800d088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d08c:	f7f3 fac4 	bl	8000618 <__aeabi_dmul>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d09c:	f7f3 f904 	bl	80002a8 <__aeabi_dsub>
 800d0a0:	f806 4b01 	strb.w	r4, [r6], #1
 800d0a4:	9d07      	ldr	r5, [sp, #28]
 800d0a6:	eba6 040a 	sub.w	r4, r6, sl
 800d0aa:	42a5      	cmp	r5, r4
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	f040 8117 	bne.w	800d2e2 <_dtoa_r+0x6e2>
 800d0b4:	f7f3 f8fa 	bl	80002ac <__adddf3>
 800d0b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0bc:	4604      	mov	r4, r0
 800d0be:	460d      	mov	r5, r1
 800d0c0:	f7f3 fd3a 	bl	8000b38 <__aeabi_dcmpgt>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f040 80f9 	bne.w	800d2bc <_dtoa_r+0x6bc>
 800d0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	f7f3 fd09 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0d6:	b118      	cbz	r0, 800d0e0 <_dtoa_r+0x4e0>
 800d0d8:	f018 0f01 	tst.w	r8, #1
 800d0dc:	f040 80ee 	bne.w	800d2bc <_dtoa_r+0x6bc>
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f000 fbda 	bl	800d89c <_Bfree>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	7033      	strb	r3, [r6, #0]
 800d0ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0ee:	3701      	adds	r7, #1
 800d0f0:	601f      	str	r7, [r3, #0]
 800d0f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 831d 	beq.w	800d734 <_dtoa_r+0xb34>
 800d0fa:	601e      	str	r6, [r3, #0]
 800d0fc:	e31a      	b.n	800d734 <_dtoa_r+0xb34>
 800d0fe:	07e2      	lsls	r2, r4, #31
 800d100:	d505      	bpl.n	800d10e <_dtoa_r+0x50e>
 800d102:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d106:	f7f3 fa87 	bl	8000618 <__aeabi_dmul>
 800d10a:	3601      	adds	r6, #1
 800d10c:	2301      	movs	r3, #1
 800d10e:	1064      	asrs	r4, r4, #1
 800d110:	3508      	adds	r5, #8
 800d112:	e73f      	b.n	800cf94 <_dtoa_r+0x394>
 800d114:	2602      	movs	r6, #2
 800d116:	e742      	b.n	800cf9e <_dtoa_r+0x39e>
 800d118:	9c07      	ldr	r4, [sp, #28]
 800d11a:	9704      	str	r7, [sp, #16]
 800d11c:	e761      	b.n	800cfe2 <_dtoa_r+0x3e2>
 800d11e:	4b27      	ldr	r3, [pc, #156]	@ (800d1bc <_dtoa_r+0x5bc>)
 800d120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d126:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d12a:	4454      	add	r4, sl
 800d12c:	2900      	cmp	r1, #0
 800d12e:	d053      	beq.n	800d1d8 <_dtoa_r+0x5d8>
 800d130:	4928      	ldr	r1, [pc, #160]	@ (800d1d4 <_dtoa_r+0x5d4>)
 800d132:	2000      	movs	r0, #0
 800d134:	f7f3 fb9a 	bl	800086c <__aeabi_ddiv>
 800d138:	4633      	mov	r3, r6
 800d13a:	462a      	mov	r2, r5
 800d13c:	f7f3 f8b4 	bl	80002a8 <__aeabi_dsub>
 800d140:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d144:	4656      	mov	r6, sl
 800d146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d14a:	f7f3 fd15 	bl	8000b78 <__aeabi_d2iz>
 800d14e:	4605      	mov	r5, r0
 800d150:	f7f3 f9f8 	bl	8000544 <__aeabi_i2d>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d15c:	f7f3 f8a4 	bl	80002a8 <__aeabi_dsub>
 800d160:	3530      	adds	r5, #48	@ 0x30
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d16a:	f806 5b01 	strb.w	r5, [r6], #1
 800d16e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d172:	f7f3 fcc3 	bl	8000afc <__aeabi_dcmplt>
 800d176:	2800      	cmp	r0, #0
 800d178:	d171      	bne.n	800d25e <_dtoa_r+0x65e>
 800d17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d17e:	4911      	ldr	r1, [pc, #68]	@ (800d1c4 <_dtoa_r+0x5c4>)
 800d180:	2000      	movs	r0, #0
 800d182:	f7f3 f891 	bl	80002a8 <__aeabi_dsub>
 800d186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d18a:	f7f3 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800d18e:	2800      	cmp	r0, #0
 800d190:	f040 8095 	bne.w	800d2be <_dtoa_r+0x6be>
 800d194:	42a6      	cmp	r6, r4
 800d196:	f43f af50 	beq.w	800d03a <_dtoa_r+0x43a>
 800d19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d19e:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c8 <_dtoa_r+0x5c8>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 fa39 	bl	8000618 <__aeabi_dmul>
 800d1a6:	4b08      	ldr	r3, [pc, #32]	@ (800d1c8 <_dtoa_r+0x5c8>)
 800d1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b2:	f7f3 fa31 	bl	8000618 <__aeabi_dmul>
 800d1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1ba:	e7c4      	b.n	800d146 <_dtoa_r+0x546>
 800d1bc:	080125a8 	.word	0x080125a8
 800d1c0:	08012580 	.word	0x08012580
 800d1c4:	3ff00000 	.word	0x3ff00000
 800d1c8:	40240000 	.word	0x40240000
 800d1cc:	401c0000 	.word	0x401c0000
 800d1d0:	40140000 	.word	0x40140000
 800d1d4:	3fe00000 	.word	0x3fe00000
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f7f3 fa1c 	bl	8000618 <__aeabi_dmul>
 800d1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d1e6:	4656      	mov	r6, sl
 800d1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ec:	f7f3 fcc4 	bl	8000b78 <__aeabi_d2iz>
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	f7f3 f9a7 	bl	8000544 <__aeabi_i2d>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1fe:	f7f3 f853 	bl	80002a8 <__aeabi_dsub>
 800d202:	3530      	adds	r5, #48	@ 0x30
 800d204:	f806 5b01 	strb.w	r5, [r6], #1
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	42a6      	cmp	r6, r4
 800d20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d212:	f04f 0200 	mov.w	r2, #0
 800d216:	d124      	bne.n	800d262 <_dtoa_r+0x662>
 800d218:	4bac      	ldr	r3, [pc, #688]	@ (800d4cc <_dtoa_r+0x8cc>)
 800d21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d21e:	f7f3 f845 	bl	80002ac <__adddf3>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d22a:	f7f3 fc85 	bl	8000b38 <__aeabi_dcmpgt>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d145      	bne.n	800d2be <_dtoa_r+0x6be>
 800d232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d236:	49a5      	ldr	r1, [pc, #660]	@ (800d4cc <_dtoa_r+0x8cc>)
 800d238:	2000      	movs	r0, #0
 800d23a:	f7f3 f835 	bl	80002a8 <__aeabi_dsub>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d246:	f7f3 fc59 	bl	8000afc <__aeabi_dcmplt>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	f43f aef5 	beq.w	800d03a <_dtoa_r+0x43a>
 800d250:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d252:	1e73      	subs	r3, r6, #1
 800d254:	9315      	str	r3, [sp, #84]	@ 0x54
 800d256:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d25a:	2b30      	cmp	r3, #48	@ 0x30
 800d25c:	d0f8      	beq.n	800d250 <_dtoa_r+0x650>
 800d25e:	9f04      	ldr	r7, [sp, #16]
 800d260:	e73e      	b.n	800d0e0 <_dtoa_r+0x4e0>
 800d262:	4b9b      	ldr	r3, [pc, #620]	@ (800d4d0 <_dtoa_r+0x8d0>)
 800d264:	f7f3 f9d8 	bl	8000618 <__aeabi_dmul>
 800d268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d26c:	e7bc      	b.n	800d1e8 <_dtoa_r+0x5e8>
 800d26e:	d10c      	bne.n	800d28a <_dtoa_r+0x68a>
 800d270:	4b98      	ldr	r3, [pc, #608]	@ (800d4d4 <_dtoa_r+0x8d4>)
 800d272:	2200      	movs	r2, #0
 800d274:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d278:	f7f3 f9ce 	bl	8000618 <__aeabi_dmul>
 800d27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d280:	f7f3 fc50 	bl	8000b24 <__aeabi_dcmpge>
 800d284:	2800      	cmp	r0, #0
 800d286:	f000 8157 	beq.w	800d538 <_dtoa_r+0x938>
 800d28a:	2400      	movs	r4, #0
 800d28c:	4625      	mov	r5, r4
 800d28e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d290:	43db      	mvns	r3, r3
 800d292:	9304      	str	r3, [sp, #16]
 800d294:	4656      	mov	r6, sl
 800d296:	2700      	movs	r7, #0
 800d298:	4621      	mov	r1, r4
 800d29a:	4658      	mov	r0, fp
 800d29c:	f000 fafe 	bl	800d89c <_Bfree>
 800d2a0:	2d00      	cmp	r5, #0
 800d2a2:	d0dc      	beq.n	800d25e <_dtoa_r+0x65e>
 800d2a4:	b12f      	cbz	r7, 800d2b2 <_dtoa_r+0x6b2>
 800d2a6:	42af      	cmp	r7, r5
 800d2a8:	d003      	beq.n	800d2b2 <_dtoa_r+0x6b2>
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	4658      	mov	r0, fp
 800d2ae:	f000 faf5 	bl	800d89c <_Bfree>
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	f000 faf1 	bl	800d89c <_Bfree>
 800d2ba:	e7d0      	b.n	800d25e <_dtoa_r+0x65e>
 800d2bc:	9704      	str	r7, [sp, #16]
 800d2be:	4633      	mov	r3, r6
 800d2c0:	461e      	mov	r6, r3
 800d2c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2c6:	2a39      	cmp	r2, #57	@ 0x39
 800d2c8:	d107      	bne.n	800d2da <_dtoa_r+0x6da>
 800d2ca:	459a      	cmp	sl, r3
 800d2cc:	d1f8      	bne.n	800d2c0 <_dtoa_r+0x6c0>
 800d2ce:	9a04      	ldr	r2, [sp, #16]
 800d2d0:	3201      	adds	r2, #1
 800d2d2:	9204      	str	r2, [sp, #16]
 800d2d4:	2230      	movs	r2, #48	@ 0x30
 800d2d6:	f88a 2000 	strb.w	r2, [sl]
 800d2da:	781a      	ldrb	r2, [r3, #0]
 800d2dc:	3201      	adds	r2, #1
 800d2de:	701a      	strb	r2, [r3, #0]
 800d2e0:	e7bd      	b.n	800d25e <_dtoa_r+0x65e>
 800d2e2:	4b7b      	ldr	r3, [pc, #492]	@ (800d4d0 <_dtoa_r+0x8d0>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f7f3 f997 	bl	8000618 <__aeabi_dmul>
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	f7f3 fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f43f aebb 	beq.w	800d072 <_dtoa_r+0x472>
 800d2fc:	e6f0      	b.n	800d0e0 <_dtoa_r+0x4e0>
 800d2fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d300:	2a00      	cmp	r2, #0
 800d302:	f000 80db 	beq.w	800d4bc <_dtoa_r+0x8bc>
 800d306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d308:	2a01      	cmp	r2, #1
 800d30a:	f300 80bf 	bgt.w	800d48c <_dtoa_r+0x88c>
 800d30e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d310:	2a00      	cmp	r2, #0
 800d312:	f000 80b7 	beq.w	800d484 <_dtoa_r+0x884>
 800d316:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d31a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d31c:	4646      	mov	r6, r8
 800d31e:	9a08      	ldr	r2, [sp, #32]
 800d320:	2101      	movs	r1, #1
 800d322:	441a      	add	r2, r3
 800d324:	4658      	mov	r0, fp
 800d326:	4498      	add	r8, r3
 800d328:	9208      	str	r2, [sp, #32]
 800d32a:	f000 fbb5 	bl	800da98 <__i2b>
 800d32e:	4605      	mov	r5, r0
 800d330:	b15e      	cbz	r6, 800d34a <_dtoa_r+0x74a>
 800d332:	9b08      	ldr	r3, [sp, #32]
 800d334:	2b00      	cmp	r3, #0
 800d336:	dd08      	ble.n	800d34a <_dtoa_r+0x74a>
 800d338:	42b3      	cmp	r3, r6
 800d33a:	9a08      	ldr	r2, [sp, #32]
 800d33c:	bfa8      	it	ge
 800d33e:	4633      	movge	r3, r6
 800d340:	eba8 0803 	sub.w	r8, r8, r3
 800d344:	1af6      	subs	r6, r6, r3
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	9308      	str	r3, [sp, #32]
 800d34a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d34c:	b1f3      	cbz	r3, 800d38c <_dtoa_r+0x78c>
 800d34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 80b7 	beq.w	800d4c4 <_dtoa_r+0x8c4>
 800d356:	b18c      	cbz	r4, 800d37c <_dtoa_r+0x77c>
 800d358:	4629      	mov	r1, r5
 800d35a:	4622      	mov	r2, r4
 800d35c:	4658      	mov	r0, fp
 800d35e:	f000 fc5b 	bl	800dc18 <__pow5mult>
 800d362:	464a      	mov	r2, r9
 800d364:	4601      	mov	r1, r0
 800d366:	4605      	mov	r5, r0
 800d368:	4658      	mov	r0, fp
 800d36a:	f000 fbab 	bl	800dac4 <__multiply>
 800d36e:	4649      	mov	r1, r9
 800d370:	9004      	str	r0, [sp, #16]
 800d372:	4658      	mov	r0, fp
 800d374:	f000 fa92 	bl	800d89c <_Bfree>
 800d378:	9b04      	ldr	r3, [sp, #16]
 800d37a:	4699      	mov	r9, r3
 800d37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37e:	1b1a      	subs	r2, r3, r4
 800d380:	d004      	beq.n	800d38c <_dtoa_r+0x78c>
 800d382:	4649      	mov	r1, r9
 800d384:	4658      	mov	r0, fp
 800d386:	f000 fc47 	bl	800dc18 <__pow5mult>
 800d38a:	4681      	mov	r9, r0
 800d38c:	2101      	movs	r1, #1
 800d38e:	4658      	mov	r0, fp
 800d390:	f000 fb82 	bl	800da98 <__i2b>
 800d394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d396:	4604      	mov	r4, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 81cf 	beq.w	800d73c <_dtoa_r+0xb3c>
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	4658      	mov	r0, fp
 800d3a4:	f000 fc38 	bl	800dc18 <__pow5mult>
 800d3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	f300 8095 	bgt.w	800d4dc <_dtoa_r+0x8dc>
 800d3b2:	9b02      	ldr	r3, [sp, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f040 8087 	bne.w	800d4c8 <_dtoa_r+0x8c8>
 800d3ba:	9b03      	ldr	r3, [sp, #12]
 800d3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 8089 	bne.w	800d4d8 <_dtoa_r+0x8d8>
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3cc:	0d1b      	lsrs	r3, r3, #20
 800d3ce:	051b      	lsls	r3, r3, #20
 800d3d0:	b12b      	cbz	r3, 800d3de <_dtoa_r+0x7de>
 800d3d2:	9b08      	ldr	r3, [sp, #32]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	9308      	str	r3, [sp, #32]
 800d3d8:	f108 0801 	add.w	r8, r8, #1
 800d3dc:	2301      	movs	r3, #1
 800d3de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 81b0 	beq.w	800d748 <_dtoa_r+0xb48>
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3ee:	6918      	ldr	r0, [r3, #16]
 800d3f0:	f000 fb06 	bl	800da00 <__hi0bits>
 800d3f4:	f1c0 0020 	rsb	r0, r0, #32
 800d3f8:	9b08      	ldr	r3, [sp, #32]
 800d3fa:	4418      	add	r0, r3
 800d3fc:	f010 001f 	ands.w	r0, r0, #31
 800d400:	d077      	beq.n	800d4f2 <_dtoa_r+0x8f2>
 800d402:	f1c0 0320 	rsb	r3, r0, #32
 800d406:	2b04      	cmp	r3, #4
 800d408:	dd6b      	ble.n	800d4e2 <_dtoa_r+0x8e2>
 800d40a:	9b08      	ldr	r3, [sp, #32]
 800d40c:	f1c0 001c 	rsb	r0, r0, #28
 800d410:	4403      	add	r3, r0
 800d412:	4480      	add	r8, r0
 800d414:	4406      	add	r6, r0
 800d416:	9308      	str	r3, [sp, #32]
 800d418:	f1b8 0f00 	cmp.w	r8, #0
 800d41c:	dd05      	ble.n	800d42a <_dtoa_r+0x82a>
 800d41e:	4649      	mov	r1, r9
 800d420:	4642      	mov	r2, r8
 800d422:	4658      	mov	r0, fp
 800d424:	f000 fc52 	bl	800dccc <__lshift>
 800d428:	4681      	mov	r9, r0
 800d42a:	9b08      	ldr	r3, [sp, #32]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dd05      	ble.n	800d43c <_dtoa_r+0x83c>
 800d430:	4621      	mov	r1, r4
 800d432:	461a      	mov	r2, r3
 800d434:	4658      	mov	r0, fp
 800d436:	f000 fc49 	bl	800dccc <__lshift>
 800d43a:	4604      	mov	r4, r0
 800d43c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d059      	beq.n	800d4f6 <_dtoa_r+0x8f6>
 800d442:	4621      	mov	r1, r4
 800d444:	4648      	mov	r0, r9
 800d446:	f000 fcad 	bl	800dda4 <__mcmp>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	da53      	bge.n	800d4f6 <_dtoa_r+0x8f6>
 800d44e:	1e7b      	subs	r3, r7, #1
 800d450:	9304      	str	r3, [sp, #16]
 800d452:	4649      	mov	r1, r9
 800d454:	2300      	movs	r3, #0
 800d456:	220a      	movs	r2, #10
 800d458:	4658      	mov	r0, fp
 800d45a:	f000 fa41 	bl	800d8e0 <__multadd>
 800d45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d460:	4681      	mov	r9, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 8172 	beq.w	800d74c <_dtoa_r+0xb4c>
 800d468:	2300      	movs	r3, #0
 800d46a:	4629      	mov	r1, r5
 800d46c:	220a      	movs	r2, #10
 800d46e:	4658      	mov	r0, fp
 800d470:	f000 fa36 	bl	800d8e0 <__multadd>
 800d474:	9b00      	ldr	r3, [sp, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	4605      	mov	r5, r0
 800d47a:	dc67      	bgt.n	800d54c <_dtoa_r+0x94c>
 800d47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d47e:	2b02      	cmp	r3, #2
 800d480:	dc41      	bgt.n	800d506 <_dtoa_r+0x906>
 800d482:	e063      	b.n	800d54c <_dtoa_r+0x94c>
 800d484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d486:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d48a:	e746      	b.n	800d31a <_dtoa_r+0x71a>
 800d48c:	9b07      	ldr	r3, [sp, #28]
 800d48e:	1e5c      	subs	r4, r3, #1
 800d490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d492:	42a3      	cmp	r3, r4
 800d494:	bfbf      	itttt	lt
 800d496:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d498:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d49a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d49c:	1ae3      	sublt	r3, r4, r3
 800d49e:	bfb4      	ite	lt
 800d4a0:	18d2      	addlt	r2, r2, r3
 800d4a2:	1b1c      	subge	r4, r3, r4
 800d4a4:	9b07      	ldr	r3, [sp, #28]
 800d4a6:	bfbc      	itt	lt
 800d4a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d4aa:	2400      	movlt	r4, #0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bfb5      	itete	lt
 800d4b0:	eba8 0603 	sublt.w	r6, r8, r3
 800d4b4:	9b07      	ldrge	r3, [sp, #28]
 800d4b6:	2300      	movlt	r3, #0
 800d4b8:	4646      	movge	r6, r8
 800d4ba:	e730      	b.n	800d31e <_dtoa_r+0x71e>
 800d4bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d4c0:	4646      	mov	r6, r8
 800d4c2:	e735      	b.n	800d330 <_dtoa_r+0x730>
 800d4c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4c6:	e75c      	b.n	800d382 <_dtoa_r+0x782>
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e788      	b.n	800d3de <_dtoa_r+0x7de>
 800d4cc:	3fe00000 	.word	0x3fe00000
 800d4d0:	40240000 	.word	0x40240000
 800d4d4:	40140000 	.word	0x40140000
 800d4d8:	9b02      	ldr	r3, [sp, #8]
 800d4da:	e780      	b.n	800d3de <_dtoa_r+0x7de>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4e0:	e782      	b.n	800d3e8 <_dtoa_r+0x7e8>
 800d4e2:	d099      	beq.n	800d418 <_dtoa_r+0x818>
 800d4e4:	9a08      	ldr	r2, [sp, #32]
 800d4e6:	331c      	adds	r3, #28
 800d4e8:	441a      	add	r2, r3
 800d4ea:	4498      	add	r8, r3
 800d4ec:	441e      	add	r6, r3
 800d4ee:	9208      	str	r2, [sp, #32]
 800d4f0:	e792      	b.n	800d418 <_dtoa_r+0x818>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	e7f6      	b.n	800d4e4 <_dtoa_r+0x8e4>
 800d4f6:	9b07      	ldr	r3, [sp, #28]
 800d4f8:	9704      	str	r7, [sp, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dc20      	bgt.n	800d540 <_dtoa_r+0x940>
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d502:	2b02      	cmp	r3, #2
 800d504:	dd1e      	ble.n	800d544 <_dtoa_r+0x944>
 800d506:	9b00      	ldr	r3, [sp, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f47f aec0 	bne.w	800d28e <_dtoa_r+0x68e>
 800d50e:	4621      	mov	r1, r4
 800d510:	2205      	movs	r2, #5
 800d512:	4658      	mov	r0, fp
 800d514:	f000 f9e4 	bl	800d8e0 <__multadd>
 800d518:	4601      	mov	r1, r0
 800d51a:	4604      	mov	r4, r0
 800d51c:	4648      	mov	r0, r9
 800d51e:	f000 fc41 	bl	800dda4 <__mcmp>
 800d522:	2800      	cmp	r0, #0
 800d524:	f77f aeb3 	ble.w	800d28e <_dtoa_r+0x68e>
 800d528:	4656      	mov	r6, sl
 800d52a:	2331      	movs	r3, #49	@ 0x31
 800d52c:	f806 3b01 	strb.w	r3, [r6], #1
 800d530:	9b04      	ldr	r3, [sp, #16]
 800d532:	3301      	adds	r3, #1
 800d534:	9304      	str	r3, [sp, #16]
 800d536:	e6ae      	b.n	800d296 <_dtoa_r+0x696>
 800d538:	9c07      	ldr	r4, [sp, #28]
 800d53a:	9704      	str	r7, [sp, #16]
 800d53c:	4625      	mov	r5, r4
 800d53e:	e7f3      	b.n	800d528 <_dtoa_r+0x928>
 800d540:	9b07      	ldr	r3, [sp, #28]
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 8104 	beq.w	800d754 <_dtoa_r+0xb54>
 800d54c:	2e00      	cmp	r6, #0
 800d54e:	dd05      	ble.n	800d55c <_dtoa_r+0x95c>
 800d550:	4629      	mov	r1, r5
 800d552:	4632      	mov	r2, r6
 800d554:	4658      	mov	r0, fp
 800d556:	f000 fbb9 	bl	800dccc <__lshift>
 800d55a:	4605      	mov	r5, r0
 800d55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d05a      	beq.n	800d618 <_dtoa_r+0xa18>
 800d562:	6869      	ldr	r1, [r5, #4]
 800d564:	4658      	mov	r0, fp
 800d566:	f000 f959 	bl	800d81c <_Balloc>
 800d56a:	4606      	mov	r6, r0
 800d56c:	b928      	cbnz	r0, 800d57a <_dtoa_r+0x97a>
 800d56e:	4b84      	ldr	r3, [pc, #528]	@ (800d780 <_dtoa_r+0xb80>)
 800d570:	4602      	mov	r2, r0
 800d572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d576:	f7ff bb5a 	b.w	800cc2e <_dtoa_r+0x2e>
 800d57a:	692a      	ldr	r2, [r5, #16]
 800d57c:	3202      	adds	r2, #2
 800d57e:	0092      	lsls	r2, r2, #2
 800d580:	f105 010c 	add.w	r1, r5, #12
 800d584:	300c      	adds	r0, #12
 800d586:	f7ff fa9c 	bl	800cac2 <memcpy>
 800d58a:	2201      	movs	r2, #1
 800d58c:	4631      	mov	r1, r6
 800d58e:	4658      	mov	r0, fp
 800d590:	f000 fb9c 	bl	800dccc <__lshift>
 800d594:	f10a 0301 	add.w	r3, sl, #1
 800d598:	9307      	str	r3, [sp, #28]
 800d59a:	9b00      	ldr	r3, [sp, #0]
 800d59c:	4453      	add	r3, sl
 800d59e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5a0:	9b02      	ldr	r3, [sp, #8]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	462f      	mov	r7, r5
 800d5a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	9b07      	ldr	r3, [sp, #28]
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	f7ff fa99 	bl	800caec <quorem>
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	9002      	str	r0, [sp, #8]
 800d5be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5c2:	4648      	mov	r0, r9
 800d5c4:	f000 fbee 	bl	800dda4 <__mcmp>
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	9008      	str	r0, [sp, #32]
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4658      	mov	r0, fp
 800d5d0:	f000 fc04 	bl	800dddc <__mdiff>
 800d5d4:	68c2      	ldr	r2, [r0, #12]
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	bb02      	cbnz	r2, 800d61c <_dtoa_r+0xa1c>
 800d5da:	4601      	mov	r1, r0
 800d5dc:	4648      	mov	r0, r9
 800d5de:	f000 fbe1 	bl	800dda4 <__mcmp>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	4658      	mov	r0, fp
 800d5e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5ea:	f000 f957 	bl	800d89c <_Bfree>
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5f2:	9e07      	ldr	r6, [sp, #28]
 800d5f4:	ea43 0102 	orr.w	r1, r3, r2
 800d5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5fa:	4319      	orrs	r1, r3
 800d5fc:	d110      	bne.n	800d620 <_dtoa_r+0xa20>
 800d5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d602:	d029      	beq.n	800d658 <_dtoa_r+0xa58>
 800d604:	9b08      	ldr	r3, [sp, #32]
 800d606:	2b00      	cmp	r3, #0
 800d608:	dd02      	ble.n	800d610 <_dtoa_r+0xa10>
 800d60a:	9b02      	ldr	r3, [sp, #8]
 800d60c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d610:	9b00      	ldr	r3, [sp, #0]
 800d612:	f883 8000 	strb.w	r8, [r3]
 800d616:	e63f      	b.n	800d298 <_dtoa_r+0x698>
 800d618:	4628      	mov	r0, r5
 800d61a:	e7bb      	b.n	800d594 <_dtoa_r+0x994>
 800d61c:	2201      	movs	r2, #1
 800d61e:	e7e1      	b.n	800d5e4 <_dtoa_r+0x9e4>
 800d620:	9b08      	ldr	r3, [sp, #32]
 800d622:	2b00      	cmp	r3, #0
 800d624:	db04      	blt.n	800d630 <_dtoa_r+0xa30>
 800d626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d628:	430b      	orrs	r3, r1
 800d62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d62c:	430b      	orrs	r3, r1
 800d62e:	d120      	bne.n	800d672 <_dtoa_r+0xa72>
 800d630:	2a00      	cmp	r2, #0
 800d632:	dded      	ble.n	800d610 <_dtoa_r+0xa10>
 800d634:	4649      	mov	r1, r9
 800d636:	2201      	movs	r2, #1
 800d638:	4658      	mov	r0, fp
 800d63a:	f000 fb47 	bl	800dccc <__lshift>
 800d63e:	4621      	mov	r1, r4
 800d640:	4681      	mov	r9, r0
 800d642:	f000 fbaf 	bl	800dda4 <__mcmp>
 800d646:	2800      	cmp	r0, #0
 800d648:	dc03      	bgt.n	800d652 <_dtoa_r+0xa52>
 800d64a:	d1e1      	bne.n	800d610 <_dtoa_r+0xa10>
 800d64c:	f018 0f01 	tst.w	r8, #1
 800d650:	d0de      	beq.n	800d610 <_dtoa_r+0xa10>
 800d652:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d656:	d1d8      	bne.n	800d60a <_dtoa_r+0xa0a>
 800d658:	9a00      	ldr	r2, [sp, #0]
 800d65a:	2339      	movs	r3, #57	@ 0x39
 800d65c:	7013      	strb	r3, [r2, #0]
 800d65e:	4633      	mov	r3, r6
 800d660:	461e      	mov	r6, r3
 800d662:	3b01      	subs	r3, #1
 800d664:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d668:	2a39      	cmp	r2, #57	@ 0x39
 800d66a:	d052      	beq.n	800d712 <_dtoa_r+0xb12>
 800d66c:	3201      	adds	r2, #1
 800d66e:	701a      	strb	r2, [r3, #0]
 800d670:	e612      	b.n	800d298 <_dtoa_r+0x698>
 800d672:	2a00      	cmp	r2, #0
 800d674:	dd07      	ble.n	800d686 <_dtoa_r+0xa86>
 800d676:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d67a:	d0ed      	beq.n	800d658 <_dtoa_r+0xa58>
 800d67c:	9a00      	ldr	r2, [sp, #0]
 800d67e:	f108 0301 	add.w	r3, r8, #1
 800d682:	7013      	strb	r3, [r2, #0]
 800d684:	e608      	b.n	800d298 <_dtoa_r+0x698>
 800d686:	9b07      	ldr	r3, [sp, #28]
 800d688:	9a07      	ldr	r2, [sp, #28]
 800d68a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d68e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d690:	4293      	cmp	r3, r2
 800d692:	d028      	beq.n	800d6e6 <_dtoa_r+0xae6>
 800d694:	4649      	mov	r1, r9
 800d696:	2300      	movs	r3, #0
 800d698:	220a      	movs	r2, #10
 800d69a:	4658      	mov	r0, fp
 800d69c:	f000 f920 	bl	800d8e0 <__multadd>
 800d6a0:	42af      	cmp	r7, r5
 800d6a2:	4681      	mov	r9, r0
 800d6a4:	f04f 0300 	mov.w	r3, #0
 800d6a8:	f04f 020a 	mov.w	r2, #10
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	4658      	mov	r0, fp
 800d6b0:	d107      	bne.n	800d6c2 <_dtoa_r+0xac2>
 800d6b2:	f000 f915 	bl	800d8e0 <__multadd>
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	9b07      	ldr	r3, [sp, #28]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	e774      	b.n	800d5ac <_dtoa_r+0x9ac>
 800d6c2:	f000 f90d 	bl	800d8e0 <__multadd>
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4607      	mov	r7, r0
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	220a      	movs	r2, #10
 800d6ce:	4658      	mov	r0, fp
 800d6d0:	f000 f906 	bl	800d8e0 <__multadd>
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	e7f0      	b.n	800d6ba <_dtoa_r+0xaba>
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bfcc      	ite	gt
 800d6de:	461e      	movgt	r6, r3
 800d6e0:	2601      	movle	r6, #1
 800d6e2:	4456      	add	r6, sl
 800d6e4:	2700      	movs	r7, #0
 800d6e6:	4649      	mov	r1, r9
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	4658      	mov	r0, fp
 800d6ec:	f000 faee 	bl	800dccc <__lshift>
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	4681      	mov	r9, r0
 800d6f4:	f000 fb56 	bl	800dda4 <__mcmp>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	dcb0      	bgt.n	800d65e <_dtoa_r+0xa5e>
 800d6fc:	d102      	bne.n	800d704 <_dtoa_r+0xb04>
 800d6fe:	f018 0f01 	tst.w	r8, #1
 800d702:	d1ac      	bne.n	800d65e <_dtoa_r+0xa5e>
 800d704:	4633      	mov	r3, r6
 800d706:	461e      	mov	r6, r3
 800d708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d70c:	2a30      	cmp	r2, #48	@ 0x30
 800d70e:	d0fa      	beq.n	800d706 <_dtoa_r+0xb06>
 800d710:	e5c2      	b.n	800d298 <_dtoa_r+0x698>
 800d712:	459a      	cmp	sl, r3
 800d714:	d1a4      	bne.n	800d660 <_dtoa_r+0xa60>
 800d716:	9b04      	ldr	r3, [sp, #16]
 800d718:	3301      	adds	r3, #1
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	2331      	movs	r3, #49	@ 0x31
 800d71e:	f88a 3000 	strb.w	r3, [sl]
 800d722:	e5b9      	b.n	800d298 <_dtoa_r+0x698>
 800d724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d726:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d784 <_dtoa_r+0xb84>
 800d72a:	b11b      	cbz	r3, 800d734 <_dtoa_r+0xb34>
 800d72c:	f10a 0308 	add.w	r3, sl, #8
 800d730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d732:	6013      	str	r3, [r2, #0]
 800d734:	4650      	mov	r0, sl
 800d736:	b019      	add	sp, #100	@ 0x64
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d73e:	2b01      	cmp	r3, #1
 800d740:	f77f ae37 	ble.w	800d3b2 <_dtoa_r+0x7b2>
 800d744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d746:	930a      	str	r3, [sp, #40]	@ 0x28
 800d748:	2001      	movs	r0, #1
 800d74a:	e655      	b.n	800d3f8 <_dtoa_r+0x7f8>
 800d74c:	9b00      	ldr	r3, [sp, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f77f aed6 	ble.w	800d500 <_dtoa_r+0x900>
 800d754:	4656      	mov	r6, sl
 800d756:	4621      	mov	r1, r4
 800d758:	4648      	mov	r0, r9
 800d75a:	f7ff f9c7 	bl	800caec <quorem>
 800d75e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d762:	f806 8b01 	strb.w	r8, [r6], #1
 800d766:	9b00      	ldr	r3, [sp, #0]
 800d768:	eba6 020a 	sub.w	r2, r6, sl
 800d76c:	4293      	cmp	r3, r2
 800d76e:	ddb3      	ble.n	800d6d8 <_dtoa_r+0xad8>
 800d770:	4649      	mov	r1, r9
 800d772:	2300      	movs	r3, #0
 800d774:	220a      	movs	r2, #10
 800d776:	4658      	mov	r0, fp
 800d778:	f000 f8b2 	bl	800d8e0 <__multadd>
 800d77c:	4681      	mov	r9, r0
 800d77e:	e7ea      	b.n	800d756 <_dtoa_r+0xb56>
 800d780:	0801250a 	.word	0x0801250a
 800d784:	0801248e 	.word	0x0801248e

0800d788 <_free_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4605      	mov	r5, r0
 800d78c:	2900      	cmp	r1, #0
 800d78e:	d041      	beq.n	800d814 <_free_r+0x8c>
 800d790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d794:	1f0c      	subs	r4, r1, #4
 800d796:	2b00      	cmp	r3, #0
 800d798:	bfb8      	it	lt
 800d79a:	18e4      	addlt	r4, r4, r3
 800d79c:	f7fe f89c 	bl	800b8d8 <__malloc_lock>
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d818 <_free_r+0x90>)
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	b933      	cbnz	r3, 800d7b4 <_free_r+0x2c>
 800d7a6:	6063      	str	r3, [r4, #4]
 800d7a8:	6014      	str	r4, [r2, #0]
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7b0:	f7fe b898 	b.w	800b8e4 <__malloc_unlock>
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	d908      	bls.n	800d7ca <_free_r+0x42>
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	1821      	adds	r1, r4, r0
 800d7bc:	428b      	cmp	r3, r1
 800d7be:	bf01      	itttt	eq
 800d7c0:	6819      	ldreq	r1, [r3, #0]
 800d7c2:	685b      	ldreq	r3, [r3, #4]
 800d7c4:	1809      	addeq	r1, r1, r0
 800d7c6:	6021      	streq	r1, [r4, #0]
 800d7c8:	e7ed      	b.n	800d7a6 <_free_r+0x1e>
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	b10b      	cbz	r3, 800d7d4 <_free_r+0x4c>
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	d9fa      	bls.n	800d7ca <_free_r+0x42>
 800d7d4:	6811      	ldr	r1, [r2, #0]
 800d7d6:	1850      	adds	r0, r2, r1
 800d7d8:	42a0      	cmp	r0, r4
 800d7da:	d10b      	bne.n	800d7f4 <_free_r+0x6c>
 800d7dc:	6820      	ldr	r0, [r4, #0]
 800d7de:	4401      	add	r1, r0
 800d7e0:	1850      	adds	r0, r2, r1
 800d7e2:	4283      	cmp	r3, r0
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	d1e0      	bne.n	800d7aa <_free_r+0x22>
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	6053      	str	r3, [r2, #4]
 800d7ee:	4408      	add	r0, r1
 800d7f0:	6010      	str	r0, [r2, #0]
 800d7f2:	e7da      	b.n	800d7aa <_free_r+0x22>
 800d7f4:	d902      	bls.n	800d7fc <_free_r+0x74>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	602b      	str	r3, [r5, #0]
 800d7fa:	e7d6      	b.n	800d7aa <_free_r+0x22>
 800d7fc:	6820      	ldr	r0, [r4, #0]
 800d7fe:	1821      	adds	r1, r4, r0
 800d800:	428b      	cmp	r3, r1
 800d802:	bf04      	itt	eq
 800d804:	6819      	ldreq	r1, [r3, #0]
 800d806:	685b      	ldreq	r3, [r3, #4]
 800d808:	6063      	str	r3, [r4, #4]
 800d80a:	bf04      	itt	eq
 800d80c:	1809      	addeq	r1, r1, r0
 800d80e:	6021      	streq	r1, [r4, #0]
 800d810:	6054      	str	r4, [r2, #4]
 800d812:	e7ca      	b.n	800d7aa <_free_r+0x22>
 800d814:	bd38      	pop	{r3, r4, r5, pc}
 800d816:	bf00      	nop
 800d818:	20009ec4 	.word	0x20009ec4

0800d81c <_Balloc>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	69c6      	ldr	r6, [r0, #28]
 800d820:	4604      	mov	r4, r0
 800d822:	460d      	mov	r5, r1
 800d824:	b976      	cbnz	r6, 800d844 <_Balloc+0x28>
 800d826:	2010      	movs	r0, #16
 800d828:	f7fd ffac 	bl	800b784 <malloc>
 800d82c:	4602      	mov	r2, r0
 800d82e:	61e0      	str	r0, [r4, #28]
 800d830:	b920      	cbnz	r0, 800d83c <_Balloc+0x20>
 800d832:	4b18      	ldr	r3, [pc, #96]	@ (800d894 <_Balloc+0x78>)
 800d834:	4818      	ldr	r0, [pc, #96]	@ (800d898 <_Balloc+0x7c>)
 800d836:	216b      	movs	r1, #107	@ 0x6b
 800d838:	f001 fd46 	bl	800f2c8 <__assert_func>
 800d83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d840:	6006      	str	r6, [r0, #0]
 800d842:	60c6      	str	r6, [r0, #12]
 800d844:	69e6      	ldr	r6, [r4, #28]
 800d846:	68f3      	ldr	r3, [r6, #12]
 800d848:	b183      	cbz	r3, 800d86c <_Balloc+0x50>
 800d84a:	69e3      	ldr	r3, [r4, #28]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d852:	b9b8      	cbnz	r0, 800d884 <_Balloc+0x68>
 800d854:	2101      	movs	r1, #1
 800d856:	fa01 f605 	lsl.w	r6, r1, r5
 800d85a:	1d72      	adds	r2, r6, #5
 800d85c:	0092      	lsls	r2, r2, #2
 800d85e:	4620      	mov	r0, r4
 800d860:	f7fd ff62 	bl	800b728 <_calloc_r>
 800d864:	b160      	cbz	r0, 800d880 <_Balloc+0x64>
 800d866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d86a:	e00e      	b.n	800d88a <_Balloc+0x6e>
 800d86c:	2221      	movs	r2, #33	@ 0x21
 800d86e:	2104      	movs	r1, #4
 800d870:	4620      	mov	r0, r4
 800d872:	f7fd ff59 	bl	800b728 <_calloc_r>
 800d876:	69e3      	ldr	r3, [r4, #28]
 800d878:	60f0      	str	r0, [r6, #12]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1e4      	bne.n	800d84a <_Balloc+0x2e>
 800d880:	2000      	movs	r0, #0
 800d882:	bd70      	pop	{r4, r5, r6, pc}
 800d884:	6802      	ldr	r2, [r0, #0]
 800d886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d88a:	2300      	movs	r3, #0
 800d88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d890:	e7f7      	b.n	800d882 <_Balloc+0x66>
 800d892:	bf00      	nop
 800d894:	0801249b 	.word	0x0801249b
 800d898:	0801251b 	.word	0x0801251b

0800d89c <_Bfree>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	69c6      	ldr	r6, [r0, #28]
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	b976      	cbnz	r6, 800d8c4 <_Bfree+0x28>
 800d8a6:	2010      	movs	r0, #16
 800d8a8:	f7fd ff6c 	bl	800b784 <malloc>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	61e8      	str	r0, [r5, #28]
 800d8b0:	b920      	cbnz	r0, 800d8bc <_Bfree+0x20>
 800d8b2:	4b09      	ldr	r3, [pc, #36]	@ (800d8d8 <_Bfree+0x3c>)
 800d8b4:	4809      	ldr	r0, [pc, #36]	@ (800d8dc <_Bfree+0x40>)
 800d8b6:	218f      	movs	r1, #143	@ 0x8f
 800d8b8:	f001 fd06 	bl	800f2c8 <__assert_func>
 800d8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8c0:	6006      	str	r6, [r0, #0]
 800d8c2:	60c6      	str	r6, [r0, #12]
 800d8c4:	b13c      	cbz	r4, 800d8d6 <_Bfree+0x3a>
 800d8c6:	69eb      	ldr	r3, [r5, #28]
 800d8c8:	6862      	ldr	r2, [r4, #4]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8d0:	6021      	str	r1, [r4, #0]
 800d8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	0801249b 	.word	0x0801249b
 800d8dc:	0801251b 	.word	0x0801251b

0800d8e0 <__multadd>:
 800d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	690d      	ldr	r5, [r1, #16]
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	461e      	mov	r6, r3
 800d8ec:	f101 0c14 	add.w	ip, r1, #20
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8f6:	b299      	uxth	r1, r3
 800d8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d8fc:	0c1e      	lsrs	r6, r3, #16
 800d8fe:	0c0b      	lsrs	r3, r1, #16
 800d900:	fb02 3306 	mla	r3, r2, r6, r3
 800d904:	b289      	uxth	r1, r1
 800d906:	3001      	adds	r0, #1
 800d908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d90c:	4285      	cmp	r5, r0
 800d90e:	f84c 1b04 	str.w	r1, [ip], #4
 800d912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d916:	dcec      	bgt.n	800d8f2 <__multadd+0x12>
 800d918:	b30e      	cbz	r6, 800d95e <__multadd+0x7e>
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	42ab      	cmp	r3, r5
 800d91e:	dc19      	bgt.n	800d954 <__multadd+0x74>
 800d920:	6861      	ldr	r1, [r4, #4]
 800d922:	4638      	mov	r0, r7
 800d924:	3101      	adds	r1, #1
 800d926:	f7ff ff79 	bl	800d81c <_Balloc>
 800d92a:	4680      	mov	r8, r0
 800d92c:	b928      	cbnz	r0, 800d93a <__multadd+0x5a>
 800d92e:	4602      	mov	r2, r0
 800d930:	4b0c      	ldr	r3, [pc, #48]	@ (800d964 <__multadd+0x84>)
 800d932:	480d      	ldr	r0, [pc, #52]	@ (800d968 <__multadd+0x88>)
 800d934:	21ba      	movs	r1, #186	@ 0xba
 800d936:	f001 fcc7 	bl	800f2c8 <__assert_func>
 800d93a:	6922      	ldr	r2, [r4, #16]
 800d93c:	3202      	adds	r2, #2
 800d93e:	f104 010c 	add.w	r1, r4, #12
 800d942:	0092      	lsls	r2, r2, #2
 800d944:	300c      	adds	r0, #12
 800d946:	f7ff f8bc 	bl	800cac2 <memcpy>
 800d94a:	4621      	mov	r1, r4
 800d94c:	4638      	mov	r0, r7
 800d94e:	f7ff ffa5 	bl	800d89c <_Bfree>
 800d952:	4644      	mov	r4, r8
 800d954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d958:	3501      	adds	r5, #1
 800d95a:	615e      	str	r6, [r3, #20]
 800d95c:	6125      	str	r5, [r4, #16]
 800d95e:	4620      	mov	r0, r4
 800d960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d964:	0801250a 	.word	0x0801250a
 800d968:	0801251b 	.word	0x0801251b

0800d96c <__s2b>:
 800d96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d970:	460c      	mov	r4, r1
 800d972:	4615      	mov	r5, r2
 800d974:	461f      	mov	r7, r3
 800d976:	2209      	movs	r2, #9
 800d978:	3308      	adds	r3, #8
 800d97a:	4606      	mov	r6, r0
 800d97c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d980:	2100      	movs	r1, #0
 800d982:	2201      	movs	r2, #1
 800d984:	429a      	cmp	r2, r3
 800d986:	db09      	blt.n	800d99c <__s2b+0x30>
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff ff47 	bl	800d81c <_Balloc>
 800d98e:	b940      	cbnz	r0, 800d9a2 <__s2b+0x36>
 800d990:	4602      	mov	r2, r0
 800d992:	4b19      	ldr	r3, [pc, #100]	@ (800d9f8 <__s2b+0x8c>)
 800d994:	4819      	ldr	r0, [pc, #100]	@ (800d9fc <__s2b+0x90>)
 800d996:	21d3      	movs	r1, #211	@ 0xd3
 800d998:	f001 fc96 	bl	800f2c8 <__assert_func>
 800d99c:	0052      	lsls	r2, r2, #1
 800d99e:	3101      	adds	r1, #1
 800d9a0:	e7f0      	b.n	800d984 <__s2b+0x18>
 800d9a2:	9b08      	ldr	r3, [sp, #32]
 800d9a4:	6143      	str	r3, [r0, #20]
 800d9a6:	2d09      	cmp	r5, #9
 800d9a8:	f04f 0301 	mov.w	r3, #1
 800d9ac:	6103      	str	r3, [r0, #16]
 800d9ae:	dd16      	ble.n	800d9de <__s2b+0x72>
 800d9b0:	f104 0909 	add.w	r9, r4, #9
 800d9b4:	46c8      	mov	r8, r9
 800d9b6:	442c      	add	r4, r5
 800d9b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9bc:	4601      	mov	r1, r0
 800d9be:	3b30      	subs	r3, #48	@ 0x30
 800d9c0:	220a      	movs	r2, #10
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f7ff ff8c 	bl	800d8e0 <__multadd>
 800d9c8:	45a0      	cmp	r8, r4
 800d9ca:	d1f5      	bne.n	800d9b8 <__s2b+0x4c>
 800d9cc:	f1a5 0408 	sub.w	r4, r5, #8
 800d9d0:	444c      	add	r4, r9
 800d9d2:	1b2d      	subs	r5, r5, r4
 800d9d4:	1963      	adds	r3, r4, r5
 800d9d6:	42bb      	cmp	r3, r7
 800d9d8:	db04      	blt.n	800d9e4 <__s2b+0x78>
 800d9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9de:	340a      	adds	r4, #10
 800d9e0:	2509      	movs	r5, #9
 800d9e2:	e7f6      	b.n	800d9d2 <__s2b+0x66>
 800d9e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	3b30      	subs	r3, #48	@ 0x30
 800d9ec:	220a      	movs	r2, #10
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7ff ff76 	bl	800d8e0 <__multadd>
 800d9f4:	e7ee      	b.n	800d9d4 <__s2b+0x68>
 800d9f6:	bf00      	nop
 800d9f8:	0801250a 	.word	0x0801250a
 800d9fc:	0801251b 	.word	0x0801251b

0800da00 <__hi0bits>:
 800da00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800da04:	4603      	mov	r3, r0
 800da06:	bf36      	itet	cc
 800da08:	0403      	lslcc	r3, r0, #16
 800da0a:	2000      	movcs	r0, #0
 800da0c:	2010      	movcc	r0, #16
 800da0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da12:	bf3c      	itt	cc
 800da14:	021b      	lslcc	r3, r3, #8
 800da16:	3008      	addcc	r0, #8
 800da18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da1c:	bf3c      	itt	cc
 800da1e:	011b      	lslcc	r3, r3, #4
 800da20:	3004      	addcc	r0, #4
 800da22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da26:	bf3c      	itt	cc
 800da28:	009b      	lslcc	r3, r3, #2
 800da2a:	3002      	addcc	r0, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	db05      	blt.n	800da3c <__hi0bits+0x3c>
 800da30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da34:	f100 0001 	add.w	r0, r0, #1
 800da38:	bf08      	it	eq
 800da3a:	2020      	moveq	r0, #32
 800da3c:	4770      	bx	lr

0800da3e <__lo0bits>:
 800da3e:	6803      	ldr	r3, [r0, #0]
 800da40:	4602      	mov	r2, r0
 800da42:	f013 0007 	ands.w	r0, r3, #7
 800da46:	d00b      	beq.n	800da60 <__lo0bits+0x22>
 800da48:	07d9      	lsls	r1, r3, #31
 800da4a:	d421      	bmi.n	800da90 <__lo0bits+0x52>
 800da4c:	0798      	lsls	r0, r3, #30
 800da4e:	bf49      	itett	mi
 800da50:	085b      	lsrmi	r3, r3, #1
 800da52:	089b      	lsrpl	r3, r3, #2
 800da54:	2001      	movmi	r0, #1
 800da56:	6013      	strmi	r3, [r2, #0]
 800da58:	bf5c      	itt	pl
 800da5a:	6013      	strpl	r3, [r2, #0]
 800da5c:	2002      	movpl	r0, #2
 800da5e:	4770      	bx	lr
 800da60:	b299      	uxth	r1, r3
 800da62:	b909      	cbnz	r1, 800da68 <__lo0bits+0x2a>
 800da64:	0c1b      	lsrs	r3, r3, #16
 800da66:	2010      	movs	r0, #16
 800da68:	b2d9      	uxtb	r1, r3
 800da6a:	b909      	cbnz	r1, 800da70 <__lo0bits+0x32>
 800da6c:	3008      	adds	r0, #8
 800da6e:	0a1b      	lsrs	r3, r3, #8
 800da70:	0719      	lsls	r1, r3, #28
 800da72:	bf04      	itt	eq
 800da74:	091b      	lsreq	r3, r3, #4
 800da76:	3004      	addeq	r0, #4
 800da78:	0799      	lsls	r1, r3, #30
 800da7a:	bf04      	itt	eq
 800da7c:	089b      	lsreq	r3, r3, #2
 800da7e:	3002      	addeq	r0, #2
 800da80:	07d9      	lsls	r1, r3, #31
 800da82:	d403      	bmi.n	800da8c <__lo0bits+0x4e>
 800da84:	085b      	lsrs	r3, r3, #1
 800da86:	f100 0001 	add.w	r0, r0, #1
 800da8a:	d003      	beq.n	800da94 <__lo0bits+0x56>
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	4770      	bx	lr
 800da90:	2000      	movs	r0, #0
 800da92:	4770      	bx	lr
 800da94:	2020      	movs	r0, #32
 800da96:	4770      	bx	lr

0800da98 <__i2b>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	460c      	mov	r4, r1
 800da9c:	2101      	movs	r1, #1
 800da9e:	f7ff febd 	bl	800d81c <_Balloc>
 800daa2:	4602      	mov	r2, r0
 800daa4:	b928      	cbnz	r0, 800dab2 <__i2b+0x1a>
 800daa6:	4b05      	ldr	r3, [pc, #20]	@ (800dabc <__i2b+0x24>)
 800daa8:	4805      	ldr	r0, [pc, #20]	@ (800dac0 <__i2b+0x28>)
 800daaa:	f240 1145 	movw	r1, #325	@ 0x145
 800daae:	f001 fc0b 	bl	800f2c8 <__assert_func>
 800dab2:	2301      	movs	r3, #1
 800dab4:	6144      	str	r4, [r0, #20]
 800dab6:	6103      	str	r3, [r0, #16]
 800dab8:	bd10      	pop	{r4, pc}
 800daba:	bf00      	nop
 800dabc:	0801250a 	.word	0x0801250a
 800dac0:	0801251b 	.word	0x0801251b

0800dac4 <__multiply>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	4614      	mov	r4, r2
 800daca:	690a      	ldr	r2, [r1, #16]
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	429a      	cmp	r2, r3
 800dad0:	bfa8      	it	ge
 800dad2:	4623      	movge	r3, r4
 800dad4:	460f      	mov	r7, r1
 800dad6:	bfa4      	itt	ge
 800dad8:	460c      	movge	r4, r1
 800dada:	461f      	movge	r7, r3
 800dadc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dae0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	6861      	ldr	r1, [r4, #4]
 800dae8:	eb0a 0609 	add.w	r6, sl, r9
 800daec:	42b3      	cmp	r3, r6
 800daee:	b085      	sub	sp, #20
 800daf0:	bfb8      	it	lt
 800daf2:	3101      	addlt	r1, #1
 800daf4:	f7ff fe92 	bl	800d81c <_Balloc>
 800daf8:	b930      	cbnz	r0, 800db08 <__multiply+0x44>
 800dafa:	4602      	mov	r2, r0
 800dafc:	4b44      	ldr	r3, [pc, #272]	@ (800dc10 <__multiply+0x14c>)
 800dafe:	4845      	ldr	r0, [pc, #276]	@ (800dc14 <__multiply+0x150>)
 800db00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800db04:	f001 fbe0 	bl	800f2c8 <__assert_func>
 800db08:	f100 0514 	add.w	r5, r0, #20
 800db0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db10:	462b      	mov	r3, r5
 800db12:	2200      	movs	r2, #0
 800db14:	4543      	cmp	r3, r8
 800db16:	d321      	bcc.n	800db5c <__multiply+0x98>
 800db18:	f107 0114 	add.w	r1, r7, #20
 800db1c:	f104 0214 	add.w	r2, r4, #20
 800db20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800db24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800db28:	9302      	str	r3, [sp, #8]
 800db2a:	1b13      	subs	r3, r2, r4
 800db2c:	3b15      	subs	r3, #21
 800db2e:	f023 0303 	bic.w	r3, r3, #3
 800db32:	3304      	adds	r3, #4
 800db34:	f104 0715 	add.w	r7, r4, #21
 800db38:	42ba      	cmp	r2, r7
 800db3a:	bf38      	it	cc
 800db3c:	2304      	movcc	r3, #4
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	9103      	str	r1, [sp, #12]
 800db44:	428b      	cmp	r3, r1
 800db46:	d80c      	bhi.n	800db62 <__multiply+0x9e>
 800db48:	2e00      	cmp	r6, #0
 800db4a:	dd03      	ble.n	800db54 <__multiply+0x90>
 800db4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db50:	2b00      	cmp	r3, #0
 800db52:	d05b      	beq.n	800dc0c <__multiply+0x148>
 800db54:	6106      	str	r6, [r0, #16]
 800db56:	b005      	add	sp, #20
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	f843 2b04 	str.w	r2, [r3], #4
 800db60:	e7d8      	b.n	800db14 <__multiply+0x50>
 800db62:	f8b1 a000 	ldrh.w	sl, [r1]
 800db66:	f1ba 0f00 	cmp.w	sl, #0
 800db6a:	d024      	beq.n	800dbb6 <__multiply+0xf2>
 800db6c:	f104 0e14 	add.w	lr, r4, #20
 800db70:	46a9      	mov	r9, r5
 800db72:	f04f 0c00 	mov.w	ip, #0
 800db76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db7a:	f8d9 3000 	ldr.w	r3, [r9]
 800db7e:	fa1f fb87 	uxth.w	fp, r7
 800db82:	b29b      	uxth	r3, r3
 800db84:	fb0a 330b 	mla	r3, sl, fp, r3
 800db88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800db8c:	f8d9 7000 	ldr.w	r7, [r9]
 800db90:	4463      	add	r3, ip
 800db92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db96:	fb0a c70b 	mla	r7, sl, fp, ip
 800db9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dba4:	4572      	cmp	r2, lr
 800dba6:	f849 3b04 	str.w	r3, [r9], #4
 800dbaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dbae:	d8e2      	bhi.n	800db76 <__multiply+0xb2>
 800dbb0:	9b01      	ldr	r3, [sp, #4]
 800dbb2:	f845 c003 	str.w	ip, [r5, r3]
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dbbc:	3104      	adds	r1, #4
 800dbbe:	f1b9 0f00 	cmp.w	r9, #0
 800dbc2:	d021      	beq.n	800dc08 <__multiply+0x144>
 800dbc4:	682b      	ldr	r3, [r5, #0]
 800dbc6:	f104 0c14 	add.w	ip, r4, #20
 800dbca:	46ae      	mov	lr, r5
 800dbcc:	f04f 0a00 	mov.w	sl, #0
 800dbd0:	f8bc b000 	ldrh.w	fp, [ip]
 800dbd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dbd8:	fb09 770b 	mla	r7, r9, fp, r7
 800dbdc:	4457      	add	r7, sl
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dbe4:	f84e 3b04 	str.w	r3, [lr], #4
 800dbe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbf0:	f8be 3000 	ldrh.w	r3, [lr]
 800dbf4:	fb09 330a 	mla	r3, r9, sl, r3
 800dbf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dbfc:	4562      	cmp	r2, ip
 800dbfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc02:	d8e5      	bhi.n	800dbd0 <__multiply+0x10c>
 800dc04:	9f01      	ldr	r7, [sp, #4]
 800dc06:	51eb      	str	r3, [r5, r7]
 800dc08:	3504      	adds	r5, #4
 800dc0a:	e799      	b.n	800db40 <__multiply+0x7c>
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	e79b      	b.n	800db48 <__multiply+0x84>
 800dc10:	0801250a 	.word	0x0801250a
 800dc14:	0801251b 	.word	0x0801251b

0800dc18 <__pow5mult>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	f012 0203 	ands.w	r2, r2, #3
 800dc22:	4607      	mov	r7, r0
 800dc24:	460e      	mov	r6, r1
 800dc26:	d007      	beq.n	800dc38 <__pow5mult+0x20>
 800dc28:	4c25      	ldr	r4, [pc, #148]	@ (800dcc0 <__pow5mult+0xa8>)
 800dc2a:	3a01      	subs	r2, #1
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc32:	f7ff fe55 	bl	800d8e0 <__multadd>
 800dc36:	4606      	mov	r6, r0
 800dc38:	10ad      	asrs	r5, r5, #2
 800dc3a:	d03d      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dc3c:	69fc      	ldr	r4, [r7, #28]
 800dc3e:	b97c      	cbnz	r4, 800dc60 <__pow5mult+0x48>
 800dc40:	2010      	movs	r0, #16
 800dc42:	f7fd fd9f 	bl	800b784 <malloc>
 800dc46:	4602      	mov	r2, r0
 800dc48:	61f8      	str	r0, [r7, #28]
 800dc4a:	b928      	cbnz	r0, 800dc58 <__pow5mult+0x40>
 800dc4c:	4b1d      	ldr	r3, [pc, #116]	@ (800dcc4 <__pow5mult+0xac>)
 800dc4e:	481e      	ldr	r0, [pc, #120]	@ (800dcc8 <__pow5mult+0xb0>)
 800dc50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dc54:	f001 fb38 	bl	800f2c8 <__assert_func>
 800dc58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc5c:	6004      	str	r4, [r0, #0]
 800dc5e:	60c4      	str	r4, [r0, #12]
 800dc60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc68:	b94c      	cbnz	r4, 800dc7e <__pow5mult+0x66>
 800dc6a:	f240 2171 	movw	r1, #625	@ 0x271
 800dc6e:	4638      	mov	r0, r7
 800dc70:	f7ff ff12 	bl	800da98 <__i2b>
 800dc74:	2300      	movs	r3, #0
 800dc76:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	f04f 0900 	mov.w	r9, #0
 800dc82:	07eb      	lsls	r3, r5, #31
 800dc84:	d50a      	bpl.n	800dc9c <__pow5mult+0x84>
 800dc86:	4631      	mov	r1, r6
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	f7ff ff1a 	bl	800dac4 <__multiply>
 800dc90:	4631      	mov	r1, r6
 800dc92:	4680      	mov	r8, r0
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff fe01 	bl	800d89c <_Bfree>
 800dc9a:	4646      	mov	r6, r8
 800dc9c:	106d      	asrs	r5, r5, #1
 800dc9e:	d00b      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dca0:	6820      	ldr	r0, [r4, #0]
 800dca2:	b938      	cbnz	r0, 800dcb4 <__pow5mult+0x9c>
 800dca4:	4622      	mov	r2, r4
 800dca6:	4621      	mov	r1, r4
 800dca8:	4638      	mov	r0, r7
 800dcaa:	f7ff ff0b 	bl	800dac4 <__multiply>
 800dcae:	6020      	str	r0, [r4, #0]
 800dcb0:	f8c0 9000 	str.w	r9, [r0]
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	e7e4      	b.n	800dc82 <__pow5mult+0x6a>
 800dcb8:	4630      	mov	r0, r6
 800dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcbe:	bf00      	nop
 800dcc0:	08012574 	.word	0x08012574
 800dcc4:	0801249b 	.word	0x0801249b
 800dcc8:	0801251b 	.word	0x0801251b

0800dccc <__lshift>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	6849      	ldr	r1, [r1, #4]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	4607      	mov	r7, r0
 800dcde:	4691      	mov	r9, r2
 800dce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dce4:	f108 0601 	add.w	r6, r8, #1
 800dce8:	42b3      	cmp	r3, r6
 800dcea:	db0b      	blt.n	800dd04 <__lshift+0x38>
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff fd95 	bl	800d81c <_Balloc>
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	b948      	cbnz	r0, 800dd0a <__lshift+0x3e>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b28      	ldr	r3, [pc, #160]	@ (800dd9c <__lshift+0xd0>)
 800dcfa:	4829      	ldr	r0, [pc, #164]	@ (800dda0 <__lshift+0xd4>)
 800dcfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dd00:	f001 fae2 	bl	800f2c8 <__assert_func>
 800dd04:	3101      	adds	r1, #1
 800dd06:	005b      	lsls	r3, r3, #1
 800dd08:	e7ee      	b.n	800dce8 <__lshift+0x1c>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f100 0114 	add.w	r1, r0, #20
 800dd10:	f100 0210 	add.w	r2, r0, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	4553      	cmp	r3, sl
 800dd18:	db33      	blt.n	800dd82 <__lshift+0xb6>
 800dd1a:	6920      	ldr	r0, [r4, #16]
 800dd1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd20:	f104 0314 	add.w	r3, r4, #20
 800dd24:	f019 091f 	ands.w	r9, r9, #31
 800dd28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd30:	d02b      	beq.n	800dd8a <__lshift+0xbe>
 800dd32:	f1c9 0e20 	rsb	lr, r9, #32
 800dd36:	468a      	mov	sl, r1
 800dd38:	2200      	movs	r2, #0
 800dd3a:	6818      	ldr	r0, [r3, #0]
 800dd3c:	fa00 f009 	lsl.w	r0, r0, r9
 800dd40:	4310      	orrs	r0, r2
 800dd42:	f84a 0b04 	str.w	r0, [sl], #4
 800dd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd4a:	459c      	cmp	ip, r3
 800dd4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd50:	d8f3      	bhi.n	800dd3a <__lshift+0x6e>
 800dd52:	ebac 0304 	sub.w	r3, ip, r4
 800dd56:	3b15      	subs	r3, #21
 800dd58:	f023 0303 	bic.w	r3, r3, #3
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	f104 0015 	add.w	r0, r4, #21
 800dd62:	4584      	cmp	ip, r0
 800dd64:	bf38      	it	cc
 800dd66:	2304      	movcc	r3, #4
 800dd68:	50ca      	str	r2, [r1, r3]
 800dd6a:	b10a      	cbz	r2, 800dd70 <__lshift+0xa4>
 800dd6c:	f108 0602 	add.w	r6, r8, #2
 800dd70:	3e01      	subs	r6, #1
 800dd72:	4638      	mov	r0, r7
 800dd74:	612e      	str	r6, [r5, #16]
 800dd76:	4621      	mov	r1, r4
 800dd78:	f7ff fd90 	bl	800d89c <_Bfree>
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd86:	3301      	adds	r3, #1
 800dd88:	e7c5      	b.n	800dd16 <__lshift+0x4a>
 800dd8a:	3904      	subs	r1, #4
 800dd8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd90:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd94:	459c      	cmp	ip, r3
 800dd96:	d8f9      	bhi.n	800dd8c <__lshift+0xc0>
 800dd98:	e7ea      	b.n	800dd70 <__lshift+0xa4>
 800dd9a:	bf00      	nop
 800dd9c:	0801250a 	.word	0x0801250a
 800dda0:	0801251b 	.word	0x0801251b

0800dda4 <__mcmp>:
 800dda4:	690a      	ldr	r2, [r1, #16]
 800dda6:	4603      	mov	r3, r0
 800dda8:	6900      	ldr	r0, [r0, #16]
 800ddaa:	1a80      	subs	r0, r0, r2
 800ddac:	b530      	push	{r4, r5, lr}
 800ddae:	d10e      	bne.n	800ddce <__mcmp+0x2a>
 800ddb0:	3314      	adds	r3, #20
 800ddb2:	3114      	adds	r1, #20
 800ddb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ddb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ddbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ddc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ddc4:	4295      	cmp	r5, r2
 800ddc6:	d003      	beq.n	800ddd0 <__mcmp+0x2c>
 800ddc8:	d205      	bcs.n	800ddd6 <__mcmp+0x32>
 800ddca:	f04f 30ff 	mov.w	r0, #4294967295
 800ddce:	bd30      	pop	{r4, r5, pc}
 800ddd0:	42a3      	cmp	r3, r4
 800ddd2:	d3f3      	bcc.n	800ddbc <__mcmp+0x18>
 800ddd4:	e7fb      	b.n	800ddce <__mcmp+0x2a>
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	e7f9      	b.n	800ddce <__mcmp+0x2a>
	...

0800dddc <__mdiff>:
 800dddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	4689      	mov	r9, r1
 800dde2:	4606      	mov	r6, r0
 800dde4:	4611      	mov	r1, r2
 800dde6:	4648      	mov	r0, r9
 800dde8:	4614      	mov	r4, r2
 800ddea:	f7ff ffdb 	bl	800dda4 <__mcmp>
 800ddee:	1e05      	subs	r5, r0, #0
 800ddf0:	d112      	bne.n	800de18 <__mdiff+0x3c>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff fd11 	bl	800d81c <_Balloc>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	b928      	cbnz	r0, 800de0a <__mdiff+0x2e>
 800ddfe:	4b3f      	ldr	r3, [pc, #252]	@ (800defc <__mdiff+0x120>)
 800de00:	f240 2137 	movw	r1, #567	@ 0x237
 800de04:	483e      	ldr	r0, [pc, #248]	@ (800df00 <__mdiff+0x124>)
 800de06:	f001 fa5f 	bl	800f2c8 <__assert_func>
 800de0a:	2301      	movs	r3, #1
 800de0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de10:	4610      	mov	r0, r2
 800de12:	b003      	add	sp, #12
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de18:	bfbc      	itt	lt
 800de1a:	464b      	movlt	r3, r9
 800de1c:	46a1      	movlt	r9, r4
 800de1e:	4630      	mov	r0, r6
 800de20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de24:	bfba      	itte	lt
 800de26:	461c      	movlt	r4, r3
 800de28:	2501      	movlt	r5, #1
 800de2a:	2500      	movge	r5, #0
 800de2c:	f7ff fcf6 	bl	800d81c <_Balloc>
 800de30:	4602      	mov	r2, r0
 800de32:	b918      	cbnz	r0, 800de3c <__mdiff+0x60>
 800de34:	4b31      	ldr	r3, [pc, #196]	@ (800defc <__mdiff+0x120>)
 800de36:	f240 2145 	movw	r1, #581	@ 0x245
 800de3a:	e7e3      	b.n	800de04 <__mdiff+0x28>
 800de3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800de40:	6926      	ldr	r6, [r4, #16]
 800de42:	60c5      	str	r5, [r0, #12]
 800de44:	f109 0310 	add.w	r3, r9, #16
 800de48:	f109 0514 	add.w	r5, r9, #20
 800de4c:	f104 0e14 	add.w	lr, r4, #20
 800de50:	f100 0b14 	add.w	fp, r0, #20
 800de54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800de58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	46d9      	mov	r9, fp
 800de60:	f04f 0c00 	mov.w	ip, #0
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800de6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	fa1f f38a 	uxth.w	r3, sl
 800de74:	4619      	mov	r1, r3
 800de76:	b283      	uxth	r3, r0
 800de78:	1acb      	subs	r3, r1, r3
 800de7a:	0c00      	lsrs	r0, r0, #16
 800de7c:	4463      	add	r3, ip
 800de7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de86:	b29b      	uxth	r3, r3
 800de88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de8c:	4576      	cmp	r6, lr
 800de8e:	f849 3b04 	str.w	r3, [r9], #4
 800de92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de96:	d8e5      	bhi.n	800de64 <__mdiff+0x88>
 800de98:	1b33      	subs	r3, r6, r4
 800de9a:	3b15      	subs	r3, #21
 800de9c:	f023 0303 	bic.w	r3, r3, #3
 800dea0:	3415      	adds	r4, #21
 800dea2:	3304      	adds	r3, #4
 800dea4:	42a6      	cmp	r6, r4
 800dea6:	bf38      	it	cc
 800dea8:	2304      	movcc	r3, #4
 800deaa:	441d      	add	r5, r3
 800deac:	445b      	add	r3, fp
 800deae:	461e      	mov	r6, r3
 800deb0:	462c      	mov	r4, r5
 800deb2:	4544      	cmp	r4, r8
 800deb4:	d30e      	bcc.n	800ded4 <__mdiff+0xf8>
 800deb6:	f108 0103 	add.w	r1, r8, #3
 800deba:	1b49      	subs	r1, r1, r5
 800debc:	f021 0103 	bic.w	r1, r1, #3
 800dec0:	3d03      	subs	r5, #3
 800dec2:	45a8      	cmp	r8, r5
 800dec4:	bf38      	it	cc
 800dec6:	2100      	movcc	r1, #0
 800dec8:	440b      	add	r3, r1
 800deca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dece:	b191      	cbz	r1, 800def6 <__mdiff+0x11a>
 800ded0:	6117      	str	r7, [r2, #16]
 800ded2:	e79d      	b.n	800de10 <__mdiff+0x34>
 800ded4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ded8:	46e6      	mov	lr, ip
 800deda:	0c08      	lsrs	r0, r1, #16
 800dedc:	fa1c fc81 	uxtah	ip, ip, r1
 800dee0:	4471      	add	r1, lr
 800dee2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dee6:	b289      	uxth	r1, r1
 800dee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800deec:	f846 1b04 	str.w	r1, [r6], #4
 800def0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800def4:	e7dd      	b.n	800deb2 <__mdiff+0xd6>
 800def6:	3f01      	subs	r7, #1
 800def8:	e7e7      	b.n	800deca <__mdiff+0xee>
 800defa:	bf00      	nop
 800defc:	0801250a 	.word	0x0801250a
 800df00:	0801251b 	.word	0x0801251b

0800df04 <__ulp>:
 800df04:	b082      	sub	sp, #8
 800df06:	ed8d 0b00 	vstr	d0, [sp]
 800df0a:	9a01      	ldr	r2, [sp, #4]
 800df0c:	4b0f      	ldr	r3, [pc, #60]	@ (800df4c <__ulp+0x48>)
 800df0e:	4013      	ands	r3, r2
 800df10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800df14:	2b00      	cmp	r3, #0
 800df16:	dc08      	bgt.n	800df2a <__ulp+0x26>
 800df18:	425b      	negs	r3, r3
 800df1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800df1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df22:	da04      	bge.n	800df2e <__ulp+0x2a>
 800df24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df28:	4113      	asrs	r3, r2
 800df2a:	2200      	movs	r2, #0
 800df2c:	e008      	b.n	800df40 <__ulp+0x3c>
 800df2e:	f1a2 0314 	sub.w	r3, r2, #20
 800df32:	2b1e      	cmp	r3, #30
 800df34:	bfda      	itte	le
 800df36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800df3a:	40da      	lsrle	r2, r3
 800df3c:	2201      	movgt	r2, #1
 800df3e:	2300      	movs	r3, #0
 800df40:	4619      	mov	r1, r3
 800df42:	4610      	mov	r0, r2
 800df44:	ec41 0b10 	vmov	d0, r0, r1
 800df48:	b002      	add	sp, #8
 800df4a:	4770      	bx	lr
 800df4c:	7ff00000 	.word	0x7ff00000

0800df50 <__b2d>:
 800df50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df54:	6906      	ldr	r6, [r0, #16]
 800df56:	f100 0814 	add.w	r8, r0, #20
 800df5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800df5e:	1f37      	subs	r7, r6, #4
 800df60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df64:	4610      	mov	r0, r2
 800df66:	f7ff fd4b 	bl	800da00 <__hi0bits>
 800df6a:	f1c0 0320 	rsb	r3, r0, #32
 800df6e:	280a      	cmp	r0, #10
 800df70:	600b      	str	r3, [r1, #0]
 800df72:	491b      	ldr	r1, [pc, #108]	@ (800dfe0 <__b2d+0x90>)
 800df74:	dc15      	bgt.n	800dfa2 <__b2d+0x52>
 800df76:	f1c0 0c0b 	rsb	ip, r0, #11
 800df7a:	fa22 f30c 	lsr.w	r3, r2, ip
 800df7e:	45b8      	cmp	r8, r7
 800df80:	ea43 0501 	orr.w	r5, r3, r1
 800df84:	bf34      	ite	cc
 800df86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df8a:	2300      	movcs	r3, #0
 800df8c:	3015      	adds	r0, #21
 800df8e:	fa02 f000 	lsl.w	r0, r2, r0
 800df92:	fa23 f30c 	lsr.w	r3, r3, ip
 800df96:	4303      	orrs	r3, r0
 800df98:	461c      	mov	r4, r3
 800df9a:	ec45 4b10 	vmov	d0, r4, r5
 800df9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa2:	45b8      	cmp	r8, r7
 800dfa4:	bf3a      	itte	cc
 800dfa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfaa:	f1a6 0708 	subcc.w	r7, r6, #8
 800dfae:	2300      	movcs	r3, #0
 800dfb0:	380b      	subs	r0, #11
 800dfb2:	d012      	beq.n	800dfda <__b2d+0x8a>
 800dfb4:	f1c0 0120 	rsb	r1, r0, #32
 800dfb8:	fa23 f401 	lsr.w	r4, r3, r1
 800dfbc:	4082      	lsls	r2, r0
 800dfbe:	4322      	orrs	r2, r4
 800dfc0:	4547      	cmp	r7, r8
 800dfc2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dfc6:	bf8c      	ite	hi
 800dfc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dfcc:	2200      	movls	r2, #0
 800dfce:	4083      	lsls	r3, r0
 800dfd0:	40ca      	lsrs	r2, r1
 800dfd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	e7de      	b.n	800df98 <__b2d+0x48>
 800dfda:	ea42 0501 	orr.w	r5, r2, r1
 800dfde:	e7db      	b.n	800df98 <__b2d+0x48>
 800dfe0:	3ff00000 	.word	0x3ff00000

0800dfe4 <__d2b>:
 800dfe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	460f      	mov	r7, r1
 800dfea:	2101      	movs	r1, #1
 800dfec:	ec59 8b10 	vmov	r8, r9, d0
 800dff0:	4616      	mov	r6, r2
 800dff2:	f7ff fc13 	bl	800d81c <_Balloc>
 800dff6:	4604      	mov	r4, r0
 800dff8:	b930      	cbnz	r0, 800e008 <__d2b+0x24>
 800dffa:	4602      	mov	r2, r0
 800dffc:	4b23      	ldr	r3, [pc, #140]	@ (800e08c <__d2b+0xa8>)
 800dffe:	4824      	ldr	r0, [pc, #144]	@ (800e090 <__d2b+0xac>)
 800e000:	f240 310f 	movw	r1, #783	@ 0x30f
 800e004:	f001 f960 	bl	800f2c8 <__assert_func>
 800e008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e00c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e010:	b10d      	cbz	r5, 800e016 <__d2b+0x32>
 800e012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	f1b8 0300 	subs.w	r3, r8, #0
 800e01c:	d023      	beq.n	800e066 <__d2b+0x82>
 800e01e:	4668      	mov	r0, sp
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	f7ff fd0c 	bl	800da3e <__lo0bits>
 800e026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e02a:	b1d0      	cbz	r0, 800e062 <__d2b+0x7e>
 800e02c:	f1c0 0320 	rsb	r3, r0, #32
 800e030:	fa02 f303 	lsl.w	r3, r2, r3
 800e034:	430b      	orrs	r3, r1
 800e036:	40c2      	lsrs	r2, r0
 800e038:	6163      	str	r3, [r4, #20]
 800e03a:	9201      	str	r2, [sp, #4]
 800e03c:	9b01      	ldr	r3, [sp, #4]
 800e03e:	61a3      	str	r3, [r4, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	bf0c      	ite	eq
 800e044:	2201      	moveq	r2, #1
 800e046:	2202      	movne	r2, #2
 800e048:	6122      	str	r2, [r4, #16]
 800e04a:	b1a5      	cbz	r5, 800e076 <__d2b+0x92>
 800e04c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e050:	4405      	add	r5, r0
 800e052:	603d      	str	r5, [r7, #0]
 800e054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e058:	6030      	str	r0, [r6, #0]
 800e05a:	4620      	mov	r0, r4
 800e05c:	b003      	add	sp, #12
 800e05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e062:	6161      	str	r1, [r4, #20]
 800e064:	e7ea      	b.n	800e03c <__d2b+0x58>
 800e066:	a801      	add	r0, sp, #4
 800e068:	f7ff fce9 	bl	800da3e <__lo0bits>
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	6163      	str	r3, [r4, #20]
 800e070:	3020      	adds	r0, #32
 800e072:	2201      	movs	r2, #1
 800e074:	e7e8      	b.n	800e048 <__d2b+0x64>
 800e076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e07a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e07e:	6038      	str	r0, [r7, #0]
 800e080:	6918      	ldr	r0, [r3, #16]
 800e082:	f7ff fcbd 	bl	800da00 <__hi0bits>
 800e086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e08a:	e7e5      	b.n	800e058 <__d2b+0x74>
 800e08c:	0801250a 	.word	0x0801250a
 800e090:	0801251b 	.word	0x0801251b

0800e094 <__ratio>:
 800e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e098:	b085      	sub	sp, #20
 800e09a:	e9cd 1000 	strd	r1, r0, [sp]
 800e09e:	a902      	add	r1, sp, #8
 800e0a0:	f7ff ff56 	bl	800df50 <__b2d>
 800e0a4:	9800      	ldr	r0, [sp, #0]
 800e0a6:	a903      	add	r1, sp, #12
 800e0a8:	ec55 4b10 	vmov	r4, r5, d0
 800e0ac:	f7ff ff50 	bl	800df50 <__b2d>
 800e0b0:	9b01      	ldr	r3, [sp, #4]
 800e0b2:	6919      	ldr	r1, [r3, #16]
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	1ac9      	subs	r1, r1, r3
 800e0ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e0be:	1a9b      	subs	r3, r3, r2
 800e0c0:	ec5b ab10 	vmov	sl, fp, d0
 800e0c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bfce      	itee	gt
 800e0cc:	462a      	movgt	r2, r5
 800e0ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0d2:	465a      	movle	r2, fp
 800e0d4:	462f      	mov	r7, r5
 800e0d6:	46d9      	mov	r9, fp
 800e0d8:	bfcc      	ite	gt
 800e0da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e0de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e0e2:	464b      	mov	r3, r9
 800e0e4:	4652      	mov	r2, sl
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	4639      	mov	r1, r7
 800e0ea:	f7f2 fbbf 	bl	800086c <__aeabi_ddiv>
 800e0ee:	ec41 0b10 	vmov	d0, r0, r1
 800e0f2:	b005      	add	sp, #20
 800e0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0f8 <__copybits>:
 800e0f8:	3901      	subs	r1, #1
 800e0fa:	b570      	push	{r4, r5, r6, lr}
 800e0fc:	1149      	asrs	r1, r1, #5
 800e0fe:	6914      	ldr	r4, [r2, #16]
 800e100:	3101      	adds	r1, #1
 800e102:	f102 0314 	add.w	r3, r2, #20
 800e106:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e10a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e10e:	1f05      	subs	r5, r0, #4
 800e110:	42a3      	cmp	r3, r4
 800e112:	d30c      	bcc.n	800e12e <__copybits+0x36>
 800e114:	1aa3      	subs	r3, r4, r2
 800e116:	3b11      	subs	r3, #17
 800e118:	f023 0303 	bic.w	r3, r3, #3
 800e11c:	3211      	adds	r2, #17
 800e11e:	42a2      	cmp	r2, r4
 800e120:	bf88      	it	hi
 800e122:	2300      	movhi	r3, #0
 800e124:	4418      	add	r0, r3
 800e126:	2300      	movs	r3, #0
 800e128:	4288      	cmp	r0, r1
 800e12a:	d305      	bcc.n	800e138 <__copybits+0x40>
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
 800e12e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e132:	f845 6f04 	str.w	r6, [r5, #4]!
 800e136:	e7eb      	b.n	800e110 <__copybits+0x18>
 800e138:	f840 3b04 	str.w	r3, [r0], #4
 800e13c:	e7f4      	b.n	800e128 <__copybits+0x30>

0800e13e <__any_on>:
 800e13e:	f100 0214 	add.w	r2, r0, #20
 800e142:	6900      	ldr	r0, [r0, #16]
 800e144:	114b      	asrs	r3, r1, #5
 800e146:	4298      	cmp	r0, r3
 800e148:	b510      	push	{r4, lr}
 800e14a:	db11      	blt.n	800e170 <__any_on+0x32>
 800e14c:	dd0a      	ble.n	800e164 <__any_on+0x26>
 800e14e:	f011 011f 	ands.w	r1, r1, #31
 800e152:	d007      	beq.n	800e164 <__any_on+0x26>
 800e154:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e158:	fa24 f001 	lsr.w	r0, r4, r1
 800e15c:	fa00 f101 	lsl.w	r1, r0, r1
 800e160:	428c      	cmp	r4, r1
 800e162:	d10b      	bne.n	800e17c <__any_on+0x3e>
 800e164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e168:	4293      	cmp	r3, r2
 800e16a:	d803      	bhi.n	800e174 <__any_on+0x36>
 800e16c:	2000      	movs	r0, #0
 800e16e:	bd10      	pop	{r4, pc}
 800e170:	4603      	mov	r3, r0
 800e172:	e7f7      	b.n	800e164 <__any_on+0x26>
 800e174:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e178:	2900      	cmp	r1, #0
 800e17a:	d0f5      	beq.n	800e168 <__any_on+0x2a>
 800e17c:	2001      	movs	r0, #1
 800e17e:	e7f6      	b.n	800e16e <__any_on+0x30>

0800e180 <sulp>:
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	4604      	mov	r4, r0
 800e184:	460d      	mov	r5, r1
 800e186:	ec45 4b10 	vmov	d0, r4, r5
 800e18a:	4616      	mov	r6, r2
 800e18c:	f7ff feba 	bl	800df04 <__ulp>
 800e190:	ec51 0b10 	vmov	r0, r1, d0
 800e194:	b17e      	cbz	r6, 800e1b6 <sulp+0x36>
 800e196:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e19a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	dd09      	ble.n	800e1b6 <sulp+0x36>
 800e1a2:	051b      	lsls	r3, r3, #20
 800e1a4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e1a8:	2400      	movs	r4, #0
 800e1aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	462b      	mov	r3, r5
 800e1b2:	f7f2 fa31 	bl	8000618 <__aeabi_dmul>
 800e1b6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}
 800e1bc:	0000      	movs	r0, r0
	...

0800e1c0 <_strtod_l>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	b09f      	sub	sp, #124	@ 0x7c
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e1ce:	9005      	str	r0, [sp, #20]
 800e1d0:	f04f 0a00 	mov.w	sl, #0
 800e1d4:	f04f 0b00 	mov.w	fp, #0
 800e1d8:	460a      	mov	r2, r1
 800e1da:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1dc:	7811      	ldrb	r1, [r2, #0]
 800e1de:	292b      	cmp	r1, #43	@ 0x2b
 800e1e0:	d04a      	beq.n	800e278 <_strtod_l+0xb8>
 800e1e2:	d838      	bhi.n	800e256 <_strtod_l+0x96>
 800e1e4:	290d      	cmp	r1, #13
 800e1e6:	d832      	bhi.n	800e24e <_strtod_l+0x8e>
 800e1e8:	2908      	cmp	r1, #8
 800e1ea:	d832      	bhi.n	800e252 <_strtod_l+0x92>
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	d03b      	beq.n	800e268 <_strtod_l+0xa8>
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e1f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e1f6:	782a      	ldrb	r2, [r5, #0]
 800e1f8:	2a30      	cmp	r2, #48	@ 0x30
 800e1fa:	f040 80b3 	bne.w	800e364 <_strtod_l+0x1a4>
 800e1fe:	786a      	ldrb	r2, [r5, #1]
 800e200:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e204:	2a58      	cmp	r2, #88	@ 0x58
 800e206:	d16e      	bne.n	800e2e6 <_strtod_l+0x126>
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	4a8e      	ldr	r2, [pc, #568]	@ (800e44c <_strtod_l+0x28c>)
 800e214:	9805      	ldr	r0, [sp, #20]
 800e216:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e218:	a919      	add	r1, sp, #100	@ 0x64
 800e21a:	f001 f8db 	bl	800f3d4 <__gethex>
 800e21e:	f010 060f 	ands.w	r6, r0, #15
 800e222:	4604      	mov	r4, r0
 800e224:	d005      	beq.n	800e232 <_strtod_l+0x72>
 800e226:	2e06      	cmp	r6, #6
 800e228:	d128      	bne.n	800e27c <_strtod_l+0xbc>
 800e22a:	3501      	adds	r5, #1
 800e22c:	2300      	movs	r3, #0
 800e22e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e230:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e234:	2b00      	cmp	r3, #0
 800e236:	f040 858e 	bne.w	800ed56 <_strtod_l+0xb96>
 800e23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e23c:	b1cb      	cbz	r3, 800e272 <_strtod_l+0xb2>
 800e23e:	4652      	mov	r2, sl
 800e240:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e244:	ec43 2b10 	vmov	d0, r2, r3
 800e248:	b01f      	add	sp, #124	@ 0x7c
 800e24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24e:	2920      	cmp	r1, #32
 800e250:	d1ce      	bne.n	800e1f0 <_strtod_l+0x30>
 800e252:	3201      	adds	r2, #1
 800e254:	e7c1      	b.n	800e1da <_strtod_l+0x1a>
 800e256:	292d      	cmp	r1, #45	@ 0x2d
 800e258:	d1ca      	bne.n	800e1f0 <_strtod_l+0x30>
 800e25a:	2101      	movs	r1, #1
 800e25c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e25e:	1c51      	adds	r1, r2, #1
 800e260:	9119      	str	r1, [sp, #100]	@ 0x64
 800e262:	7852      	ldrb	r2, [r2, #1]
 800e264:	2a00      	cmp	r2, #0
 800e266:	d1c5      	bne.n	800e1f4 <_strtod_l+0x34>
 800e268:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e26a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f040 8570 	bne.w	800ed52 <_strtod_l+0xb92>
 800e272:	4652      	mov	r2, sl
 800e274:	465b      	mov	r3, fp
 800e276:	e7e5      	b.n	800e244 <_strtod_l+0x84>
 800e278:	2100      	movs	r1, #0
 800e27a:	e7ef      	b.n	800e25c <_strtod_l+0x9c>
 800e27c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e27e:	b13a      	cbz	r2, 800e290 <_strtod_l+0xd0>
 800e280:	2135      	movs	r1, #53	@ 0x35
 800e282:	a81c      	add	r0, sp, #112	@ 0x70
 800e284:	f7ff ff38 	bl	800e0f8 <__copybits>
 800e288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e28a:	9805      	ldr	r0, [sp, #20]
 800e28c:	f7ff fb06 	bl	800d89c <_Bfree>
 800e290:	3e01      	subs	r6, #1
 800e292:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e294:	2e04      	cmp	r6, #4
 800e296:	d806      	bhi.n	800e2a6 <_strtod_l+0xe6>
 800e298:	e8df f006 	tbb	[pc, r6]
 800e29c:	201d0314 	.word	0x201d0314
 800e2a0:	14          	.byte	0x14
 800e2a1:	00          	.byte	0x00
 800e2a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e2a6:	05e1      	lsls	r1, r4, #23
 800e2a8:	bf48      	it	mi
 800e2aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e2ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2b2:	0d1b      	lsrs	r3, r3, #20
 800e2b4:	051b      	lsls	r3, r3, #20
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1bb      	bne.n	800e232 <_strtod_l+0x72>
 800e2ba:	f7fe fbcd 	bl	800ca58 <__errno>
 800e2be:	2322      	movs	r3, #34	@ 0x22
 800e2c0:	6003      	str	r3, [r0, #0]
 800e2c2:	e7b6      	b.n	800e232 <_strtod_l+0x72>
 800e2c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e2c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e2d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2d4:	e7e7      	b.n	800e2a6 <_strtod_l+0xe6>
 800e2d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e454 <_strtod_l+0x294>
 800e2da:	e7e4      	b.n	800e2a6 <_strtod_l+0xe6>
 800e2dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e2e0:	f04f 3aff 	mov.w	sl, #4294967295
 800e2e4:	e7df      	b.n	800e2a6 <_strtod_l+0xe6>
 800e2e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2e8:	1c5a      	adds	r2, r3, #1
 800e2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2ec:	785b      	ldrb	r3, [r3, #1]
 800e2ee:	2b30      	cmp	r3, #48	@ 0x30
 800e2f0:	d0f9      	beq.n	800e2e6 <_strtod_l+0x126>
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d09d      	beq.n	800e232 <_strtod_l+0x72>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2fe:	2300      	movs	r3, #0
 800e300:	9308      	str	r3, [sp, #32]
 800e302:	930a      	str	r3, [sp, #40]	@ 0x28
 800e304:	461f      	mov	r7, r3
 800e306:	220a      	movs	r2, #10
 800e308:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e30a:	7805      	ldrb	r5, [r0, #0]
 800e30c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e310:	b2d9      	uxtb	r1, r3
 800e312:	2909      	cmp	r1, #9
 800e314:	d928      	bls.n	800e368 <_strtod_l+0x1a8>
 800e316:	494e      	ldr	r1, [pc, #312]	@ (800e450 <_strtod_l+0x290>)
 800e318:	2201      	movs	r2, #1
 800e31a:	f000 ffbb 	bl	800f294 <strncmp>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d032      	beq.n	800e388 <_strtod_l+0x1c8>
 800e322:	2000      	movs	r0, #0
 800e324:	462a      	mov	r2, r5
 800e326:	4681      	mov	r9, r0
 800e328:	463d      	mov	r5, r7
 800e32a:	4603      	mov	r3, r0
 800e32c:	2a65      	cmp	r2, #101	@ 0x65
 800e32e:	d001      	beq.n	800e334 <_strtod_l+0x174>
 800e330:	2a45      	cmp	r2, #69	@ 0x45
 800e332:	d114      	bne.n	800e35e <_strtod_l+0x19e>
 800e334:	b91d      	cbnz	r5, 800e33e <_strtod_l+0x17e>
 800e336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e338:	4302      	orrs	r2, r0
 800e33a:	d095      	beq.n	800e268 <_strtod_l+0xa8>
 800e33c:	2500      	movs	r5, #0
 800e33e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e340:	1c62      	adds	r2, r4, #1
 800e342:	9219      	str	r2, [sp, #100]	@ 0x64
 800e344:	7862      	ldrb	r2, [r4, #1]
 800e346:	2a2b      	cmp	r2, #43	@ 0x2b
 800e348:	d077      	beq.n	800e43a <_strtod_l+0x27a>
 800e34a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e34c:	d07b      	beq.n	800e446 <_strtod_l+0x286>
 800e34e:	f04f 0c00 	mov.w	ip, #0
 800e352:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e356:	2909      	cmp	r1, #9
 800e358:	f240 8082 	bls.w	800e460 <_strtod_l+0x2a0>
 800e35c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e35e:	f04f 0800 	mov.w	r8, #0
 800e362:	e0a2      	b.n	800e4aa <_strtod_l+0x2ea>
 800e364:	2300      	movs	r3, #0
 800e366:	e7c7      	b.n	800e2f8 <_strtod_l+0x138>
 800e368:	2f08      	cmp	r7, #8
 800e36a:	bfd5      	itete	le
 800e36c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e36e:	9908      	ldrgt	r1, [sp, #32]
 800e370:	fb02 3301 	mlale	r3, r2, r1, r3
 800e374:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e378:	f100 0001 	add.w	r0, r0, #1
 800e37c:	bfd4      	ite	le
 800e37e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e380:	9308      	strgt	r3, [sp, #32]
 800e382:	3701      	adds	r7, #1
 800e384:	9019      	str	r0, [sp, #100]	@ 0x64
 800e386:	e7bf      	b.n	800e308 <_strtod_l+0x148>
 800e388:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e38a:	1c5a      	adds	r2, r3, #1
 800e38c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e38e:	785a      	ldrb	r2, [r3, #1]
 800e390:	b37f      	cbz	r7, 800e3f2 <_strtod_l+0x232>
 800e392:	4681      	mov	r9, r0
 800e394:	463d      	mov	r5, r7
 800e396:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e39a:	2b09      	cmp	r3, #9
 800e39c:	d912      	bls.n	800e3c4 <_strtod_l+0x204>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e7c4      	b.n	800e32c <_strtod_l+0x16c>
 800e3a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3a8:	785a      	ldrb	r2, [r3, #1]
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	2a30      	cmp	r2, #48	@ 0x30
 800e3ae:	d0f8      	beq.n	800e3a2 <_strtod_l+0x1e2>
 800e3b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	f200 84d3 	bhi.w	800ed60 <_strtod_l+0xba0>
 800e3ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3be:	4681      	mov	r9, r0
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	4605      	mov	r5, r0
 800e3c4:	3a30      	subs	r2, #48	@ 0x30
 800e3c6:	f100 0301 	add.w	r3, r0, #1
 800e3ca:	d02a      	beq.n	800e422 <_strtod_l+0x262>
 800e3cc:	4499      	add	r9, r3
 800e3ce:	eb00 0c05 	add.w	ip, r0, r5
 800e3d2:	462b      	mov	r3, r5
 800e3d4:	210a      	movs	r1, #10
 800e3d6:	4563      	cmp	r3, ip
 800e3d8:	d10d      	bne.n	800e3f6 <_strtod_l+0x236>
 800e3da:	1c69      	adds	r1, r5, #1
 800e3dc:	4401      	add	r1, r0
 800e3de:	4428      	add	r0, r5
 800e3e0:	2808      	cmp	r0, #8
 800e3e2:	dc16      	bgt.n	800e412 <_strtod_l+0x252>
 800e3e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3e6:	230a      	movs	r3, #10
 800e3e8:	fb03 2300 	mla	r3, r3, r0, r2
 800e3ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e018      	b.n	800e424 <_strtod_l+0x264>
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	e7da      	b.n	800e3ac <_strtod_l+0x1ec>
 800e3f6:	2b08      	cmp	r3, #8
 800e3f8:	f103 0301 	add.w	r3, r3, #1
 800e3fc:	dc03      	bgt.n	800e406 <_strtod_l+0x246>
 800e3fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e400:	434e      	muls	r6, r1
 800e402:	960a      	str	r6, [sp, #40]	@ 0x28
 800e404:	e7e7      	b.n	800e3d6 <_strtod_l+0x216>
 800e406:	2b10      	cmp	r3, #16
 800e408:	bfde      	ittt	le
 800e40a:	9e08      	ldrle	r6, [sp, #32]
 800e40c:	434e      	mulle	r6, r1
 800e40e:	9608      	strle	r6, [sp, #32]
 800e410:	e7e1      	b.n	800e3d6 <_strtod_l+0x216>
 800e412:	280f      	cmp	r0, #15
 800e414:	dceb      	bgt.n	800e3ee <_strtod_l+0x22e>
 800e416:	9808      	ldr	r0, [sp, #32]
 800e418:	230a      	movs	r3, #10
 800e41a:	fb03 2300 	mla	r3, r3, r0, r2
 800e41e:	9308      	str	r3, [sp, #32]
 800e420:	e7e5      	b.n	800e3ee <_strtod_l+0x22e>
 800e422:	4629      	mov	r1, r5
 800e424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e426:	1c50      	adds	r0, r2, #1
 800e428:	9019      	str	r0, [sp, #100]	@ 0x64
 800e42a:	7852      	ldrb	r2, [r2, #1]
 800e42c:	4618      	mov	r0, r3
 800e42e:	460d      	mov	r5, r1
 800e430:	e7b1      	b.n	800e396 <_strtod_l+0x1d6>
 800e432:	f04f 0900 	mov.w	r9, #0
 800e436:	2301      	movs	r3, #1
 800e438:	e77d      	b.n	800e336 <_strtod_l+0x176>
 800e43a:	f04f 0c00 	mov.w	ip, #0
 800e43e:	1ca2      	adds	r2, r4, #2
 800e440:	9219      	str	r2, [sp, #100]	@ 0x64
 800e442:	78a2      	ldrb	r2, [r4, #2]
 800e444:	e785      	b.n	800e352 <_strtod_l+0x192>
 800e446:	f04f 0c01 	mov.w	ip, #1
 800e44a:	e7f8      	b.n	800e43e <_strtod_l+0x27e>
 800e44c:	08012688 	.word	0x08012688
 800e450:	08012670 	.word	0x08012670
 800e454:	7ff00000 	.word	0x7ff00000
 800e458:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e45a:	1c51      	adds	r1, r2, #1
 800e45c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e45e:	7852      	ldrb	r2, [r2, #1]
 800e460:	2a30      	cmp	r2, #48	@ 0x30
 800e462:	d0f9      	beq.n	800e458 <_strtod_l+0x298>
 800e464:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e468:	2908      	cmp	r1, #8
 800e46a:	f63f af78 	bhi.w	800e35e <_strtod_l+0x19e>
 800e46e:	3a30      	subs	r2, #48	@ 0x30
 800e470:	920e      	str	r2, [sp, #56]	@ 0x38
 800e472:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e474:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e476:	f04f 080a 	mov.w	r8, #10
 800e47a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e47c:	1c56      	adds	r6, r2, #1
 800e47e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e480:	7852      	ldrb	r2, [r2, #1]
 800e482:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e486:	f1be 0f09 	cmp.w	lr, #9
 800e48a:	d939      	bls.n	800e500 <_strtod_l+0x340>
 800e48c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e48e:	1a76      	subs	r6, r6, r1
 800e490:	2e08      	cmp	r6, #8
 800e492:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e496:	dc03      	bgt.n	800e4a0 <_strtod_l+0x2e0>
 800e498:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e49a:	4588      	cmp	r8, r1
 800e49c:	bfa8      	it	ge
 800e49e:	4688      	movge	r8, r1
 800e4a0:	f1bc 0f00 	cmp.w	ip, #0
 800e4a4:	d001      	beq.n	800e4aa <_strtod_l+0x2ea>
 800e4a6:	f1c8 0800 	rsb	r8, r8, #0
 800e4aa:	2d00      	cmp	r5, #0
 800e4ac:	d14e      	bne.n	800e54c <_strtod_l+0x38c>
 800e4ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4b0:	4308      	orrs	r0, r1
 800e4b2:	f47f aebe 	bne.w	800e232 <_strtod_l+0x72>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f47f aed6 	bne.w	800e268 <_strtod_l+0xa8>
 800e4bc:	2a69      	cmp	r2, #105	@ 0x69
 800e4be:	d028      	beq.n	800e512 <_strtod_l+0x352>
 800e4c0:	dc25      	bgt.n	800e50e <_strtod_l+0x34e>
 800e4c2:	2a49      	cmp	r2, #73	@ 0x49
 800e4c4:	d025      	beq.n	800e512 <_strtod_l+0x352>
 800e4c6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e4c8:	f47f aece 	bne.w	800e268 <_strtod_l+0xa8>
 800e4cc:	499b      	ldr	r1, [pc, #620]	@ (800e73c <_strtod_l+0x57c>)
 800e4ce:	a819      	add	r0, sp, #100	@ 0x64
 800e4d0:	f001 f9a2 	bl	800f818 <__match>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	f43f aec7 	beq.w	800e268 <_strtod_l+0xa8>
 800e4da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b28      	cmp	r3, #40	@ 0x28
 800e4e0:	d12e      	bne.n	800e540 <_strtod_l+0x380>
 800e4e2:	4997      	ldr	r1, [pc, #604]	@ (800e740 <_strtod_l+0x580>)
 800e4e4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4e6:	a819      	add	r0, sp, #100	@ 0x64
 800e4e8:	f001 f9aa 	bl	800f840 <__hexnan>
 800e4ec:	2805      	cmp	r0, #5
 800e4ee:	d127      	bne.n	800e540 <_strtod_l+0x380>
 800e4f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e4f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e4fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e4fe:	e698      	b.n	800e232 <_strtod_l+0x72>
 800e500:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e502:	fb08 2101 	mla	r1, r8, r1, r2
 800e506:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e50a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e50c:	e7b5      	b.n	800e47a <_strtod_l+0x2ba>
 800e50e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e510:	e7da      	b.n	800e4c8 <_strtod_l+0x308>
 800e512:	498c      	ldr	r1, [pc, #560]	@ (800e744 <_strtod_l+0x584>)
 800e514:	a819      	add	r0, sp, #100	@ 0x64
 800e516:	f001 f97f 	bl	800f818 <__match>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	f43f aea4 	beq.w	800e268 <_strtod_l+0xa8>
 800e520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e522:	4989      	ldr	r1, [pc, #548]	@ (800e748 <_strtod_l+0x588>)
 800e524:	3b01      	subs	r3, #1
 800e526:	a819      	add	r0, sp, #100	@ 0x64
 800e528:	9319      	str	r3, [sp, #100]	@ 0x64
 800e52a:	f001 f975 	bl	800f818 <__match>
 800e52e:	b910      	cbnz	r0, 800e536 <_strtod_l+0x376>
 800e530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e532:	3301      	adds	r3, #1
 800e534:	9319      	str	r3, [sp, #100]	@ 0x64
 800e536:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e758 <_strtod_l+0x598>
 800e53a:	f04f 0a00 	mov.w	sl, #0
 800e53e:	e678      	b.n	800e232 <_strtod_l+0x72>
 800e540:	4882      	ldr	r0, [pc, #520]	@ (800e74c <_strtod_l+0x58c>)
 800e542:	f000 feb9 	bl	800f2b8 <nan>
 800e546:	ec5b ab10 	vmov	sl, fp, d0
 800e54a:	e672      	b.n	800e232 <_strtod_l+0x72>
 800e54c:	eba8 0309 	sub.w	r3, r8, r9
 800e550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e552:	9309      	str	r3, [sp, #36]	@ 0x24
 800e554:	2f00      	cmp	r7, #0
 800e556:	bf08      	it	eq
 800e558:	462f      	moveq	r7, r5
 800e55a:	2d10      	cmp	r5, #16
 800e55c:	462c      	mov	r4, r5
 800e55e:	bfa8      	it	ge
 800e560:	2410      	movge	r4, #16
 800e562:	f7f1 ffdf 	bl	8000524 <__aeabi_ui2d>
 800e566:	2d09      	cmp	r5, #9
 800e568:	4682      	mov	sl, r0
 800e56a:	468b      	mov	fp, r1
 800e56c:	dc13      	bgt.n	800e596 <_strtod_l+0x3d6>
 800e56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e570:	2b00      	cmp	r3, #0
 800e572:	f43f ae5e 	beq.w	800e232 <_strtod_l+0x72>
 800e576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e578:	dd78      	ble.n	800e66c <_strtod_l+0x4ac>
 800e57a:	2b16      	cmp	r3, #22
 800e57c:	dc5f      	bgt.n	800e63e <_strtod_l+0x47e>
 800e57e:	4974      	ldr	r1, [pc, #464]	@ (800e750 <_strtod_l+0x590>)
 800e580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e588:	4652      	mov	r2, sl
 800e58a:	465b      	mov	r3, fp
 800e58c:	f7f2 f844 	bl	8000618 <__aeabi_dmul>
 800e590:	4682      	mov	sl, r0
 800e592:	468b      	mov	fp, r1
 800e594:	e64d      	b.n	800e232 <_strtod_l+0x72>
 800e596:	4b6e      	ldr	r3, [pc, #440]	@ (800e750 <_strtod_l+0x590>)
 800e598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e59c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e5a0:	f7f2 f83a 	bl	8000618 <__aeabi_dmul>
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	9808      	ldr	r0, [sp, #32]
 800e5a8:	468b      	mov	fp, r1
 800e5aa:	f7f1 ffbb 	bl	8000524 <__aeabi_ui2d>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	4650      	mov	r0, sl
 800e5b4:	4659      	mov	r1, fp
 800e5b6:	f7f1 fe79 	bl	80002ac <__adddf3>
 800e5ba:	2d0f      	cmp	r5, #15
 800e5bc:	4682      	mov	sl, r0
 800e5be:	468b      	mov	fp, r1
 800e5c0:	ddd5      	ble.n	800e56e <_strtod_l+0x3ae>
 800e5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c4:	1b2c      	subs	r4, r5, r4
 800e5c6:	441c      	add	r4, r3
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	f340 8096 	ble.w	800e6fa <_strtod_l+0x53a>
 800e5ce:	f014 030f 	ands.w	r3, r4, #15
 800e5d2:	d00a      	beq.n	800e5ea <_strtod_l+0x42a>
 800e5d4:	495e      	ldr	r1, [pc, #376]	@ (800e750 <_strtod_l+0x590>)
 800e5d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e5da:	4652      	mov	r2, sl
 800e5dc:	465b      	mov	r3, fp
 800e5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5e2:	f7f2 f819 	bl	8000618 <__aeabi_dmul>
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	468b      	mov	fp, r1
 800e5ea:	f034 040f 	bics.w	r4, r4, #15
 800e5ee:	d073      	beq.n	800e6d8 <_strtod_l+0x518>
 800e5f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e5f4:	dd48      	ble.n	800e688 <_strtod_l+0x4c8>
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	46a0      	mov	r8, r4
 800e5fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800e5fc:	46a1      	mov	r9, r4
 800e5fe:	9a05      	ldr	r2, [sp, #20]
 800e600:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e758 <_strtod_l+0x598>
 800e604:	2322      	movs	r3, #34	@ 0x22
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f04f 0a00 	mov.w	sl, #0
 800e60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f43f ae0f 	beq.w	800e232 <_strtod_l+0x72>
 800e614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e616:	9805      	ldr	r0, [sp, #20]
 800e618:	f7ff f940 	bl	800d89c <_Bfree>
 800e61c:	9805      	ldr	r0, [sp, #20]
 800e61e:	4649      	mov	r1, r9
 800e620:	f7ff f93c 	bl	800d89c <_Bfree>
 800e624:	9805      	ldr	r0, [sp, #20]
 800e626:	4641      	mov	r1, r8
 800e628:	f7ff f938 	bl	800d89c <_Bfree>
 800e62c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e62e:	9805      	ldr	r0, [sp, #20]
 800e630:	f7ff f934 	bl	800d89c <_Bfree>
 800e634:	9805      	ldr	r0, [sp, #20]
 800e636:	4621      	mov	r1, r4
 800e638:	f7ff f930 	bl	800d89c <_Bfree>
 800e63c:	e5f9      	b.n	800e232 <_strtod_l+0x72>
 800e63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e640:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e644:	4293      	cmp	r3, r2
 800e646:	dbbc      	blt.n	800e5c2 <_strtod_l+0x402>
 800e648:	4c41      	ldr	r4, [pc, #260]	@ (800e750 <_strtod_l+0x590>)
 800e64a:	f1c5 050f 	rsb	r5, r5, #15
 800e64e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e652:	4652      	mov	r2, sl
 800e654:	465b      	mov	r3, fp
 800e656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65a:	f7f1 ffdd 	bl	8000618 <__aeabi_dmul>
 800e65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e660:	1b5d      	subs	r5, r3, r5
 800e662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e66a:	e78f      	b.n	800e58c <_strtod_l+0x3cc>
 800e66c:	3316      	adds	r3, #22
 800e66e:	dba8      	blt.n	800e5c2 <_strtod_l+0x402>
 800e670:	4b37      	ldr	r3, [pc, #220]	@ (800e750 <_strtod_l+0x590>)
 800e672:	eba9 0808 	sub.w	r8, r9, r8
 800e676:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e67a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e67e:	4650      	mov	r0, sl
 800e680:	4659      	mov	r1, fp
 800e682:	f7f2 f8f3 	bl	800086c <__aeabi_ddiv>
 800e686:	e783      	b.n	800e590 <_strtod_l+0x3d0>
 800e688:	4b32      	ldr	r3, [pc, #200]	@ (800e754 <_strtod_l+0x594>)
 800e68a:	9308      	str	r3, [sp, #32]
 800e68c:	2300      	movs	r3, #0
 800e68e:	1124      	asrs	r4, r4, #4
 800e690:	4650      	mov	r0, sl
 800e692:	4659      	mov	r1, fp
 800e694:	461e      	mov	r6, r3
 800e696:	2c01      	cmp	r4, #1
 800e698:	dc21      	bgt.n	800e6de <_strtod_l+0x51e>
 800e69a:	b10b      	cbz	r3, 800e6a0 <_strtod_l+0x4e0>
 800e69c:	4682      	mov	sl, r0
 800e69e:	468b      	mov	fp, r1
 800e6a0:	492c      	ldr	r1, [pc, #176]	@ (800e754 <_strtod_l+0x594>)
 800e6a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e6a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	465b      	mov	r3, fp
 800e6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b2:	f7f1 ffb1 	bl	8000618 <__aeabi_dmul>
 800e6b6:	4b28      	ldr	r3, [pc, #160]	@ (800e758 <_strtod_l+0x598>)
 800e6b8:	460a      	mov	r2, r1
 800e6ba:	400b      	ands	r3, r1
 800e6bc:	4927      	ldr	r1, [pc, #156]	@ (800e75c <_strtod_l+0x59c>)
 800e6be:	428b      	cmp	r3, r1
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	d898      	bhi.n	800e5f6 <_strtod_l+0x436>
 800e6c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e6c8:	428b      	cmp	r3, r1
 800e6ca:	bf86      	itte	hi
 800e6cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e760 <_strtod_l+0x5a0>
 800e6d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e6d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e6d8:	2300      	movs	r3, #0
 800e6da:	9308      	str	r3, [sp, #32]
 800e6dc:	e07a      	b.n	800e7d4 <_strtod_l+0x614>
 800e6de:	07e2      	lsls	r2, r4, #31
 800e6e0:	d505      	bpl.n	800e6ee <_strtod_l+0x52e>
 800e6e2:	9b08      	ldr	r3, [sp, #32]
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f7f1 ff96 	bl	8000618 <__aeabi_dmul>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	9a08      	ldr	r2, [sp, #32]
 800e6f0:	3208      	adds	r2, #8
 800e6f2:	3601      	adds	r6, #1
 800e6f4:	1064      	asrs	r4, r4, #1
 800e6f6:	9208      	str	r2, [sp, #32]
 800e6f8:	e7cd      	b.n	800e696 <_strtod_l+0x4d6>
 800e6fa:	d0ed      	beq.n	800e6d8 <_strtod_l+0x518>
 800e6fc:	4264      	negs	r4, r4
 800e6fe:	f014 020f 	ands.w	r2, r4, #15
 800e702:	d00a      	beq.n	800e71a <_strtod_l+0x55a>
 800e704:	4b12      	ldr	r3, [pc, #72]	@ (800e750 <_strtod_l+0x590>)
 800e706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e70a:	4650      	mov	r0, sl
 800e70c:	4659      	mov	r1, fp
 800e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e712:	f7f2 f8ab 	bl	800086c <__aeabi_ddiv>
 800e716:	4682      	mov	sl, r0
 800e718:	468b      	mov	fp, r1
 800e71a:	1124      	asrs	r4, r4, #4
 800e71c:	d0dc      	beq.n	800e6d8 <_strtod_l+0x518>
 800e71e:	2c1f      	cmp	r4, #31
 800e720:	dd20      	ble.n	800e764 <_strtod_l+0x5a4>
 800e722:	2400      	movs	r4, #0
 800e724:	46a0      	mov	r8, r4
 800e726:	940a      	str	r4, [sp, #40]	@ 0x28
 800e728:	46a1      	mov	r9, r4
 800e72a:	9a05      	ldr	r2, [sp, #20]
 800e72c:	2322      	movs	r3, #34	@ 0x22
 800e72e:	f04f 0a00 	mov.w	sl, #0
 800e732:	f04f 0b00 	mov.w	fp, #0
 800e736:	6013      	str	r3, [r2, #0]
 800e738:	e768      	b.n	800e60c <_strtod_l+0x44c>
 800e73a:	bf00      	nop
 800e73c:	08012462 	.word	0x08012462
 800e740:	08012674 	.word	0x08012674
 800e744:	0801245a 	.word	0x0801245a
 800e748:	08012491 	.word	0x08012491
 800e74c:	0801281d 	.word	0x0801281d
 800e750:	080125a8 	.word	0x080125a8
 800e754:	08012580 	.word	0x08012580
 800e758:	7ff00000 	.word	0x7ff00000
 800e75c:	7ca00000 	.word	0x7ca00000
 800e760:	7fefffff 	.word	0x7fefffff
 800e764:	f014 0310 	ands.w	r3, r4, #16
 800e768:	bf18      	it	ne
 800e76a:	236a      	movne	r3, #106	@ 0x6a
 800e76c:	4ea9      	ldr	r6, [pc, #676]	@ (800ea14 <_strtod_l+0x854>)
 800e76e:	9308      	str	r3, [sp, #32]
 800e770:	4650      	mov	r0, sl
 800e772:	4659      	mov	r1, fp
 800e774:	2300      	movs	r3, #0
 800e776:	07e2      	lsls	r2, r4, #31
 800e778:	d504      	bpl.n	800e784 <_strtod_l+0x5c4>
 800e77a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e77e:	f7f1 ff4b 	bl	8000618 <__aeabi_dmul>
 800e782:	2301      	movs	r3, #1
 800e784:	1064      	asrs	r4, r4, #1
 800e786:	f106 0608 	add.w	r6, r6, #8
 800e78a:	d1f4      	bne.n	800e776 <_strtod_l+0x5b6>
 800e78c:	b10b      	cbz	r3, 800e792 <_strtod_l+0x5d2>
 800e78e:	4682      	mov	sl, r0
 800e790:	468b      	mov	fp, r1
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	b1b3      	cbz	r3, 800e7c4 <_strtod_l+0x604>
 800e796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e79a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	4659      	mov	r1, fp
 800e7a2:	dd0f      	ble.n	800e7c4 <_strtod_l+0x604>
 800e7a4:	2b1f      	cmp	r3, #31
 800e7a6:	dd55      	ble.n	800e854 <_strtod_l+0x694>
 800e7a8:	2b34      	cmp	r3, #52	@ 0x34
 800e7aa:	bfde      	ittt	le
 800e7ac:	f04f 33ff 	movle.w	r3, #4294967295
 800e7b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e7b4:	4093      	lslle	r3, r2
 800e7b6:	f04f 0a00 	mov.w	sl, #0
 800e7ba:	bfcc      	ite	gt
 800e7bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e7c0:	ea03 0b01 	andle.w	fp, r3, r1
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	4659      	mov	r1, fp
 800e7cc:	f7f2 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d1a6      	bne.n	800e722 <_strtod_l+0x562>
 800e7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e7da:	9805      	ldr	r0, [sp, #20]
 800e7dc:	462b      	mov	r3, r5
 800e7de:	463a      	mov	r2, r7
 800e7e0:	f7ff f8c4 	bl	800d96c <__s2b>
 800e7e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	f43f af05 	beq.w	800e5f6 <_strtod_l+0x436>
 800e7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7ee:	2a00      	cmp	r2, #0
 800e7f0:	eba9 0308 	sub.w	r3, r9, r8
 800e7f4:	bfa8      	it	ge
 800e7f6:	2300      	movge	r3, #0
 800e7f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e7fa:	2400      	movs	r4, #0
 800e7fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e800:	9316      	str	r3, [sp, #88]	@ 0x58
 800e802:	46a0      	mov	r8, r4
 800e804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e806:	9805      	ldr	r0, [sp, #20]
 800e808:	6859      	ldr	r1, [r3, #4]
 800e80a:	f7ff f807 	bl	800d81c <_Balloc>
 800e80e:	4681      	mov	r9, r0
 800e810:	2800      	cmp	r0, #0
 800e812:	f43f aef4 	beq.w	800e5fe <_strtod_l+0x43e>
 800e816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e818:	691a      	ldr	r2, [r3, #16]
 800e81a:	3202      	adds	r2, #2
 800e81c:	f103 010c 	add.w	r1, r3, #12
 800e820:	0092      	lsls	r2, r2, #2
 800e822:	300c      	adds	r0, #12
 800e824:	f7fe f94d 	bl	800cac2 <memcpy>
 800e828:	ec4b ab10 	vmov	d0, sl, fp
 800e82c:	9805      	ldr	r0, [sp, #20]
 800e82e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e830:	a91b      	add	r1, sp, #108	@ 0x6c
 800e832:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e836:	f7ff fbd5 	bl	800dfe4 <__d2b>
 800e83a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f43f aede 	beq.w	800e5fe <_strtod_l+0x43e>
 800e842:	9805      	ldr	r0, [sp, #20]
 800e844:	2101      	movs	r1, #1
 800e846:	f7ff f927 	bl	800da98 <__i2b>
 800e84a:	4680      	mov	r8, r0
 800e84c:	b948      	cbnz	r0, 800e862 <_strtod_l+0x6a2>
 800e84e:	f04f 0800 	mov.w	r8, #0
 800e852:	e6d4      	b.n	800e5fe <_strtod_l+0x43e>
 800e854:	f04f 32ff 	mov.w	r2, #4294967295
 800e858:	fa02 f303 	lsl.w	r3, r2, r3
 800e85c:	ea03 0a0a 	and.w	sl, r3, sl
 800e860:	e7b0      	b.n	800e7c4 <_strtod_l+0x604>
 800e862:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e864:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e866:	2d00      	cmp	r5, #0
 800e868:	bfab      	itete	ge
 800e86a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e86c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e86e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e870:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e872:	bfac      	ite	ge
 800e874:	18ef      	addge	r7, r5, r3
 800e876:	1b5e      	sublt	r6, r3, r5
 800e878:	9b08      	ldr	r3, [sp, #32]
 800e87a:	1aed      	subs	r5, r5, r3
 800e87c:	4415      	add	r5, r2
 800e87e:	4b66      	ldr	r3, [pc, #408]	@ (800ea18 <_strtod_l+0x858>)
 800e880:	3d01      	subs	r5, #1
 800e882:	429d      	cmp	r5, r3
 800e884:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e888:	da50      	bge.n	800e92c <_strtod_l+0x76c>
 800e88a:	1b5b      	subs	r3, r3, r5
 800e88c:	2b1f      	cmp	r3, #31
 800e88e:	eba2 0203 	sub.w	r2, r2, r3
 800e892:	f04f 0101 	mov.w	r1, #1
 800e896:	dc3d      	bgt.n	800e914 <_strtod_l+0x754>
 800e898:	fa01 f303 	lsl.w	r3, r1, r3
 800e89c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e8a2:	18bd      	adds	r5, r7, r2
 800e8a4:	9b08      	ldr	r3, [sp, #32]
 800e8a6:	42af      	cmp	r7, r5
 800e8a8:	4416      	add	r6, r2
 800e8aa:	441e      	add	r6, r3
 800e8ac:	463b      	mov	r3, r7
 800e8ae:	bfa8      	it	ge
 800e8b0:	462b      	movge	r3, r5
 800e8b2:	42b3      	cmp	r3, r6
 800e8b4:	bfa8      	it	ge
 800e8b6:	4633      	movge	r3, r6
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bfc2      	ittt	gt
 800e8bc:	1aed      	subgt	r5, r5, r3
 800e8be:	1af6      	subgt	r6, r6, r3
 800e8c0:	1aff      	subgt	r7, r7, r3
 800e8c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dd16      	ble.n	800e8f6 <_strtod_l+0x736>
 800e8c8:	4641      	mov	r1, r8
 800e8ca:	9805      	ldr	r0, [sp, #20]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	f7ff f9a3 	bl	800dc18 <__pow5mult>
 800e8d2:	4680      	mov	r8, r0
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d0ba      	beq.n	800e84e <_strtod_l+0x68e>
 800e8d8:	4601      	mov	r1, r0
 800e8da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8dc:	9805      	ldr	r0, [sp, #20]
 800e8de:	f7ff f8f1 	bl	800dac4 <__multiply>
 800e8e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f43f ae8a 	beq.w	800e5fe <_strtod_l+0x43e>
 800e8ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8ec:	9805      	ldr	r0, [sp, #20]
 800e8ee:	f7fe ffd5 	bl	800d89c <_Bfree>
 800e8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8f6:	2d00      	cmp	r5, #0
 800e8f8:	dc1d      	bgt.n	800e936 <_strtod_l+0x776>
 800e8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd23      	ble.n	800e948 <_strtod_l+0x788>
 800e900:	4649      	mov	r1, r9
 800e902:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e904:	9805      	ldr	r0, [sp, #20]
 800e906:	f7ff f987 	bl	800dc18 <__pow5mult>
 800e90a:	4681      	mov	r9, r0
 800e90c:	b9e0      	cbnz	r0, 800e948 <_strtod_l+0x788>
 800e90e:	f04f 0900 	mov.w	r9, #0
 800e912:	e674      	b.n	800e5fe <_strtod_l+0x43e>
 800e914:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e918:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e91c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e920:	35e2      	adds	r5, #226	@ 0xe2
 800e922:	fa01 f305 	lsl.w	r3, r1, r5
 800e926:	9310      	str	r3, [sp, #64]	@ 0x40
 800e928:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e92a:	e7ba      	b.n	800e8a2 <_strtod_l+0x6e2>
 800e92c:	2300      	movs	r3, #0
 800e92e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e930:	2301      	movs	r3, #1
 800e932:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e934:	e7b5      	b.n	800e8a2 <_strtod_l+0x6e2>
 800e936:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e938:	9805      	ldr	r0, [sp, #20]
 800e93a:	462a      	mov	r2, r5
 800e93c:	f7ff f9c6 	bl	800dccc <__lshift>
 800e940:	901a      	str	r0, [sp, #104]	@ 0x68
 800e942:	2800      	cmp	r0, #0
 800e944:	d1d9      	bne.n	800e8fa <_strtod_l+0x73a>
 800e946:	e65a      	b.n	800e5fe <_strtod_l+0x43e>
 800e948:	2e00      	cmp	r6, #0
 800e94a:	dd07      	ble.n	800e95c <_strtod_l+0x79c>
 800e94c:	4649      	mov	r1, r9
 800e94e:	9805      	ldr	r0, [sp, #20]
 800e950:	4632      	mov	r2, r6
 800e952:	f7ff f9bb 	bl	800dccc <__lshift>
 800e956:	4681      	mov	r9, r0
 800e958:	2800      	cmp	r0, #0
 800e95a:	d0d8      	beq.n	800e90e <_strtod_l+0x74e>
 800e95c:	2f00      	cmp	r7, #0
 800e95e:	dd08      	ble.n	800e972 <_strtod_l+0x7b2>
 800e960:	4641      	mov	r1, r8
 800e962:	9805      	ldr	r0, [sp, #20]
 800e964:	463a      	mov	r2, r7
 800e966:	f7ff f9b1 	bl	800dccc <__lshift>
 800e96a:	4680      	mov	r8, r0
 800e96c:	2800      	cmp	r0, #0
 800e96e:	f43f ae46 	beq.w	800e5fe <_strtod_l+0x43e>
 800e972:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e974:	9805      	ldr	r0, [sp, #20]
 800e976:	464a      	mov	r2, r9
 800e978:	f7ff fa30 	bl	800dddc <__mdiff>
 800e97c:	4604      	mov	r4, r0
 800e97e:	2800      	cmp	r0, #0
 800e980:	f43f ae3d 	beq.w	800e5fe <_strtod_l+0x43e>
 800e984:	68c3      	ldr	r3, [r0, #12]
 800e986:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e988:	2300      	movs	r3, #0
 800e98a:	60c3      	str	r3, [r0, #12]
 800e98c:	4641      	mov	r1, r8
 800e98e:	f7ff fa09 	bl	800dda4 <__mcmp>
 800e992:	2800      	cmp	r0, #0
 800e994:	da46      	bge.n	800ea24 <_strtod_l+0x864>
 800e996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e998:	ea53 030a 	orrs.w	r3, r3, sl
 800e99c:	d16c      	bne.n	800ea78 <_strtod_l+0x8b8>
 800e99e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d168      	bne.n	800ea78 <_strtod_l+0x8b8>
 800e9a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9aa:	0d1b      	lsrs	r3, r3, #20
 800e9ac:	051b      	lsls	r3, r3, #20
 800e9ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9b2:	d961      	bls.n	800ea78 <_strtod_l+0x8b8>
 800e9b4:	6963      	ldr	r3, [r4, #20]
 800e9b6:	b913      	cbnz	r3, 800e9be <_strtod_l+0x7fe>
 800e9b8:	6923      	ldr	r3, [r4, #16]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	dd5c      	ble.n	800ea78 <_strtod_l+0x8b8>
 800e9be:	4621      	mov	r1, r4
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	9805      	ldr	r0, [sp, #20]
 800e9c4:	f7ff f982 	bl	800dccc <__lshift>
 800e9c8:	4641      	mov	r1, r8
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	f7ff f9ea 	bl	800dda4 <__mcmp>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	dd51      	ble.n	800ea78 <_strtod_l+0x8b8>
 800e9d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9d8:	9a08      	ldr	r2, [sp, #32]
 800e9da:	0d1b      	lsrs	r3, r3, #20
 800e9dc:	051b      	lsls	r3, r3, #20
 800e9de:	2a00      	cmp	r2, #0
 800e9e0:	d06b      	beq.n	800eaba <_strtod_l+0x8fa>
 800e9e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9e6:	d868      	bhi.n	800eaba <_strtod_l+0x8fa>
 800e9e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e9ec:	f67f ae9d 	bls.w	800e72a <_strtod_l+0x56a>
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ea1c <_strtod_l+0x85c>)
 800e9f2:	4650      	mov	r0, sl
 800e9f4:	4659      	mov	r1, fp
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f7f1 fe0e 	bl	8000618 <__aeabi_dmul>
 800e9fc:	4b08      	ldr	r3, [pc, #32]	@ (800ea20 <_strtod_l+0x860>)
 800e9fe:	400b      	ands	r3, r1
 800ea00:	4682      	mov	sl, r0
 800ea02:	468b      	mov	fp, r1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f47f ae05 	bne.w	800e614 <_strtod_l+0x454>
 800ea0a:	9a05      	ldr	r2, [sp, #20]
 800ea0c:	2322      	movs	r3, #34	@ 0x22
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	e600      	b.n	800e614 <_strtod_l+0x454>
 800ea12:	bf00      	nop
 800ea14:	080126a0 	.word	0x080126a0
 800ea18:	fffffc02 	.word	0xfffffc02
 800ea1c:	39500000 	.word	0x39500000
 800ea20:	7ff00000 	.word	0x7ff00000
 800ea24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ea28:	d165      	bne.n	800eaf6 <_strtod_l+0x936>
 800ea2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea30:	b35a      	cbz	r2, 800ea8a <_strtod_l+0x8ca>
 800ea32:	4a9f      	ldr	r2, [pc, #636]	@ (800ecb0 <_strtod_l+0xaf0>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d12b      	bne.n	800ea90 <_strtod_l+0x8d0>
 800ea38:	9b08      	ldr	r3, [sp, #32]
 800ea3a:	4651      	mov	r1, sl
 800ea3c:	b303      	cbz	r3, 800ea80 <_strtod_l+0x8c0>
 800ea3e:	4b9d      	ldr	r3, [pc, #628]	@ (800ecb4 <_strtod_l+0xaf4>)
 800ea40:	465a      	mov	r2, fp
 800ea42:	4013      	ands	r3, r2
 800ea44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ea48:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4c:	d81b      	bhi.n	800ea86 <_strtod_l+0x8c6>
 800ea4e:	0d1b      	lsrs	r3, r3, #20
 800ea50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea54:	fa02 f303 	lsl.w	r3, r2, r3
 800ea58:	4299      	cmp	r1, r3
 800ea5a:	d119      	bne.n	800ea90 <_strtod_l+0x8d0>
 800ea5c:	4b96      	ldr	r3, [pc, #600]	@ (800ecb8 <_strtod_l+0xaf8>)
 800ea5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d102      	bne.n	800ea6a <_strtod_l+0x8aa>
 800ea64:	3101      	adds	r1, #1
 800ea66:	f43f adca 	beq.w	800e5fe <_strtod_l+0x43e>
 800ea6a:	4b92      	ldr	r3, [pc, #584]	@ (800ecb4 <_strtod_l+0xaf4>)
 800ea6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea6e:	401a      	ands	r2, r3
 800ea70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ea74:	f04f 0a00 	mov.w	sl, #0
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1b8      	bne.n	800e9f0 <_strtod_l+0x830>
 800ea7e:	e5c9      	b.n	800e614 <_strtod_l+0x454>
 800ea80:	f04f 33ff 	mov.w	r3, #4294967295
 800ea84:	e7e8      	b.n	800ea58 <_strtod_l+0x898>
 800ea86:	4613      	mov	r3, r2
 800ea88:	e7e6      	b.n	800ea58 <_strtod_l+0x898>
 800ea8a:	ea53 030a 	orrs.w	r3, r3, sl
 800ea8e:	d0a1      	beq.n	800e9d4 <_strtod_l+0x814>
 800ea90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea92:	b1db      	cbz	r3, 800eacc <_strtod_l+0x90c>
 800ea94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea96:	4213      	tst	r3, r2
 800ea98:	d0ee      	beq.n	800ea78 <_strtod_l+0x8b8>
 800ea9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea9c:	9a08      	ldr	r2, [sp, #32]
 800ea9e:	4650      	mov	r0, sl
 800eaa0:	4659      	mov	r1, fp
 800eaa2:	b1bb      	cbz	r3, 800ead4 <_strtod_l+0x914>
 800eaa4:	f7ff fb6c 	bl	800e180 <sulp>
 800eaa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eaac:	ec53 2b10 	vmov	r2, r3, d0
 800eab0:	f7f1 fbfc 	bl	80002ac <__adddf3>
 800eab4:	4682      	mov	sl, r0
 800eab6:	468b      	mov	fp, r1
 800eab8:	e7de      	b.n	800ea78 <_strtod_l+0x8b8>
 800eaba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eabe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eac2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eac6:	f04f 3aff 	mov.w	sl, #4294967295
 800eaca:	e7d5      	b.n	800ea78 <_strtod_l+0x8b8>
 800eacc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eace:	ea13 0f0a 	tst.w	r3, sl
 800ead2:	e7e1      	b.n	800ea98 <_strtod_l+0x8d8>
 800ead4:	f7ff fb54 	bl	800e180 <sulp>
 800ead8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eadc:	ec53 2b10 	vmov	r2, r3, d0
 800eae0:	f7f1 fbe2 	bl	80002a8 <__aeabi_dsub>
 800eae4:	2200      	movs	r2, #0
 800eae6:	2300      	movs	r3, #0
 800eae8:	4682      	mov	sl, r0
 800eaea:	468b      	mov	fp, r1
 800eaec:	f7f1 fffc 	bl	8000ae8 <__aeabi_dcmpeq>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d0c1      	beq.n	800ea78 <_strtod_l+0x8b8>
 800eaf4:	e619      	b.n	800e72a <_strtod_l+0x56a>
 800eaf6:	4641      	mov	r1, r8
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f7ff facb 	bl	800e094 <__ratio>
 800eafe:	ec57 6b10 	vmov	r6, r7, d0
 800eb02:	2200      	movs	r2, #0
 800eb04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eb08:	4630      	mov	r0, r6
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	f7f2 f800 	bl	8000b10 <__aeabi_dcmple>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d06f      	beq.n	800ebf4 <_strtod_l+0xa34>
 800eb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d17a      	bne.n	800ec10 <_strtod_l+0xa50>
 800eb1a:	f1ba 0f00 	cmp.w	sl, #0
 800eb1e:	d158      	bne.n	800ebd2 <_strtod_l+0xa12>
 800eb20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d15a      	bne.n	800ebe0 <_strtod_l+0xa20>
 800eb2a:	4b64      	ldr	r3, [pc, #400]	@ (800ecbc <_strtod_l+0xafc>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	4630      	mov	r0, r6
 800eb30:	4639      	mov	r1, r7
 800eb32:	f7f1 ffe3 	bl	8000afc <__aeabi_dcmplt>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d159      	bne.n	800ebee <_strtod_l+0xa2e>
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	4b60      	ldr	r3, [pc, #384]	@ (800ecc0 <_strtod_l+0xb00>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	f7f1 fd69 	bl	8000618 <__aeabi_dmul>
 800eb46:	4606      	mov	r6, r0
 800eb48:	460f      	mov	r7, r1
 800eb4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eb4e:	9606      	str	r6, [sp, #24]
 800eb50:	9307      	str	r3, [sp, #28]
 800eb52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb56:	4d57      	ldr	r5, [pc, #348]	@ (800ecb4 <_strtod_l+0xaf4>)
 800eb58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb5e:	401d      	ands	r5, r3
 800eb60:	4b58      	ldr	r3, [pc, #352]	@ (800ecc4 <_strtod_l+0xb04>)
 800eb62:	429d      	cmp	r5, r3
 800eb64:	f040 80b2 	bne.w	800eccc <_strtod_l+0xb0c>
 800eb68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eb6e:	ec4b ab10 	vmov	d0, sl, fp
 800eb72:	f7ff f9c7 	bl	800df04 <__ulp>
 800eb76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb7a:	ec51 0b10 	vmov	r0, r1, d0
 800eb7e:	f7f1 fd4b 	bl	8000618 <__aeabi_dmul>
 800eb82:	4652      	mov	r2, sl
 800eb84:	465b      	mov	r3, fp
 800eb86:	f7f1 fb91 	bl	80002ac <__adddf3>
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4949      	ldr	r1, [pc, #292]	@ (800ecb4 <_strtod_l+0xaf4>)
 800eb8e:	4a4e      	ldr	r2, [pc, #312]	@ (800ecc8 <_strtod_l+0xb08>)
 800eb90:	4019      	ands	r1, r3
 800eb92:	4291      	cmp	r1, r2
 800eb94:	4682      	mov	sl, r0
 800eb96:	d942      	bls.n	800ec1e <_strtod_l+0xa5e>
 800eb98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb9a:	4b47      	ldr	r3, [pc, #284]	@ (800ecb8 <_strtod_l+0xaf8>)
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d103      	bne.n	800eba8 <_strtod_l+0x9e8>
 800eba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba2:	3301      	adds	r3, #1
 800eba4:	f43f ad2b 	beq.w	800e5fe <_strtod_l+0x43e>
 800eba8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ecb8 <_strtod_l+0xaf8>
 800ebac:	f04f 3aff 	mov.w	sl, #4294967295
 800ebb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebb2:	9805      	ldr	r0, [sp, #20]
 800ebb4:	f7fe fe72 	bl	800d89c <_Bfree>
 800ebb8:	9805      	ldr	r0, [sp, #20]
 800ebba:	4649      	mov	r1, r9
 800ebbc:	f7fe fe6e 	bl	800d89c <_Bfree>
 800ebc0:	9805      	ldr	r0, [sp, #20]
 800ebc2:	4641      	mov	r1, r8
 800ebc4:	f7fe fe6a 	bl	800d89c <_Bfree>
 800ebc8:	9805      	ldr	r0, [sp, #20]
 800ebca:	4621      	mov	r1, r4
 800ebcc:	f7fe fe66 	bl	800d89c <_Bfree>
 800ebd0:	e618      	b.n	800e804 <_strtod_l+0x644>
 800ebd2:	f1ba 0f01 	cmp.w	sl, #1
 800ebd6:	d103      	bne.n	800ebe0 <_strtod_l+0xa20>
 800ebd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f43f ada5 	beq.w	800e72a <_strtod_l+0x56a>
 800ebe0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ec90 <_strtod_l+0xad0>
 800ebe4:	4f35      	ldr	r7, [pc, #212]	@ (800ecbc <_strtod_l+0xafc>)
 800ebe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ebea:	2600      	movs	r6, #0
 800ebec:	e7b1      	b.n	800eb52 <_strtod_l+0x992>
 800ebee:	4f34      	ldr	r7, [pc, #208]	@ (800ecc0 <_strtod_l+0xb00>)
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	e7aa      	b.n	800eb4a <_strtod_l+0x98a>
 800ebf4:	4b32      	ldr	r3, [pc, #200]	@ (800ecc0 <_strtod_l+0xb00>)
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f7f1 fd0c 	bl	8000618 <__aeabi_dmul>
 800ec00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d09f      	beq.n	800eb4a <_strtod_l+0x98a>
 800ec0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ec0e:	e7a0      	b.n	800eb52 <_strtod_l+0x992>
 800ec10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ec98 <_strtod_l+0xad8>
 800ec14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec18:	ec57 6b17 	vmov	r6, r7, d7
 800ec1c:	e799      	b.n	800eb52 <_strtod_l+0x992>
 800ec1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ec22:	9b08      	ldr	r3, [sp, #32]
 800ec24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1c1      	bne.n	800ebb0 <_strtod_l+0x9f0>
 800ec2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec30:	0d1b      	lsrs	r3, r3, #20
 800ec32:	051b      	lsls	r3, r3, #20
 800ec34:	429d      	cmp	r5, r3
 800ec36:	d1bb      	bne.n	800ebb0 <_strtod_l+0x9f0>
 800ec38:	4630      	mov	r0, r6
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	f7f2 f84c 	bl	8000cd8 <__aeabi_d2lz>
 800ec40:	f7f1 fcbc 	bl	80005bc <__aeabi_l2d>
 800ec44:	4602      	mov	r2, r0
 800ec46:	460b      	mov	r3, r1
 800ec48:	4630      	mov	r0, r6
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	f7f1 fb2c 	bl	80002a8 <__aeabi_dsub>
 800ec50:	460b      	mov	r3, r1
 800ec52:	4602      	mov	r2, r0
 800ec54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ec58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ec5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec5e:	ea46 060a 	orr.w	r6, r6, sl
 800ec62:	431e      	orrs	r6, r3
 800ec64:	d06f      	beq.n	800ed46 <_strtod_l+0xb86>
 800ec66:	a30e      	add	r3, pc, #56	@ (adr r3, 800eca0 <_strtod_l+0xae0>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 ff46 	bl	8000afc <__aeabi_dcmplt>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f47f accf 	bne.w	800e614 <_strtod_l+0x454>
 800ec76:	a30c      	add	r3, pc, #48	@ (adr r3, 800eca8 <_strtod_l+0xae8>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec80:	f7f1 ff5a 	bl	8000b38 <__aeabi_dcmpgt>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d093      	beq.n	800ebb0 <_strtod_l+0x9f0>
 800ec88:	e4c4      	b.n	800e614 <_strtod_l+0x454>
 800ec8a:	bf00      	nop
 800ec8c:	f3af 8000 	nop.w
 800ec90:	00000000 	.word	0x00000000
 800ec94:	bff00000 	.word	0xbff00000
 800ec98:	00000000 	.word	0x00000000
 800ec9c:	3ff00000 	.word	0x3ff00000
 800eca0:	94a03595 	.word	0x94a03595
 800eca4:	3fdfffff 	.word	0x3fdfffff
 800eca8:	35afe535 	.word	0x35afe535
 800ecac:	3fe00000 	.word	0x3fe00000
 800ecb0:	000fffff 	.word	0x000fffff
 800ecb4:	7ff00000 	.word	0x7ff00000
 800ecb8:	7fefffff 	.word	0x7fefffff
 800ecbc:	3ff00000 	.word	0x3ff00000
 800ecc0:	3fe00000 	.word	0x3fe00000
 800ecc4:	7fe00000 	.word	0x7fe00000
 800ecc8:	7c9fffff 	.word	0x7c9fffff
 800eccc:	9b08      	ldr	r3, [sp, #32]
 800ecce:	b323      	cbz	r3, 800ed1a <_strtod_l+0xb5a>
 800ecd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ecd4:	d821      	bhi.n	800ed1a <_strtod_l+0xb5a>
 800ecd6:	a328      	add	r3, pc, #160	@ (adr r3, 800ed78 <_strtod_l+0xbb8>)
 800ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 ff16 	bl	8000b10 <__aeabi_dcmple>
 800ece4:	b1a0      	cbz	r0, 800ed10 <_strtod_l+0xb50>
 800ece6:	4639      	mov	r1, r7
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7f1 ff6d 	bl	8000bc8 <__aeabi_d2uiz>
 800ecee:	2801      	cmp	r0, #1
 800ecf0:	bf38      	it	cc
 800ecf2:	2001      	movcc	r0, #1
 800ecf4:	f7f1 fc16 	bl	8000524 <__aeabi_ui2d>
 800ecf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	460f      	mov	r7, r1
 800ecfe:	b9fb      	cbnz	r3, 800ed40 <_strtod_l+0xb80>
 800ed00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed04:	9014      	str	r0, [sp, #80]	@ 0x50
 800ed06:	9315      	str	r3, [sp, #84]	@ 0x54
 800ed08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ed0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ed10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ed16:	1b5b      	subs	r3, r3, r5
 800ed18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ed1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ed22:	f7ff f8ef 	bl	800df04 <__ulp>
 800ed26:	4650      	mov	r0, sl
 800ed28:	ec53 2b10 	vmov	r2, r3, d0
 800ed2c:	4659      	mov	r1, fp
 800ed2e:	f7f1 fc73 	bl	8000618 <__aeabi_dmul>
 800ed32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ed36:	f7f1 fab9 	bl	80002ac <__adddf3>
 800ed3a:	4682      	mov	sl, r0
 800ed3c:	468b      	mov	fp, r1
 800ed3e:	e770      	b.n	800ec22 <_strtod_l+0xa62>
 800ed40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ed44:	e7e0      	b.n	800ed08 <_strtod_l+0xb48>
 800ed46:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed80 <_strtod_l+0xbc0>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 fed6 	bl	8000afc <__aeabi_dcmplt>
 800ed50:	e798      	b.n	800ec84 <_strtod_l+0xac4>
 800ed52:	2300      	movs	r3, #0
 800ed54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ed58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	f7ff ba6d 	b.w	800e23a <_strtod_l+0x7a>
 800ed60:	2a65      	cmp	r2, #101	@ 0x65
 800ed62:	f43f ab66 	beq.w	800e432 <_strtod_l+0x272>
 800ed66:	2a45      	cmp	r2, #69	@ 0x45
 800ed68:	f43f ab63 	beq.w	800e432 <_strtod_l+0x272>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f7ff bb9e 	b.w	800e4ae <_strtod_l+0x2ee>
 800ed72:	bf00      	nop
 800ed74:	f3af 8000 	nop.w
 800ed78:	ffc00000 	.word	0xffc00000
 800ed7c:	41dfffff 	.word	0x41dfffff
 800ed80:	94a03595 	.word	0x94a03595
 800ed84:	3fcfffff 	.word	0x3fcfffff

0800ed88 <_strtod_r>:
 800ed88:	4b01      	ldr	r3, [pc, #4]	@ (800ed90 <_strtod_r+0x8>)
 800ed8a:	f7ff ba19 	b.w	800e1c0 <_strtod_l>
 800ed8e:	bf00      	nop
 800ed90:	200000a0 	.word	0x200000a0

0800ed94 <_strtol_l.constprop.0>:
 800ed94:	2b24      	cmp	r3, #36	@ 0x24
 800ed96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9a:	4686      	mov	lr, r0
 800ed9c:	4690      	mov	r8, r2
 800ed9e:	d801      	bhi.n	800eda4 <_strtol_l.constprop.0+0x10>
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d106      	bne.n	800edb2 <_strtol_l.constprop.0+0x1e>
 800eda4:	f7fd fe58 	bl	800ca58 <__errno>
 800eda8:	2316      	movs	r3, #22
 800edaa:	6003      	str	r3, [r0, #0]
 800edac:	2000      	movs	r0, #0
 800edae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb2:	4834      	ldr	r0, [pc, #208]	@ (800ee84 <_strtol_l.constprop.0+0xf0>)
 800edb4:	460d      	mov	r5, r1
 800edb6:	462a      	mov	r2, r5
 800edb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800edbc:	5d06      	ldrb	r6, [r0, r4]
 800edbe:	f016 0608 	ands.w	r6, r6, #8
 800edc2:	d1f8      	bne.n	800edb6 <_strtol_l.constprop.0+0x22>
 800edc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800edc6:	d12d      	bne.n	800ee24 <_strtol_l.constprop.0+0x90>
 800edc8:	782c      	ldrb	r4, [r5, #0]
 800edca:	2601      	movs	r6, #1
 800edcc:	1c95      	adds	r5, r2, #2
 800edce:	f033 0210 	bics.w	r2, r3, #16
 800edd2:	d109      	bne.n	800ede8 <_strtol_l.constprop.0+0x54>
 800edd4:	2c30      	cmp	r4, #48	@ 0x30
 800edd6:	d12a      	bne.n	800ee2e <_strtol_l.constprop.0+0x9a>
 800edd8:	782a      	ldrb	r2, [r5, #0]
 800edda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800edde:	2a58      	cmp	r2, #88	@ 0x58
 800ede0:	d125      	bne.n	800ee2e <_strtol_l.constprop.0+0x9a>
 800ede2:	786c      	ldrb	r4, [r5, #1]
 800ede4:	2310      	movs	r3, #16
 800ede6:	3502      	adds	r5, #2
 800ede8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800edec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800edf0:	2200      	movs	r2, #0
 800edf2:	fbbc f9f3 	udiv	r9, ip, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	fb03 ca19 	mls	sl, r3, r9, ip
 800edfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ee00:	2f09      	cmp	r7, #9
 800ee02:	d81b      	bhi.n	800ee3c <_strtol_l.constprop.0+0xa8>
 800ee04:	463c      	mov	r4, r7
 800ee06:	42a3      	cmp	r3, r4
 800ee08:	dd27      	ble.n	800ee5a <_strtol_l.constprop.0+0xc6>
 800ee0a:	1c57      	adds	r7, r2, #1
 800ee0c:	d007      	beq.n	800ee1e <_strtol_l.constprop.0+0x8a>
 800ee0e:	4581      	cmp	r9, r0
 800ee10:	d320      	bcc.n	800ee54 <_strtol_l.constprop.0+0xc0>
 800ee12:	d101      	bne.n	800ee18 <_strtol_l.constprop.0+0x84>
 800ee14:	45a2      	cmp	sl, r4
 800ee16:	db1d      	blt.n	800ee54 <_strtol_l.constprop.0+0xc0>
 800ee18:	fb00 4003 	mla	r0, r0, r3, r4
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee22:	e7eb      	b.n	800edfc <_strtol_l.constprop.0+0x68>
 800ee24:	2c2b      	cmp	r4, #43	@ 0x2b
 800ee26:	bf04      	itt	eq
 800ee28:	782c      	ldrbeq	r4, [r5, #0]
 800ee2a:	1c95      	addeq	r5, r2, #2
 800ee2c:	e7cf      	b.n	800edce <_strtol_l.constprop.0+0x3a>
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d1da      	bne.n	800ede8 <_strtol_l.constprop.0+0x54>
 800ee32:	2c30      	cmp	r4, #48	@ 0x30
 800ee34:	bf0c      	ite	eq
 800ee36:	2308      	moveq	r3, #8
 800ee38:	230a      	movne	r3, #10
 800ee3a:	e7d5      	b.n	800ede8 <_strtol_l.constprop.0+0x54>
 800ee3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ee40:	2f19      	cmp	r7, #25
 800ee42:	d801      	bhi.n	800ee48 <_strtol_l.constprop.0+0xb4>
 800ee44:	3c37      	subs	r4, #55	@ 0x37
 800ee46:	e7de      	b.n	800ee06 <_strtol_l.constprop.0+0x72>
 800ee48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ee4c:	2f19      	cmp	r7, #25
 800ee4e:	d804      	bhi.n	800ee5a <_strtol_l.constprop.0+0xc6>
 800ee50:	3c57      	subs	r4, #87	@ 0x57
 800ee52:	e7d8      	b.n	800ee06 <_strtol_l.constprop.0+0x72>
 800ee54:	f04f 32ff 	mov.w	r2, #4294967295
 800ee58:	e7e1      	b.n	800ee1e <_strtol_l.constprop.0+0x8a>
 800ee5a:	1c53      	adds	r3, r2, #1
 800ee5c:	d108      	bne.n	800ee70 <_strtol_l.constprop.0+0xdc>
 800ee5e:	2322      	movs	r3, #34	@ 0x22
 800ee60:	f8ce 3000 	str.w	r3, [lr]
 800ee64:	4660      	mov	r0, ip
 800ee66:	f1b8 0f00 	cmp.w	r8, #0
 800ee6a:	d0a0      	beq.n	800edae <_strtol_l.constprop.0+0x1a>
 800ee6c:	1e69      	subs	r1, r5, #1
 800ee6e:	e006      	b.n	800ee7e <_strtol_l.constprop.0+0xea>
 800ee70:	b106      	cbz	r6, 800ee74 <_strtol_l.constprop.0+0xe0>
 800ee72:	4240      	negs	r0, r0
 800ee74:	f1b8 0f00 	cmp.w	r8, #0
 800ee78:	d099      	beq.n	800edae <_strtol_l.constprop.0+0x1a>
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	d1f6      	bne.n	800ee6c <_strtol_l.constprop.0+0xd8>
 800ee7e:	f8c8 1000 	str.w	r1, [r8]
 800ee82:	e794      	b.n	800edae <_strtol_l.constprop.0+0x1a>
 800ee84:	080126c9 	.word	0x080126c9

0800ee88 <_strtol_r>:
 800ee88:	f7ff bf84 	b.w	800ed94 <_strtol_l.constprop.0>

0800ee8c <__ssputs_r>:
 800ee8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee90:	688e      	ldr	r6, [r1, #8]
 800ee92:	461f      	mov	r7, r3
 800ee94:	42be      	cmp	r6, r7
 800ee96:	680b      	ldr	r3, [r1, #0]
 800ee98:	4682      	mov	sl, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	4690      	mov	r8, r2
 800ee9e:	d82d      	bhi.n	800eefc <__ssputs_r+0x70>
 800eea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eea8:	d026      	beq.n	800eef8 <__ssputs_r+0x6c>
 800eeaa:	6965      	ldr	r5, [r4, #20]
 800eeac:	6909      	ldr	r1, [r1, #16]
 800eeae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeb2:	eba3 0901 	sub.w	r9, r3, r1
 800eeb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eeba:	1c7b      	adds	r3, r7, #1
 800eebc:	444b      	add	r3, r9
 800eebe:	106d      	asrs	r5, r5, #1
 800eec0:	429d      	cmp	r5, r3
 800eec2:	bf38      	it	cc
 800eec4:	461d      	movcc	r5, r3
 800eec6:	0553      	lsls	r3, r2, #21
 800eec8:	d527      	bpl.n	800ef1a <__ssputs_r+0x8e>
 800eeca:	4629      	mov	r1, r5
 800eecc:	f7fc fc84 	bl	800b7d8 <_malloc_r>
 800eed0:	4606      	mov	r6, r0
 800eed2:	b360      	cbz	r0, 800ef2e <__ssputs_r+0xa2>
 800eed4:	6921      	ldr	r1, [r4, #16]
 800eed6:	464a      	mov	r2, r9
 800eed8:	f7fd fdf3 	bl	800cac2 <memcpy>
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eee6:	81a3      	strh	r3, [r4, #12]
 800eee8:	6126      	str	r6, [r4, #16]
 800eeea:	6165      	str	r5, [r4, #20]
 800eeec:	444e      	add	r6, r9
 800eeee:	eba5 0509 	sub.w	r5, r5, r9
 800eef2:	6026      	str	r6, [r4, #0]
 800eef4:	60a5      	str	r5, [r4, #8]
 800eef6:	463e      	mov	r6, r7
 800eef8:	42be      	cmp	r6, r7
 800eefa:	d900      	bls.n	800eefe <__ssputs_r+0x72>
 800eefc:	463e      	mov	r6, r7
 800eefe:	6820      	ldr	r0, [r4, #0]
 800ef00:	4632      	mov	r2, r6
 800ef02:	4641      	mov	r1, r8
 800ef04:	f7fd fcc7 	bl	800c896 <memmove>
 800ef08:	68a3      	ldr	r3, [r4, #8]
 800ef0a:	1b9b      	subs	r3, r3, r6
 800ef0c:	60a3      	str	r3, [r4, #8]
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	4433      	add	r3, r6
 800ef12:	6023      	str	r3, [r4, #0]
 800ef14:	2000      	movs	r0, #0
 800ef16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	f000 fd3d 	bl	800f99a <_realloc_r>
 800ef20:	4606      	mov	r6, r0
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d1e0      	bne.n	800eee8 <__ssputs_r+0x5c>
 800ef26:	6921      	ldr	r1, [r4, #16]
 800ef28:	4650      	mov	r0, sl
 800ef2a:	f7fe fc2d 	bl	800d788 <_free_r>
 800ef2e:	230c      	movs	r3, #12
 800ef30:	f8ca 3000 	str.w	r3, [sl]
 800ef34:	89a3      	ldrh	r3, [r4, #12]
 800ef36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef3a:	81a3      	strh	r3, [r4, #12]
 800ef3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef40:	e7e9      	b.n	800ef16 <__ssputs_r+0x8a>
	...

0800ef44 <_svfiprintf_r>:
 800ef44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef48:	4698      	mov	r8, r3
 800ef4a:	898b      	ldrh	r3, [r1, #12]
 800ef4c:	061b      	lsls	r3, r3, #24
 800ef4e:	b09d      	sub	sp, #116	@ 0x74
 800ef50:	4607      	mov	r7, r0
 800ef52:	460d      	mov	r5, r1
 800ef54:	4614      	mov	r4, r2
 800ef56:	d510      	bpl.n	800ef7a <_svfiprintf_r+0x36>
 800ef58:	690b      	ldr	r3, [r1, #16]
 800ef5a:	b973      	cbnz	r3, 800ef7a <_svfiprintf_r+0x36>
 800ef5c:	2140      	movs	r1, #64	@ 0x40
 800ef5e:	f7fc fc3b 	bl	800b7d8 <_malloc_r>
 800ef62:	6028      	str	r0, [r5, #0]
 800ef64:	6128      	str	r0, [r5, #16]
 800ef66:	b930      	cbnz	r0, 800ef76 <_svfiprintf_r+0x32>
 800ef68:	230c      	movs	r3, #12
 800ef6a:	603b      	str	r3, [r7, #0]
 800ef6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef70:	b01d      	add	sp, #116	@ 0x74
 800ef72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef76:	2340      	movs	r3, #64	@ 0x40
 800ef78:	616b      	str	r3, [r5, #20]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef7e:	2320      	movs	r3, #32
 800ef80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef88:	2330      	movs	r3, #48	@ 0x30
 800ef8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f128 <_svfiprintf_r+0x1e4>
 800ef8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef92:	f04f 0901 	mov.w	r9, #1
 800ef96:	4623      	mov	r3, r4
 800ef98:	469a      	mov	sl, r3
 800ef9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef9e:	b10a      	cbz	r2, 800efa4 <_svfiprintf_r+0x60>
 800efa0:	2a25      	cmp	r2, #37	@ 0x25
 800efa2:	d1f9      	bne.n	800ef98 <_svfiprintf_r+0x54>
 800efa4:	ebba 0b04 	subs.w	fp, sl, r4
 800efa8:	d00b      	beq.n	800efc2 <_svfiprintf_r+0x7e>
 800efaa:	465b      	mov	r3, fp
 800efac:	4622      	mov	r2, r4
 800efae:	4629      	mov	r1, r5
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7ff ff6b 	bl	800ee8c <__ssputs_r>
 800efb6:	3001      	adds	r0, #1
 800efb8:	f000 80a7 	beq.w	800f10a <_svfiprintf_r+0x1c6>
 800efbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efbe:	445a      	add	r2, fp
 800efc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800efc2:	f89a 3000 	ldrb.w	r3, [sl]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 809f 	beq.w	800f10a <_svfiprintf_r+0x1c6>
 800efcc:	2300      	movs	r3, #0
 800efce:	f04f 32ff 	mov.w	r2, #4294967295
 800efd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efd6:	f10a 0a01 	add.w	sl, sl, #1
 800efda:	9304      	str	r3, [sp, #16]
 800efdc:	9307      	str	r3, [sp, #28]
 800efde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efe2:	931a      	str	r3, [sp, #104]	@ 0x68
 800efe4:	4654      	mov	r4, sl
 800efe6:	2205      	movs	r2, #5
 800efe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efec:	484e      	ldr	r0, [pc, #312]	@ (800f128 <_svfiprintf_r+0x1e4>)
 800efee:	f7f1 f8ff 	bl	80001f0 <memchr>
 800eff2:	9a04      	ldr	r2, [sp, #16]
 800eff4:	b9d8      	cbnz	r0, 800f02e <_svfiprintf_r+0xea>
 800eff6:	06d0      	lsls	r0, r2, #27
 800eff8:	bf44      	itt	mi
 800effa:	2320      	movmi	r3, #32
 800effc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f000:	0711      	lsls	r1, r2, #28
 800f002:	bf44      	itt	mi
 800f004:	232b      	movmi	r3, #43	@ 0x2b
 800f006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f00a:	f89a 3000 	ldrb.w	r3, [sl]
 800f00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f010:	d015      	beq.n	800f03e <_svfiprintf_r+0xfa>
 800f012:	9a07      	ldr	r2, [sp, #28]
 800f014:	4654      	mov	r4, sl
 800f016:	2000      	movs	r0, #0
 800f018:	f04f 0c0a 	mov.w	ip, #10
 800f01c:	4621      	mov	r1, r4
 800f01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f022:	3b30      	subs	r3, #48	@ 0x30
 800f024:	2b09      	cmp	r3, #9
 800f026:	d94b      	bls.n	800f0c0 <_svfiprintf_r+0x17c>
 800f028:	b1b0      	cbz	r0, 800f058 <_svfiprintf_r+0x114>
 800f02a:	9207      	str	r2, [sp, #28]
 800f02c:	e014      	b.n	800f058 <_svfiprintf_r+0x114>
 800f02e:	eba0 0308 	sub.w	r3, r0, r8
 800f032:	fa09 f303 	lsl.w	r3, r9, r3
 800f036:	4313      	orrs	r3, r2
 800f038:	9304      	str	r3, [sp, #16]
 800f03a:	46a2      	mov	sl, r4
 800f03c:	e7d2      	b.n	800efe4 <_svfiprintf_r+0xa0>
 800f03e:	9b03      	ldr	r3, [sp, #12]
 800f040:	1d19      	adds	r1, r3, #4
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	9103      	str	r1, [sp, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	bfbb      	ittet	lt
 800f04a:	425b      	neglt	r3, r3
 800f04c:	f042 0202 	orrlt.w	r2, r2, #2
 800f050:	9307      	strge	r3, [sp, #28]
 800f052:	9307      	strlt	r3, [sp, #28]
 800f054:	bfb8      	it	lt
 800f056:	9204      	strlt	r2, [sp, #16]
 800f058:	7823      	ldrb	r3, [r4, #0]
 800f05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f05c:	d10a      	bne.n	800f074 <_svfiprintf_r+0x130>
 800f05e:	7863      	ldrb	r3, [r4, #1]
 800f060:	2b2a      	cmp	r3, #42	@ 0x2a
 800f062:	d132      	bne.n	800f0ca <_svfiprintf_r+0x186>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	1d1a      	adds	r2, r3, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	9203      	str	r2, [sp, #12]
 800f06c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f070:	3402      	adds	r4, #2
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f138 <_svfiprintf_r+0x1f4>
 800f078:	7821      	ldrb	r1, [r4, #0]
 800f07a:	2203      	movs	r2, #3
 800f07c:	4650      	mov	r0, sl
 800f07e:	f7f1 f8b7 	bl	80001f0 <memchr>
 800f082:	b138      	cbz	r0, 800f094 <_svfiprintf_r+0x150>
 800f084:	9b04      	ldr	r3, [sp, #16]
 800f086:	eba0 000a 	sub.w	r0, r0, sl
 800f08a:	2240      	movs	r2, #64	@ 0x40
 800f08c:	4082      	lsls	r2, r0
 800f08e:	4313      	orrs	r3, r2
 800f090:	3401      	adds	r4, #1
 800f092:	9304      	str	r3, [sp, #16]
 800f094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f098:	4824      	ldr	r0, [pc, #144]	@ (800f12c <_svfiprintf_r+0x1e8>)
 800f09a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f09e:	2206      	movs	r2, #6
 800f0a0:	f7f1 f8a6 	bl	80001f0 <memchr>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d036      	beq.n	800f116 <_svfiprintf_r+0x1d2>
 800f0a8:	4b21      	ldr	r3, [pc, #132]	@ (800f130 <_svfiprintf_r+0x1ec>)
 800f0aa:	bb1b      	cbnz	r3, 800f0f4 <_svfiprintf_r+0x1b0>
 800f0ac:	9b03      	ldr	r3, [sp, #12]
 800f0ae:	3307      	adds	r3, #7
 800f0b0:	f023 0307 	bic.w	r3, r3, #7
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	9303      	str	r3, [sp, #12]
 800f0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ba:	4433      	add	r3, r6
 800f0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0be:	e76a      	b.n	800ef96 <_svfiprintf_r+0x52>
 800f0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	2001      	movs	r0, #1
 800f0c8:	e7a8      	b.n	800f01c <_svfiprintf_r+0xd8>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	3401      	adds	r4, #1
 800f0ce:	9305      	str	r3, [sp, #20]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	f04f 0c0a 	mov.w	ip, #10
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0dc:	3a30      	subs	r2, #48	@ 0x30
 800f0de:	2a09      	cmp	r2, #9
 800f0e0:	d903      	bls.n	800f0ea <_svfiprintf_r+0x1a6>
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d0c6      	beq.n	800f074 <_svfiprintf_r+0x130>
 800f0e6:	9105      	str	r1, [sp, #20]
 800f0e8:	e7c4      	b.n	800f074 <_svfiprintf_r+0x130>
 800f0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e7f0      	b.n	800f0d6 <_svfiprintf_r+0x192>
 800f0f4:	ab03      	add	r3, sp, #12
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	462a      	mov	r2, r5
 800f0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f134 <_svfiprintf_r+0x1f0>)
 800f0fc:	a904      	add	r1, sp, #16
 800f0fe:	4638      	mov	r0, r7
 800f100:	f7fc fcd8 	bl	800bab4 <_printf_float>
 800f104:	1c42      	adds	r2, r0, #1
 800f106:	4606      	mov	r6, r0
 800f108:	d1d6      	bne.n	800f0b8 <_svfiprintf_r+0x174>
 800f10a:	89ab      	ldrh	r3, [r5, #12]
 800f10c:	065b      	lsls	r3, r3, #25
 800f10e:	f53f af2d 	bmi.w	800ef6c <_svfiprintf_r+0x28>
 800f112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f114:	e72c      	b.n	800ef70 <_svfiprintf_r+0x2c>
 800f116:	ab03      	add	r3, sp, #12
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	462a      	mov	r2, r5
 800f11c:	4b05      	ldr	r3, [pc, #20]	@ (800f134 <_svfiprintf_r+0x1f0>)
 800f11e:	a904      	add	r1, sp, #16
 800f120:	4638      	mov	r0, r7
 800f122:	f7fc ff5f 	bl	800bfe4 <_printf_i>
 800f126:	e7ed      	b.n	800f104 <_svfiprintf_r+0x1c0>
 800f128:	080127c9 	.word	0x080127c9
 800f12c:	080127d3 	.word	0x080127d3
 800f130:	0800bab5 	.word	0x0800bab5
 800f134:	0800ee8d 	.word	0x0800ee8d
 800f138:	080127cf 	.word	0x080127cf

0800f13c <__sflush_r>:
 800f13c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f144:	0716      	lsls	r6, r2, #28
 800f146:	4605      	mov	r5, r0
 800f148:	460c      	mov	r4, r1
 800f14a:	d454      	bmi.n	800f1f6 <__sflush_r+0xba>
 800f14c:	684b      	ldr	r3, [r1, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	dc02      	bgt.n	800f158 <__sflush_r+0x1c>
 800f152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f154:	2b00      	cmp	r3, #0
 800f156:	dd48      	ble.n	800f1ea <__sflush_r+0xae>
 800f158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	d045      	beq.n	800f1ea <__sflush_r+0xae>
 800f15e:	2300      	movs	r3, #0
 800f160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f164:	682f      	ldr	r7, [r5, #0]
 800f166:	6a21      	ldr	r1, [r4, #32]
 800f168:	602b      	str	r3, [r5, #0]
 800f16a:	d030      	beq.n	800f1ce <__sflush_r+0x92>
 800f16c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	0759      	lsls	r1, r3, #29
 800f172:	d505      	bpl.n	800f180 <__sflush_r+0x44>
 800f174:	6863      	ldr	r3, [r4, #4]
 800f176:	1ad2      	subs	r2, r2, r3
 800f178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f17a:	b10b      	cbz	r3, 800f180 <__sflush_r+0x44>
 800f17c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f17e:	1ad2      	subs	r2, r2, r3
 800f180:	2300      	movs	r3, #0
 800f182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f184:	6a21      	ldr	r1, [r4, #32]
 800f186:	4628      	mov	r0, r5
 800f188:	47b0      	blx	r6
 800f18a:	1c43      	adds	r3, r0, #1
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	d106      	bne.n	800f19e <__sflush_r+0x62>
 800f190:	6829      	ldr	r1, [r5, #0]
 800f192:	291d      	cmp	r1, #29
 800f194:	d82b      	bhi.n	800f1ee <__sflush_r+0xb2>
 800f196:	4a2a      	ldr	r2, [pc, #168]	@ (800f240 <__sflush_r+0x104>)
 800f198:	410a      	asrs	r2, r1
 800f19a:	07d6      	lsls	r6, r2, #31
 800f19c:	d427      	bmi.n	800f1ee <__sflush_r+0xb2>
 800f19e:	2200      	movs	r2, #0
 800f1a0:	6062      	str	r2, [r4, #4]
 800f1a2:	04d9      	lsls	r1, r3, #19
 800f1a4:	6922      	ldr	r2, [r4, #16]
 800f1a6:	6022      	str	r2, [r4, #0]
 800f1a8:	d504      	bpl.n	800f1b4 <__sflush_r+0x78>
 800f1aa:	1c42      	adds	r2, r0, #1
 800f1ac:	d101      	bne.n	800f1b2 <__sflush_r+0x76>
 800f1ae:	682b      	ldr	r3, [r5, #0]
 800f1b0:	b903      	cbnz	r3, 800f1b4 <__sflush_r+0x78>
 800f1b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1b6:	602f      	str	r7, [r5, #0]
 800f1b8:	b1b9      	cbz	r1, 800f1ea <__sflush_r+0xae>
 800f1ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1be:	4299      	cmp	r1, r3
 800f1c0:	d002      	beq.n	800f1c8 <__sflush_r+0x8c>
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7fe fae0 	bl	800d788 <_free_r>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1cc:	e00d      	b.n	800f1ea <__sflush_r+0xae>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b0      	blx	r6
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	1c50      	adds	r0, r2, #1
 800f1d8:	d1c9      	bne.n	800f16e <__sflush_r+0x32>
 800f1da:	682b      	ldr	r3, [r5, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0c6      	beq.n	800f16e <__sflush_r+0x32>
 800f1e0:	2b1d      	cmp	r3, #29
 800f1e2:	d001      	beq.n	800f1e8 <__sflush_r+0xac>
 800f1e4:	2b16      	cmp	r3, #22
 800f1e6:	d11e      	bne.n	800f226 <__sflush_r+0xea>
 800f1e8:	602f      	str	r7, [r5, #0]
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	e022      	b.n	800f234 <__sflush_r+0xf8>
 800f1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1f2:	b21b      	sxth	r3, r3
 800f1f4:	e01b      	b.n	800f22e <__sflush_r+0xf2>
 800f1f6:	690f      	ldr	r7, [r1, #16]
 800f1f8:	2f00      	cmp	r7, #0
 800f1fa:	d0f6      	beq.n	800f1ea <__sflush_r+0xae>
 800f1fc:	0793      	lsls	r3, r2, #30
 800f1fe:	680e      	ldr	r6, [r1, #0]
 800f200:	bf08      	it	eq
 800f202:	694b      	ldreq	r3, [r1, #20]
 800f204:	600f      	str	r7, [r1, #0]
 800f206:	bf18      	it	ne
 800f208:	2300      	movne	r3, #0
 800f20a:	eba6 0807 	sub.w	r8, r6, r7
 800f20e:	608b      	str	r3, [r1, #8]
 800f210:	f1b8 0f00 	cmp.w	r8, #0
 800f214:	dde9      	ble.n	800f1ea <__sflush_r+0xae>
 800f216:	6a21      	ldr	r1, [r4, #32]
 800f218:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f21a:	4643      	mov	r3, r8
 800f21c:	463a      	mov	r2, r7
 800f21e:	4628      	mov	r0, r5
 800f220:	47b0      	blx	r6
 800f222:	2800      	cmp	r0, #0
 800f224:	dc08      	bgt.n	800f238 <__sflush_r+0xfc>
 800f226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f22e:	81a3      	strh	r3, [r4, #12]
 800f230:	f04f 30ff 	mov.w	r0, #4294967295
 800f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f238:	4407      	add	r7, r0
 800f23a:	eba8 0800 	sub.w	r8, r8, r0
 800f23e:	e7e7      	b.n	800f210 <__sflush_r+0xd4>
 800f240:	dfbffffe 	.word	0xdfbffffe

0800f244 <_fflush_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	690b      	ldr	r3, [r1, #16]
 800f248:	4605      	mov	r5, r0
 800f24a:	460c      	mov	r4, r1
 800f24c:	b913      	cbnz	r3, 800f254 <_fflush_r+0x10>
 800f24e:	2500      	movs	r5, #0
 800f250:	4628      	mov	r0, r5
 800f252:	bd38      	pop	{r3, r4, r5, pc}
 800f254:	b118      	cbz	r0, 800f25e <_fflush_r+0x1a>
 800f256:	6a03      	ldr	r3, [r0, #32]
 800f258:	b90b      	cbnz	r3, 800f25e <_fflush_r+0x1a>
 800f25a:	f7fd fa83 	bl	800c764 <__sinit>
 800f25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0f3      	beq.n	800f24e <_fflush_r+0xa>
 800f266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f268:	07d0      	lsls	r0, r2, #31
 800f26a:	d404      	bmi.n	800f276 <_fflush_r+0x32>
 800f26c:	0599      	lsls	r1, r3, #22
 800f26e:	d402      	bmi.n	800f276 <_fflush_r+0x32>
 800f270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f272:	f7fd fc1c 	bl	800caae <__retarget_lock_acquire_recursive>
 800f276:	4628      	mov	r0, r5
 800f278:	4621      	mov	r1, r4
 800f27a:	f7ff ff5f 	bl	800f13c <__sflush_r>
 800f27e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f280:	07da      	lsls	r2, r3, #31
 800f282:	4605      	mov	r5, r0
 800f284:	d4e4      	bmi.n	800f250 <_fflush_r+0xc>
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	059b      	lsls	r3, r3, #22
 800f28a:	d4e1      	bmi.n	800f250 <_fflush_r+0xc>
 800f28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f28e:	f7fd fc0f 	bl	800cab0 <__retarget_lock_release_recursive>
 800f292:	e7dd      	b.n	800f250 <_fflush_r+0xc>

0800f294 <strncmp>:
 800f294:	b510      	push	{r4, lr}
 800f296:	b16a      	cbz	r2, 800f2b4 <strncmp+0x20>
 800f298:	3901      	subs	r1, #1
 800f29a:	1884      	adds	r4, r0, r2
 800f29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d103      	bne.n	800f2b0 <strncmp+0x1c>
 800f2a8:	42a0      	cmp	r0, r4
 800f2aa:	d001      	beq.n	800f2b0 <strncmp+0x1c>
 800f2ac:	2a00      	cmp	r2, #0
 800f2ae:	d1f5      	bne.n	800f29c <strncmp+0x8>
 800f2b0:	1ad0      	subs	r0, r2, r3
 800f2b2:	bd10      	pop	{r4, pc}
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	e7fc      	b.n	800f2b2 <strncmp+0x1e>

0800f2b8 <nan>:
 800f2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f2c0 <nan+0x8>
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	00000000 	.word	0x00000000
 800f2c4:	7ff80000 	.word	0x7ff80000

0800f2c8 <__assert_func>:
 800f2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ca:	4614      	mov	r4, r2
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	4b09      	ldr	r3, [pc, #36]	@ (800f2f4 <__assert_func+0x2c>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	68d8      	ldr	r0, [r3, #12]
 800f2d6:	b954      	cbnz	r4, 800f2ee <__assert_func+0x26>
 800f2d8:	4b07      	ldr	r3, [pc, #28]	@ (800f2f8 <__assert_func+0x30>)
 800f2da:	461c      	mov	r4, r3
 800f2dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2e0:	9100      	str	r1, [sp, #0]
 800f2e2:	462b      	mov	r3, r5
 800f2e4:	4905      	ldr	r1, [pc, #20]	@ (800f2fc <__assert_func+0x34>)
 800f2e6:	f000 fb93 	bl	800fa10 <fiprintf>
 800f2ea:	f000 fba3 	bl	800fa34 <abort>
 800f2ee:	4b04      	ldr	r3, [pc, #16]	@ (800f300 <__assert_func+0x38>)
 800f2f0:	e7f4      	b.n	800f2dc <__assert_func+0x14>
 800f2f2:	bf00      	nop
 800f2f4:	20000050 	.word	0x20000050
 800f2f8:	0801281d 	.word	0x0801281d
 800f2fc:	080127ef 	.word	0x080127ef
 800f300:	080127e2 	.word	0x080127e2

0800f304 <rshift>:
 800f304:	6903      	ldr	r3, [r0, #16]
 800f306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f30a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f30e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f312:	f100 0414 	add.w	r4, r0, #20
 800f316:	dd45      	ble.n	800f3a4 <rshift+0xa0>
 800f318:	f011 011f 	ands.w	r1, r1, #31
 800f31c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f324:	d10c      	bne.n	800f340 <rshift+0x3c>
 800f326:	f100 0710 	add.w	r7, r0, #16
 800f32a:	4629      	mov	r1, r5
 800f32c:	42b1      	cmp	r1, r6
 800f32e:	d334      	bcc.n	800f39a <rshift+0x96>
 800f330:	1a9b      	subs	r3, r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	1eea      	subs	r2, r5, #3
 800f336:	4296      	cmp	r6, r2
 800f338:	bf38      	it	cc
 800f33a:	2300      	movcc	r3, #0
 800f33c:	4423      	add	r3, r4
 800f33e:	e015      	b.n	800f36c <rshift+0x68>
 800f340:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f344:	f1c1 0820 	rsb	r8, r1, #32
 800f348:	40cf      	lsrs	r7, r1
 800f34a:	f105 0e04 	add.w	lr, r5, #4
 800f34e:	46a1      	mov	r9, r4
 800f350:	4576      	cmp	r6, lr
 800f352:	46f4      	mov	ip, lr
 800f354:	d815      	bhi.n	800f382 <rshift+0x7e>
 800f356:	1a9a      	subs	r2, r3, r2
 800f358:	0092      	lsls	r2, r2, #2
 800f35a:	3a04      	subs	r2, #4
 800f35c:	3501      	adds	r5, #1
 800f35e:	42ae      	cmp	r6, r5
 800f360:	bf38      	it	cc
 800f362:	2200      	movcc	r2, #0
 800f364:	18a3      	adds	r3, r4, r2
 800f366:	50a7      	str	r7, [r4, r2]
 800f368:	b107      	cbz	r7, 800f36c <rshift+0x68>
 800f36a:	3304      	adds	r3, #4
 800f36c:	1b1a      	subs	r2, r3, r4
 800f36e:	42a3      	cmp	r3, r4
 800f370:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f374:	bf08      	it	eq
 800f376:	2300      	moveq	r3, #0
 800f378:	6102      	str	r2, [r0, #16]
 800f37a:	bf08      	it	eq
 800f37c:	6143      	streq	r3, [r0, #20]
 800f37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f382:	f8dc c000 	ldr.w	ip, [ip]
 800f386:	fa0c fc08 	lsl.w	ip, ip, r8
 800f38a:	ea4c 0707 	orr.w	r7, ip, r7
 800f38e:	f849 7b04 	str.w	r7, [r9], #4
 800f392:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f396:	40cf      	lsrs	r7, r1
 800f398:	e7da      	b.n	800f350 <rshift+0x4c>
 800f39a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f39e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3a2:	e7c3      	b.n	800f32c <rshift+0x28>
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	e7e1      	b.n	800f36c <rshift+0x68>

0800f3a8 <__hexdig_fun>:
 800f3a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f3ac:	2b09      	cmp	r3, #9
 800f3ae:	d802      	bhi.n	800f3b6 <__hexdig_fun+0xe>
 800f3b0:	3820      	subs	r0, #32
 800f3b2:	b2c0      	uxtb	r0, r0
 800f3b4:	4770      	bx	lr
 800f3b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f3ba:	2b05      	cmp	r3, #5
 800f3bc:	d801      	bhi.n	800f3c2 <__hexdig_fun+0x1a>
 800f3be:	3847      	subs	r0, #71	@ 0x47
 800f3c0:	e7f7      	b.n	800f3b2 <__hexdig_fun+0xa>
 800f3c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	d801      	bhi.n	800f3ce <__hexdig_fun+0x26>
 800f3ca:	3827      	subs	r0, #39	@ 0x27
 800f3cc:	e7f1      	b.n	800f3b2 <__hexdig_fun+0xa>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <__gethex>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	b085      	sub	sp, #20
 800f3da:	468a      	mov	sl, r1
 800f3dc:	9302      	str	r3, [sp, #8]
 800f3de:	680b      	ldr	r3, [r1, #0]
 800f3e0:	9001      	str	r0, [sp, #4]
 800f3e2:	4690      	mov	r8, r2
 800f3e4:	1c9c      	adds	r4, r3, #2
 800f3e6:	46a1      	mov	r9, r4
 800f3e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f3ec:	2830      	cmp	r0, #48	@ 0x30
 800f3ee:	d0fa      	beq.n	800f3e6 <__gethex+0x12>
 800f3f0:	eba9 0303 	sub.w	r3, r9, r3
 800f3f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f3f8:	f7ff ffd6 	bl	800f3a8 <__hexdig_fun>
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d168      	bne.n	800f4d4 <__gethex+0x100>
 800f402:	49a0      	ldr	r1, [pc, #640]	@ (800f684 <__gethex+0x2b0>)
 800f404:	2201      	movs	r2, #1
 800f406:	4648      	mov	r0, r9
 800f408:	f7ff ff44 	bl	800f294 <strncmp>
 800f40c:	4607      	mov	r7, r0
 800f40e:	2800      	cmp	r0, #0
 800f410:	d167      	bne.n	800f4e2 <__gethex+0x10e>
 800f412:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f416:	4626      	mov	r6, r4
 800f418:	f7ff ffc6 	bl	800f3a8 <__hexdig_fun>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d062      	beq.n	800f4e6 <__gethex+0x112>
 800f420:	4623      	mov	r3, r4
 800f422:	7818      	ldrb	r0, [r3, #0]
 800f424:	2830      	cmp	r0, #48	@ 0x30
 800f426:	4699      	mov	r9, r3
 800f428:	f103 0301 	add.w	r3, r3, #1
 800f42c:	d0f9      	beq.n	800f422 <__gethex+0x4e>
 800f42e:	f7ff ffbb 	bl	800f3a8 <__hexdig_fun>
 800f432:	fab0 f580 	clz	r5, r0
 800f436:	096d      	lsrs	r5, r5, #5
 800f438:	f04f 0b01 	mov.w	fp, #1
 800f43c:	464a      	mov	r2, r9
 800f43e:	4616      	mov	r6, r2
 800f440:	3201      	adds	r2, #1
 800f442:	7830      	ldrb	r0, [r6, #0]
 800f444:	f7ff ffb0 	bl	800f3a8 <__hexdig_fun>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1f8      	bne.n	800f43e <__gethex+0x6a>
 800f44c:	498d      	ldr	r1, [pc, #564]	@ (800f684 <__gethex+0x2b0>)
 800f44e:	2201      	movs	r2, #1
 800f450:	4630      	mov	r0, r6
 800f452:	f7ff ff1f 	bl	800f294 <strncmp>
 800f456:	2800      	cmp	r0, #0
 800f458:	d13f      	bne.n	800f4da <__gethex+0x106>
 800f45a:	b944      	cbnz	r4, 800f46e <__gethex+0x9a>
 800f45c:	1c74      	adds	r4, r6, #1
 800f45e:	4622      	mov	r2, r4
 800f460:	4616      	mov	r6, r2
 800f462:	3201      	adds	r2, #1
 800f464:	7830      	ldrb	r0, [r6, #0]
 800f466:	f7ff ff9f 	bl	800f3a8 <__hexdig_fun>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d1f8      	bne.n	800f460 <__gethex+0x8c>
 800f46e:	1ba4      	subs	r4, r4, r6
 800f470:	00a7      	lsls	r7, r4, #2
 800f472:	7833      	ldrb	r3, [r6, #0]
 800f474:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f478:	2b50      	cmp	r3, #80	@ 0x50
 800f47a:	d13e      	bne.n	800f4fa <__gethex+0x126>
 800f47c:	7873      	ldrb	r3, [r6, #1]
 800f47e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f480:	d033      	beq.n	800f4ea <__gethex+0x116>
 800f482:	2b2d      	cmp	r3, #45	@ 0x2d
 800f484:	d034      	beq.n	800f4f0 <__gethex+0x11c>
 800f486:	1c71      	adds	r1, r6, #1
 800f488:	2400      	movs	r4, #0
 800f48a:	7808      	ldrb	r0, [r1, #0]
 800f48c:	f7ff ff8c 	bl	800f3a8 <__hexdig_fun>
 800f490:	1e43      	subs	r3, r0, #1
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b18      	cmp	r3, #24
 800f496:	d830      	bhi.n	800f4fa <__gethex+0x126>
 800f498:	f1a0 0210 	sub.w	r2, r0, #16
 800f49c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4a0:	f7ff ff82 	bl	800f3a8 <__hexdig_fun>
 800f4a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800f4a8:	fa5f fc8c 	uxtb.w	ip, ip
 800f4ac:	f1bc 0f18 	cmp.w	ip, #24
 800f4b0:	f04f 030a 	mov.w	r3, #10
 800f4b4:	d91e      	bls.n	800f4f4 <__gethex+0x120>
 800f4b6:	b104      	cbz	r4, 800f4ba <__gethex+0xe6>
 800f4b8:	4252      	negs	r2, r2
 800f4ba:	4417      	add	r7, r2
 800f4bc:	f8ca 1000 	str.w	r1, [sl]
 800f4c0:	b1ed      	cbz	r5, 800f4fe <__gethex+0x12a>
 800f4c2:	f1bb 0f00 	cmp.w	fp, #0
 800f4c6:	bf0c      	ite	eq
 800f4c8:	2506      	moveq	r5, #6
 800f4ca:	2500      	movne	r5, #0
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	b005      	add	sp, #20
 800f4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d4:	2500      	movs	r5, #0
 800f4d6:	462c      	mov	r4, r5
 800f4d8:	e7b0      	b.n	800f43c <__gethex+0x68>
 800f4da:	2c00      	cmp	r4, #0
 800f4dc:	d1c7      	bne.n	800f46e <__gethex+0x9a>
 800f4de:	4627      	mov	r7, r4
 800f4e0:	e7c7      	b.n	800f472 <__gethex+0x9e>
 800f4e2:	464e      	mov	r6, r9
 800f4e4:	462f      	mov	r7, r5
 800f4e6:	2501      	movs	r5, #1
 800f4e8:	e7c3      	b.n	800f472 <__gethex+0x9e>
 800f4ea:	2400      	movs	r4, #0
 800f4ec:	1cb1      	adds	r1, r6, #2
 800f4ee:	e7cc      	b.n	800f48a <__gethex+0xb6>
 800f4f0:	2401      	movs	r4, #1
 800f4f2:	e7fb      	b.n	800f4ec <__gethex+0x118>
 800f4f4:	fb03 0002 	mla	r0, r3, r2, r0
 800f4f8:	e7ce      	b.n	800f498 <__gethex+0xc4>
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	e7de      	b.n	800f4bc <__gethex+0xe8>
 800f4fe:	eba6 0309 	sub.w	r3, r6, r9
 800f502:	3b01      	subs	r3, #1
 800f504:	4629      	mov	r1, r5
 800f506:	2b07      	cmp	r3, #7
 800f508:	dc0a      	bgt.n	800f520 <__gethex+0x14c>
 800f50a:	9801      	ldr	r0, [sp, #4]
 800f50c:	f7fe f986 	bl	800d81c <_Balloc>
 800f510:	4604      	mov	r4, r0
 800f512:	b940      	cbnz	r0, 800f526 <__gethex+0x152>
 800f514:	4b5c      	ldr	r3, [pc, #368]	@ (800f688 <__gethex+0x2b4>)
 800f516:	4602      	mov	r2, r0
 800f518:	21e4      	movs	r1, #228	@ 0xe4
 800f51a:	485c      	ldr	r0, [pc, #368]	@ (800f68c <__gethex+0x2b8>)
 800f51c:	f7ff fed4 	bl	800f2c8 <__assert_func>
 800f520:	3101      	adds	r1, #1
 800f522:	105b      	asrs	r3, r3, #1
 800f524:	e7ef      	b.n	800f506 <__gethex+0x132>
 800f526:	f100 0a14 	add.w	sl, r0, #20
 800f52a:	2300      	movs	r3, #0
 800f52c:	4655      	mov	r5, sl
 800f52e:	469b      	mov	fp, r3
 800f530:	45b1      	cmp	r9, r6
 800f532:	d337      	bcc.n	800f5a4 <__gethex+0x1d0>
 800f534:	f845 bb04 	str.w	fp, [r5], #4
 800f538:	eba5 050a 	sub.w	r5, r5, sl
 800f53c:	10ad      	asrs	r5, r5, #2
 800f53e:	6125      	str	r5, [r4, #16]
 800f540:	4658      	mov	r0, fp
 800f542:	f7fe fa5d 	bl	800da00 <__hi0bits>
 800f546:	016d      	lsls	r5, r5, #5
 800f548:	f8d8 6000 	ldr.w	r6, [r8]
 800f54c:	1a2d      	subs	r5, r5, r0
 800f54e:	42b5      	cmp	r5, r6
 800f550:	dd54      	ble.n	800f5fc <__gethex+0x228>
 800f552:	1bad      	subs	r5, r5, r6
 800f554:	4629      	mov	r1, r5
 800f556:	4620      	mov	r0, r4
 800f558:	f7fe fdf1 	bl	800e13e <__any_on>
 800f55c:	4681      	mov	r9, r0
 800f55e:	b178      	cbz	r0, 800f580 <__gethex+0x1ac>
 800f560:	1e6b      	subs	r3, r5, #1
 800f562:	1159      	asrs	r1, r3, #5
 800f564:	f003 021f 	and.w	r2, r3, #31
 800f568:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f56c:	f04f 0901 	mov.w	r9, #1
 800f570:	fa09 f202 	lsl.w	r2, r9, r2
 800f574:	420a      	tst	r2, r1
 800f576:	d003      	beq.n	800f580 <__gethex+0x1ac>
 800f578:	454b      	cmp	r3, r9
 800f57a:	dc36      	bgt.n	800f5ea <__gethex+0x216>
 800f57c:	f04f 0902 	mov.w	r9, #2
 800f580:	4629      	mov	r1, r5
 800f582:	4620      	mov	r0, r4
 800f584:	f7ff febe 	bl	800f304 <rshift>
 800f588:	442f      	add	r7, r5
 800f58a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f58e:	42bb      	cmp	r3, r7
 800f590:	da42      	bge.n	800f618 <__gethex+0x244>
 800f592:	9801      	ldr	r0, [sp, #4]
 800f594:	4621      	mov	r1, r4
 800f596:	f7fe f981 	bl	800d89c <_Bfree>
 800f59a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f59c:	2300      	movs	r3, #0
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	25a3      	movs	r5, #163	@ 0xa3
 800f5a2:	e793      	b.n	800f4cc <__gethex+0xf8>
 800f5a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f5a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800f5aa:	d012      	beq.n	800f5d2 <__gethex+0x1fe>
 800f5ac:	2b20      	cmp	r3, #32
 800f5ae:	d104      	bne.n	800f5ba <__gethex+0x1e6>
 800f5b0:	f845 bb04 	str.w	fp, [r5], #4
 800f5b4:	f04f 0b00 	mov.w	fp, #0
 800f5b8:	465b      	mov	r3, fp
 800f5ba:	7830      	ldrb	r0, [r6, #0]
 800f5bc:	9303      	str	r3, [sp, #12]
 800f5be:	f7ff fef3 	bl	800f3a8 <__hexdig_fun>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	f000 000f 	and.w	r0, r0, #15
 800f5c8:	4098      	lsls	r0, r3
 800f5ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	e7ae      	b.n	800f530 <__gethex+0x15c>
 800f5d2:	45b1      	cmp	r9, r6
 800f5d4:	d8ea      	bhi.n	800f5ac <__gethex+0x1d8>
 800f5d6:	492b      	ldr	r1, [pc, #172]	@ (800f684 <__gethex+0x2b0>)
 800f5d8:	9303      	str	r3, [sp, #12]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f7ff fe59 	bl	800f294 <strncmp>
 800f5e2:	9b03      	ldr	r3, [sp, #12]
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d1e1      	bne.n	800f5ac <__gethex+0x1d8>
 800f5e8:	e7a2      	b.n	800f530 <__gethex+0x15c>
 800f5ea:	1ea9      	subs	r1, r5, #2
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f7fe fda6 	bl	800e13e <__any_on>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d0c2      	beq.n	800f57c <__gethex+0x1a8>
 800f5f6:	f04f 0903 	mov.w	r9, #3
 800f5fa:	e7c1      	b.n	800f580 <__gethex+0x1ac>
 800f5fc:	da09      	bge.n	800f612 <__gethex+0x23e>
 800f5fe:	1b75      	subs	r5, r6, r5
 800f600:	4621      	mov	r1, r4
 800f602:	9801      	ldr	r0, [sp, #4]
 800f604:	462a      	mov	r2, r5
 800f606:	f7fe fb61 	bl	800dccc <__lshift>
 800f60a:	1b7f      	subs	r7, r7, r5
 800f60c:	4604      	mov	r4, r0
 800f60e:	f100 0a14 	add.w	sl, r0, #20
 800f612:	f04f 0900 	mov.w	r9, #0
 800f616:	e7b8      	b.n	800f58a <__gethex+0x1b6>
 800f618:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f61c:	42bd      	cmp	r5, r7
 800f61e:	dd6f      	ble.n	800f700 <__gethex+0x32c>
 800f620:	1bed      	subs	r5, r5, r7
 800f622:	42ae      	cmp	r6, r5
 800f624:	dc34      	bgt.n	800f690 <__gethex+0x2bc>
 800f626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d022      	beq.n	800f674 <__gethex+0x2a0>
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d024      	beq.n	800f67c <__gethex+0x2a8>
 800f632:	2b01      	cmp	r3, #1
 800f634:	d115      	bne.n	800f662 <__gethex+0x28e>
 800f636:	42ae      	cmp	r6, r5
 800f638:	d113      	bne.n	800f662 <__gethex+0x28e>
 800f63a:	2e01      	cmp	r6, #1
 800f63c:	d10b      	bne.n	800f656 <__gethex+0x282>
 800f63e:	9a02      	ldr	r2, [sp, #8]
 800f640:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f644:	6013      	str	r3, [r2, #0]
 800f646:	2301      	movs	r3, #1
 800f648:	6123      	str	r3, [r4, #16]
 800f64a:	f8ca 3000 	str.w	r3, [sl]
 800f64e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f650:	2562      	movs	r5, #98	@ 0x62
 800f652:	601c      	str	r4, [r3, #0]
 800f654:	e73a      	b.n	800f4cc <__gethex+0xf8>
 800f656:	1e71      	subs	r1, r6, #1
 800f658:	4620      	mov	r0, r4
 800f65a:	f7fe fd70 	bl	800e13e <__any_on>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d1ed      	bne.n	800f63e <__gethex+0x26a>
 800f662:	9801      	ldr	r0, [sp, #4]
 800f664:	4621      	mov	r1, r4
 800f666:	f7fe f919 	bl	800d89c <_Bfree>
 800f66a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f66c:	2300      	movs	r3, #0
 800f66e:	6013      	str	r3, [r2, #0]
 800f670:	2550      	movs	r5, #80	@ 0x50
 800f672:	e72b      	b.n	800f4cc <__gethex+0xf8>
 800f674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1f3      	bne.n	800f662 <__gethex+0x28e>
 800f67a:	e7e0      	b.n	800f63e <__gethex+0x26a>
 800f67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1dd      	bne.n	800f63e <__gethex+0x26a>
 800f682:	e7ee      	b.n	800f662 <__gethex+0x28e>
 800f684:	08012670 	.word	0x08012670
 800f688:	0801250a 	.word	0x0801250a
 800f68c:	0801281e 	.word	0x0801281e
 800f690:	1e6f      	subs	r7, r5, #1
 800f692:	f1b9 0f00 	cmp.w	r9, #0
 800f696:	d130      	bne.n	800f6fa <__gethex+0x326>
 800f698:	b127      	cbz	r7, 800f6a4 <__gethex+0x2d0>
 800f69a:	4639      	mov	r1, r7
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7fe fd4e 	bl	800e13e <__any_on>
 800f6a2:	4681      	mov	r9, r0
 800f6a4:	117a      	asrs	r2, r7, #5
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f6ac:	f007 071f 	and.w	r7, r7, #31
 800f6b0:	40bb      	lsls	r3, r7
 800f6b2:	4213      	tst	r3, r2
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	bf18      	it	ne
 800f6ba:	f049 0902 	orrne.w	r9, r9, #2
 800f6be:	f7ff fe21 	bl	800f304 <rshift>
 800f6c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f6c6:	1b76      	subs	r6, r6, r5
 800f6c8:	2502      	movs	r5, #2
 800f6ca:	f1b9 0f00 	cmp.w	r9, #0
 800f6ce:	d047      	beq.n	800f760 <__gethex+0x38c>
 800f6d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d015      	beq.n	800f704 <__gethex+0x330>
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	d017      	beq.n	800f70c <__gethex+0x338>
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d109      	bne.n	800f6f4 <__gethex+0x320>
 800f6e0:	f019 0f02 	tst.w	r9, #2
 800f6e4:	d006      	beq.n	800f6f4 <__gethex+0x320>
 800f6e6:	f8da 3000 	ldr.w	r3, [sl]
 800f6ea:	ea49 0903 	orr.w	r9, r9, r3
 800f6ee:	f019 0f01 	tst.w	r9, #1
 800f6f2:	d10e      	bne.n	800f712 <__gethex+0x33e>
 800f6f4:	f045 0510 	orr.w	r5, r5, #16
 800f6f8:	e032      	b.n	800f760 <__gethex+0x38c>
 800f6fa:	f04f 0901 	mov.w	r9, #1
 800f6fe:	e7d1      	b.n	800f6a4 <__gethex+0x2d0>
 800f700:	2501      	movs	r5, #1
 800f702:	e7e2      	b.n	800f6ca <__gethex+0x2f6>
 800f704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f706:	f1c3 0301 	rsb	r3, r3, #1
 800f70a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0f0      	beq.n	800f6f4 <__gethex+0x320>
 800f712:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f716:	f104 0314 	add.w	r3, r4, #20
 800f71a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f71e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f722:	f04f 0c00 	mov.w	ip, #0
 800f726:	4618      	mov	r0, r3
 800f728:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f730:	d01b      	beq.n	800f76a <__gethex+0x396>
 800f732:	3201      	adds	r2, #1
 800f734:	6002      	str	r2, [r0, #0]
 800f736:	2d02      	cmp	r5, #2
 800f738:	f104 0314 	add.w	r3, r4, #20
 800f73c:	d13c      	bne.n	800f7b8 <__gethex+0x3e4>
 800f73e:	f8d8 2000 	ldr.w	r2, [r8]
 800f742:	3a01      	subs	r2, #1
 800f744:	42b2      	cmp	r2, r6
 800f746:	d109      	bne.n	800f75c <__gethex+0x388>
 800f748:	1171      	asrs	r1, r6, #5
 800f74a:	2201      	movs	r2, #1
 800f74c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f750:	f006 061f 	and.w	r6, r6, #31
 800f754:	fa02 f606 	lsl.w	r6, r2, r6
 800f758:	421e      	tst	r6, r3
 800f75a:	d13a      	bne.n	800f7d2 <__gethex+0x3fe>
 800f75c:	f045 0520 	orr.w	r5, r5, #32
 800f760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f762:	601c      	str	r4, [r3, #0]
 800f764:	9b02      	ldr	r3, [sp, #8]
 800f766:	601f      	str	r7, [r3, #0]
 800f768:	e6b0      	b.n	800f4cc <__gethex+0xf8>
 800f76a:	4299      	cmp	r1, r3
 800f76c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f770:	d8d9      	bhi.n	800f726 <__gethex+0x352>
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	459b      	cmp	fp, r3
 800f776:	db17      	blt.n	800f7a8 <__gethex+0x3d4>
 800f778:	6861      	ldr	r1, [r4, #4]
 800f77a:	9801      	ldr	r0, [sp, #4]
 800f77c:	3101      	adds	r1, #1
 800f77e:	f7fe f84d 	bl	800d81c <_Balloc>
 800f782:	4681      	mov	r9, r0
 800f784:	b918      	cbnz	r0, 800f78e <__gethex+0x3ba>
 800f786:	4b1a      	ldr	r3, [pc, #104]	@ (800f7f0 <__gethex+0x41c>)
 800f788:	4602      	mov	r2, r0
 800f78a:	2184      	movs	r1, #132	@ 0x84
 800f78c:	e6c5      	b.n	800f51a <__gethex+0x146>
 800f78e:	6922      	ldr	r2, [r4, #16]
 800f790:	3202      	adds	r2, #2
 800f792:	f104 010c 	add.w	r1, r4, #12
 800f796:	0092      	lsls	r2, r2, #2
 800f798:	300c      	adds	r0, #12
 800f79a:	f7fd f992 	bl	800cac2 <memcpy>
 800f79e:	4621      	mov	r1, r4
 800f7a0:	9801      	ldr	r0, [sp, #4]
 800f7a2:	f7fe f87b 	bl	800d89c <_Bfree>
 800f7a6:	464c      	mov	r4, r9
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	1c5a      	adds	r2, r3, #1
 800f7ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7b0:	6122      	str	r2, [r4, #16]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	615a      	str	r2, [r3, #20]
 800f7b6:	e7be      	b.n	800f736 <__gethex+0x362>
 800f7b8:	6922      	ldr	r2, [r4, #16]
 800f7ba:	455a      	cmp	r2, fp
 800f7bc:	dd0b      	ble.n	800f7d6 <__gethex+0x402>
 800f7be:	2101      	movs	r1, #1
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f7ff fd9f 	bl	800f304 <rshift>
 800f7c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7ca:	3701      	adds	r7, #1
 800f7cc:	42bb      	cmp	r3, r7
 800f7ce:	f6ff aee0 	blt.w	800f592 <__gethex+0x1be>
 800f7d2:	2501      	movs	r5, #1
 800f7d4:	e7c2      	b.n	800f75c <__gethex+0x388>
 800f7d6:	f016 061f 	ands.w	r6, r6, #31
 800f7da:	d0fa      	beq.n	800f7d2 <__gethex+0x3fe>
 800f7dc:	4453      	add	r3, sl
 800f7de:	f1c6 0620 	rsb	r6, r6, #32
 800f7e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f7e6:	f7fe f90b 	bl	800da00 <__hi0bits>
 800f7ea:	42b0      	cmp	r0, r6
 800f7ec:	dbe7      	blt.n	800f7be <__gethex+0x3ea>
 800f7ee:	e7f0      	b.n	800f7d2 <__gethex+0x3fe>
 800f7f0:	0801250a 	.word	0x0801250a

0800f7f4 <L_shift>:
 800f7f4:	f1c2 0208 	rsb	r2, r2, #8
 800f7f8:	0092      	lsls	r2, r2, #2
 800f7fa:	b570      	push	{r4, r5, r6, lr}
 800f7fc:	f1c2 0620 	rsb	r6, r2, #32
 800f800:	6843      	ldr	r3, [r0, #4]
 800f802:	6804      	ldr	r4, [r0, #0]
 800f804:	fa03 f506 	lsl.w	r5, r3, r6
 800f808:	432c      	orrs	r4, r5
 800f80a:	40d3      	lsrs	r3, r2
 800f80c:	6004      	str	r4, [r0, #0]
 800f80e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f812:	4288      	cmp	r0, r1
 800f814:	d3f4      	bcc.n	800f800 <L_shift+0xc>
 800f816:	bd70      	pop	{r4, r5, r6, pc}

0800f818 <__match>:
 800f818:	b530      	push	{r4, r5, lr}
 800f81a:	6803      	ldr	r3, [r0, #0]
 800f81c:	3301      	adds	r3, #1
 800f81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f822:	b914      	cbnz	r4, 800f82a <__match+0x12>
 800f824:	6003      	str	r3, [r0, #0]
 800f826:	2001      	movs	r0, #1
 800f828:	bd30      	pop	{r4, r5, pc}
 800f82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f82e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f832:	2d19      	cmp	r5, #25
 800f834:	bf98      	it	ls
 800f836:	3220      	addls	r2, #32
 800f838:	42a2      	cmp	r2, r4
 800f83a:	d0f0      	beq.n	800f81e <__match+0x6>
 800f83c:	2000      	movs	r0, #0
 800f83e:	e7f3      	b.n	800f828 <__match+0x10>

0800f840 <__hexnan>:
 800f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	680b      	ldr	r3, [r1, #0]
 800f846:	6801      	ldr	r1, [r0, #0]
 800f848:	115e      	asrs	r6, r3, #5
 800f84a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f84e:	f013 031f 	ands.w	r3, r3, #31
 800f852:	b087      	sub	sp, #28
 800f854:	bf18      	it	ne
 800f856:	3604      	addne	r6, #4
 800f858:	2500      	movs	r5, #0
 800f85a:	1f37      	subs	r7, r6, #4
 800f85c:	4682      	mov	sl, r0
 800f85e:	4690      	mov	r8, r2
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	f846 5c04 	str.w	r5, [r6, #-4]
 800f866:	46b9      	mov	r9, r7
 800f868:	463c      	mov	r4, r7
 800f86a:	9502      	str	r5, [sp, #8]
 800f86c:	46ab      	mov	fp, r5
 800f86e:	784a      	ldrb	r2, [r1, #1]
 800f870:	1c4b      	adds	r3, r1, #1
 800f872:	9303      	str	r3, [sp, #12]
 800f874:	b342      	cbz	r2, 800f8c8 <__hexnan+0x88>
 800f876:	4610      	mov	r0, r2
 800f878:	9105      	str	r1, [sp, #20]
 800f87a:	9204      	str	r2, [sp, #16]
 800f87c:	f7ff fd94 	bl	800f3a8 <__hexdig_fun>
 800f880:	2800      	cmp	r0, #0
 800f882:	d151      	bne.n	800f928 <__hexnan+0xe8>
 800f884:	9a04      	ldr	r2, [sp, #16]
 800f886:	9905      	ldr	r1, [sp, #20]
 800f888:	2a20      	cmp	r2, #32
 800f88a:	d818      	bhi.n	800f8be <__hexnan+0x7e>
 800f88c:	9b02      	ldr	r3, [sp, #8]
 800f88e:	459b      	cmp	fp, r3
 800f890:	dd13      	ble.n	800f8ba <__hexnan+0x7a>
 800f892:	454c      	cmp	r4, r9
 800f894:	d206      	bcs.n	800f8a4 <__hexnan+0x64>
 800f896:	2d07      	cmp	r5, #7
 800f898:	dc04      	bgt.n	800f8a4 <__hexnan+0x64>
 800f89a:	462a      	mov	r2, r5
 800f89c:	4649      	mov	r1, r9
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f7ff ffa8 	bl	800f7f4 <L_shift>
 800f8a4:	4544      	cmp	r4, r8
 800f8a6:	d952      	bls.n	800f94e <__hexnan+0x10e>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f1a4 0904 	sub.w	r9, r4, #4
 800f8ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800f8b2:	f8cd b008 	str.w	fp, [sp, #8]
 800f8b6:	464c      	mov	r4, r9
 800f8b8:	461d      	mov	r5, r3
 800f8ba:	9903      	ldr	r1, [sp, #12]
 800f8bc:	e7d7      	b.n	800f86e <__hexnan+0x2e>
 800f8be:	2a29      	cmp	r2, #41	@ 0x29
 800f8c0:	d157      	bne.n	800f972 <__hexnan+0x132>
 800f8c2:	3102      	adds	r1, #2
 800f8c4:	f8ca 1000 	str.w	r1, [sl]
 800f8c8:	f1bb 0f00 	cmp.w	fp, #0
 800f8cc:	d051      	beq.n	800f972 <__hexnan+0x132>
 800f8ce:	454c      	cmp	r4, r9
 800f8d0:	d206      	bcs.n	800f8e0 <__hexnan+0xa0>
 800f8d2:	2d07      	cmp	r5, #7
 800f8d4:	dc04      	bgt.n	800f8e0 <__hexnan+0xa0>
 800f8d6:	462a      	mov	r2, r5
 800f8d8:	4649      	mov	r1, r9
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7ff ff8a 	bl	800f7f4 <L_shift>
 800f8e0:	4544      	cmp	r4, r8
 800f8e2:	d936      	bls.n	800f952 <__hexnan+0x112>
 800f8e4:	f1a8 0204 	sub.w	r2, r8, #4
 800f8e8:	4623      	mov	r3, r4
 800f8ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800f8ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800f8f2:	429f      	cmp	r7, r3
 800f8f4:	d2f9      	bcs.n	800f8ea <__hexnan+0xaa>
 800f8f6:	1b3b      	subs	r3, r7, r4
 800f8f8:	f023 0303 	bic.w	r3, r3, #3
 800f8fc:	3304      	adds	r3, #4
 800f8fe:	3401      	adds	r4, #1
 800f900:	3e03      	subs	r6, #3
 800f902:	42b4      	cmp	r4, r6
 800f904:	bf88      	it	hi
 800f906:	2304      	movhi	r3, #4
 800f908:	4443      	add	r3, r8
 800f90a:	2200      	movs	r2, #0
 800f90c:	f843 2b04 	str.w	r2, [r3], #4
 800f910:	429f      	cmp	r7, r3
 800f912:	d2fb      	bcs.n	800f90c <__hexnan+0xcc>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	b91b      	cbnz	r3, 800f920 <__hexnan+0xe0>
 800f918:	4547      	cmp	r7, r8
 800f91a:	d128      	bne.n	800f96e <__hexnan+0x12e>
 800f91c:	2301      	movs	r3, #1
 800f91e:	603b      	str	r3, [r7, #0]
 800f920:	2005      	movs	r0, #5
 800f922:	b007      	add	sp, #28
 800f924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f928:	3501      	adds	r5, #1
 800f92a:	2d08      	cmp	r5, #8
 800f92c:	f10b 0b01 	add.w	fp, fp, #1
 800f930:	dd06      	ble.n	800f940 <__hexnan+0x100>
 800f932:	4544      	cmp	r4, r8
 800f934:	d9c1      	bls.n	800f8ba <__hexnan+0x7a>
 800f936:	2300      	movs	r3, #0
 800f938:	f844 3c04 	str.w	r3, [r4, #-4]
 800f93c:	2501      	movs	r5, #1
 800f93e:	3c04      	subs	r4, #4
 800f940:	6822      	ldr	r2, [r4, #0]
 800f942:	f000 000f 	and.w	r0, r0, #15
 800f946:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f94a:	6020      	str	r0, [r4, #0]
 800f94c:	e7b5      	b.n	800f8ba <__hexnan+0x7a>
 800f94e:	2508      	movs	r5, #8
 800f950:	e7b3      	b.n	800f8ba <__hexnan+0x7a>
 800f952:	9b01      	ldr	r3, [sp, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d0dd      	beq.n	800f914 <__hexnan+0xd4>
 800f958:	f1c3 0320 	rsb	r3, r3, #32
 800f95c:	f04f 32ff 	mov.w	r2, #4294967295
 800f960:	40da      	lsrs	r2, r3
 800f962:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f966:	4013      	ands	r3, r2
 800f968:	f846 3c04 	str.w	r3, [r6, #-4]
 800f96c:	e7d2      	b.n	800f914 <__hexnan+0xd4>
 800f96e:	3f04      	subs	r7, #4
 800f970:	e7d0      	b.n	800f914 <__hexnan+0xd4>
 800f972:	2004      	movs	r0, #4
 800f974:	e7d5      	b.n	800f922 <__hexnan+0xe2>

0800f976 <__ascii_mbtowc>:
 800f976:	b082      	sub	sp, #8
 800f978:	b901      	cbnz	r1, 800f97c <__ascii_mbtowc+0x6>
 800f97a:	a901      	add	r1, sp, #4
 800f97c:	b142      	cbz	r2, 800f990 <__ascii_mbtowc+0x1a>
 800f97e:	b14b      	cbz	r3, 800f994 <__ascii_mbtowc+0x1e>
 800f980:	7813      	ldrb	r3, [r2, #0]
 800f982:	600b      	str	r3, [r1, #0]
 800f984:	7812      	ldrb	r2, [r2, #0]
 800f986:	1e10      	subs	r0, r2, #0
 800f988:	bf18      	it	ne
 800f98a:	2001      	movne	r0, #1
 800f98c:	b002      	add	sp, #8
 800f98e:	4770      	bx	lr
 800f990:	4610      	mov	r0, r2
 800f992:	e7fb      	b.n	800f98c <__ascii_mbtowc+0x16>
 800f994:	f06f 0001 	mvn.w	r0, #1
 800f998:	e7f8      	b.n	800f98c <__ascii_mbtowc+0x16>

0800f99a <_realloc_r>:
 800f99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99e:	4680      	mov	r8, r0
 800f9a0:	4615      	mov	r5, r2
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	b921      	cbnz	r1, 800f9b0 <_realloc_r+0x16>
 800f9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	f7fb bf14 	b.w	800b7d8 <_malloc_r>
 800f9b0:	b92a      	cbnz	r2, 800f9be <_realloc_r+0x24>
 800f9b2:	f7fd fee9 	bl	800d788 <_free_r>
 800f9b6:	2400      	movs	r4, #0
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9be:	f000 f840 	bl	800fa42 <_malloc_usable_size_r>
 800f9c2:	4285      	cmp	r5, r0
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	d802      	bhi.n	800f9ce <_realloc_r+0x34>
 800f9c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9cc:	d8f4      	bhi.n	800f9b8 <_realloc_r+0x1e>
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	f7fb ff01 	bl	800b7d8 <_malloc_r>
 800f9d6:	4607      	mov	r7, r0
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d0ec      	beq.n	800f9b6 <_realloc_r+0x1c>
 800f9dc:	42b5      	cmp	r5, r6
 800f9de:	462a      	mov	r2, r5
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	bf28      	it	cs
 800f9e4:	4632      	movcs	r2, r6
 800f9e6:	f7fd f86c 	bl	800cac2 <memcpy>
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	f7fd fecb 	bl	800d788 <_free_r>
 800f9f2:	463c      	mov	r4, r7
 800f9f4:	e7e0      	b.n	800f9b8 <_realloc_r+0x1e>

0800f9f6 <__ascii_wctomb>:
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	b141      	cbz	r1, 800fa0e <__ascii_wctomb+0x18>
 800f9fc:	2aff      	cmp	r2, #255	@ 0xff
 800f9fe:	d904      	bls.n	800fa0a <__ascii_wctomb+0x14>
 800fa00:	228a      	movs	r2, #138	@ 0x8a
 800fa02:	601a      	str	r2, [r3, #0]
 800fa04:	f04f 30ff 	mov.w	r0, #4294967295
 800fa08:	4770      	bx	lr
 800fa0a:	700a      	strb	r2, [r1, #0]
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	4770      	bx	lr

0800fa10 <fiprintf>:
 800fa10:	b40e      	push	{r1, r2, r3}
 800fa12:	b503      	push	{r0, r1, lr}
 800fa14:	4601      	mov	r1, r0
 800fa16:	ab03      	add	r3, sp, #12
 800fa18:	4805      	ldr	r0, [pc, #20]	@ (800fa30 <fiprintf+0x20>)
 800fa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1e:	6800      	ldr	r0, [r0, #0]
 800fa20:	9301      	str	r3, [sp, #4]
 800fa22:	f000 f83f 	bl	800faa4 <_vfiprintf_r>
 800fa26:	b002      	add	sp, #8
 800fa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa2c:	b003      	add	sp, #12
 800fa2e:	4770      	bx	lr
 800fa30:	20000050 	.word	0x20000050

0800fa34 <abort>:
 800fa34:	b508      	push	{r3, lr}
 800fa36:	2006      	movs	r0, #6
 800fa38:	f000 fa08 	bl	800fe4c <raise>
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f7f2 fed7 	bl	80027f0 <_exit>

0800fa42 <_malloc_usable_size_r>:
 800fa42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa46:	1f18      	subs	r0, r3, #4
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bfbc      	itt	lt
 800fa4c:	580b      	ldrlt	r3, [r1, r0]
 800fa4e:	18c0      	addlt	r0, r0, r3
 800fa50:	4770      	bx	lr

0800fa52 <__sfputc_r>:
 800fa52:	6893      	ldr	r3, [r2, #8]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	b410      	push	{r4}
 800fa5a:	6093      	str	r3, [r2, #8]
 800fa5c:	da08      	bge.n	800fa70 <__sfputc_r+0x1e>
 800fa5e:	6994      	ldr	r4, [r2, #24]
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	db01      	blt.n	800fa68 <__sfputc_r+0x16>
 800fa64:	290a      	cmp	r1, #10
 800fa66:	d103      	bne.n	800fa70 <__sfputc_r+0x1e>
 800fa68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa6c:	f000 b932 	b.w	800fcd4 <__swbuf_r>
 800fa70:	6813      	ldr	r3, [r2, #0]
 800fa72:	1c58      	adds	r0, r3, #1
 800fa74:	6010      	str	r0, [r2, #0]
 800fa76:	7019      	strb	r1, [r3, #0]
 800fa78:	4608      	mov	r0, r1
 800fa7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <__sfputs_r>:
 800fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa82:	4606      	mov	r6, r0
 800fa84:	460f      	mov	r7, r1
 800fa86:	4614      	mov	r4, r2
 800fa88:	18d5      	adds	r5, r2, r3
 800fa8a:	42ac      	cmp	r4, r5
 800fa8c:	d101      	bne.n	800fa92 <__sfputs_r+0x12>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	e007      	b.n	800faa2 <__sfputs_r+0x22>
 800fa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa96:	463a      	mov	r2, r7
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7ff ffda 	bl	800fa52 <__sfputc_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	d1f3      	bne.n	800fa8a <__sfputs_r+0xa>
 800faa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800faa4 <_vfiprintf_r>:
 800faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa8:	460d      	mov	r5, r1
 800faaa:	b09d      	sub	sp, #116	@ 0x74
 800faac:	4614      	mov	r4, r2
 800faae:	4698      	mov	r8, r3
 800fab0:	4606      	mov	r6, r0
 800fab2:	b118      	cbz	r0, 800fabc <_vfiprintf_r+0x18>
 800fab4:	6a03      	ldr	r3, [r0, #32]
 800fab6:	b90b      	cbnz	r3, 800fabc <_vfiprintf_r+0x18>
 800fab8:	f7fc fe54 	bl	800c764 <__sinit>
 800fabc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fabe:	07d9      	lsls	r1, r3, #31
 800fac0:	d405      	bmi.n	800face <_vfiprintf_r+0x2a>
 800fac2:	89ab      	ldrh	r3, [r5, #12]
 800fac4:	059a      	lsls	r2, r3, #22
 800fac6:	d402      	bmi.n	800face <_vfiprintf_r+0x2a>
 800fac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faca:	f7fc fff0 	bl	800caae <__retarget_lock_acquire_recursive>
 800face:	89ab      	ldrh	r3, [r5, #12]
 800fad0:	071b      	lsls	r3, r3, #28
 800fad2:	d501      	bpl.n	800fad8 <_vfiprintf_r+0x34>
 800fad4:	692b      	ldr	r3, [r5, #16]
 800fad6:	b99b      	cbnz	r3, 800fb00 <_vfiprintf_r+0x5c>
 800fad8:	4629      	mov	r1, r5
 800fada:	4630      	mov	r0, r6
 800fadc:	f000 f938 	bl	800fd50 <__swsetup_r>
 800fae0:	b170      	cbz	r0, 800fb00 <_vfiprintf_r+0x5c>
 800fae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fae4:	07dc      	lsls	r4, r3, #31
 800fae6:	d504      	bpl.n	800faf2 <_vfiprintf_r+0x4e>
 800fae8:	f04f 30ff 	mov.w	r0, #4294967295
 800faec:	b01d      	add	sp, #116	@ 0x74
 800faee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf2:	89ab      	ldrh	r3, [r5, #12]
 800faf4:	0598      	lsls	r0, r3, #22
 800faf6:	d4f7      	bmi.n	800fae8 <_vfiprintf_r+0x44>
 800faf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fafa:	f7fc ffd9 	bl	800cab0 <__retarget_lock_release_recursive>
 800fafe:	e7f3      	b.n	800fae8 <_vfiprintf_r+0x44>
 800fb00:	2300      	movs	r3, #0
 800fb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb04:	2320      	movs	r3, #32
 800fb06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb0e:	2330      	movs	r3, #48	@ 0x30
 800fb10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fcc0 <_vfiprintf_r+0x21c>
 800fb14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb18:	f04f 0901 	mov.w	r9, #1
 800fb1c:	4623      	mov	r3, r4
 800fb1e:	469a      	mov	sl, r3
 800fb20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb24:	b10a      	cbz	r2, 800fb2a <_vfiprintf_r+0x86>
 800fb26:	2a25      	cmp	r2, #37	@ 0x25
 800fb28:	d1f9      	bne.n	800fb1e <_vfiprintf_r+0x7a>
 800fb2a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb2e:	d00b      	beq.n	800fb48 <_vfiprintf_r+0xa4>
 800fb30:	465b      	mov	r3, fp
 800fb32:	4622      	mov	r2, r4
 800fb34:	4629      	mov	r1, r5
 800fb36:	4630      	mov	r0, r6
 800fb38:	f7ff ffa2 	bl	800fa80 <__sfputs_r>
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	f000 80a7 	beq.w	800fc90 <_vfiprintf_r+0x1ec>
 800fb42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb44:	445a      	add	r2, fp
 800fb46:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb48:	f89a 3000 	ldrb.w	r3, [sl]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 809f 	beq.w	800fc90 <_vfiprintf_r+0x1ec>
 800fb52:	2300      	movs	r3, #0
 800fb54:	f04f 32ff 	mov.w	r2, #4294967295
 800fb58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb5c:	f10a 0a01 	add.w	sl, sl, #1
 800fb60:	9304      	str	r3, [sp, #16]
 800fb62:	9307      	str	r3, [sp, #28]
 800fb64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb68:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb6a:	4654      	mov	r4, sl
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb72:	4853      	ldr	r0, [pc, #332]	@ (800fcc0 <_vfiprintf_r+0x21c>)
 800fb74:	f7f0 fb3c 	bl	80001f0 <memchr>
 800fb78:	9a04      	ldr	r2, [sp, #16]
 800fb7a:	b9d8      	cbnz	r0, 800fbb4 <_vfiprintf_r+0x110>
 800fb7c:	06d1      	lsls	r1, r2, #27
 800fb7e:	bf44      	itt	mi
 800fb80:	2320      	movmi	r3, #32
 800fb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb86:	0713      	lsls	r3, r2, #28
 800fb88:	bf44      	itt	mi
 800fb8a:	232b      	movmi	r3, #43	@ 0x2b
 800fb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb90:	f89a 3000 	ldrb.w	r3, [sl]
 800fb94:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb96:	d015      	beq.n	800fbc4 <_vfiprintf_r+0x120>
 800fb98:	9a07      	ldr	r2, [sp, #28]
 800fb9a:	4654      	mov	r4, sl
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	f04f 0c0a 	mov.w	ip, #10
 800fba2:	4621      	mov	r1, r4
 800fba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fba8:	3b30      	subs	r3, #48	@ 0x30
 800fbaa:	2b09      	cmp	r3, #9
 800fbac:	d94b      	bls.n	800fc46 <_vfiprintf_r+0x1a2>
 800fbae:	b1b0      	cbz	r0, 800fbde <_vfiprintf_r+0x13a>
 800fbb0:	9207      	str	r2, [sp, #28]
 800fbb2:	e014      	b.n	800fbde <_vfiprintf_r+0x13a>
 800fbb4:	eba0 0308 	sub.w	r3, r0, r8
 800fbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	9304      	str	r3, [sp, #16]
 800fbc0:	46a2      	mov	sl, r4
 800fbc2:	e7d2      	b.n	800fb6a <_vfiprintf_r+0xc6>
 800fbc4:	9b03      	ldr	r3, [sp, #12]
 800fbc6:	1d19      	adds	r1, r3, #4
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	9103      	str	r1, [sp, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	bfbb      	ittet	lt
 800fbd0:	425b      	neglt	r3, r3
 800fbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800fbd6:	9307      	strge	r3, [sp, #28]
 800fbd8:	9307      	strlt	r3, [sp, #28]
 800fbda:	bfb8      	it	lt
 800fbdc:	9204      	strlt	r2, [sp, #16]
 800fbde:	7823      	ldrb	r3, [r4, #0]
 800fbe0:	2b2e      	cmp	r3, #46	@ 0x2e
 800fbe2:	d10a      	bne.n	800fbfa <_vfiprintf_r+0x156>
 800fbe4:	7863      	ldrb	r3, [r4, #1]
 800fbe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbe8:	d132      	bne.n	800fc50 <_vfiprintf_r+0x1ac>
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	1d1a      	adds	r2, r3, #4
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	9203      	str	r2, [sp, #12]
 800fbf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fbf6:	3402      	adds	r4, #2
 800fbf8:	9305      	str	r3, [sp, #20]
 800fbfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fcd0 <_vfiprintf_r+0x22c>
 800fbfe:	7821      	ldrb	r1, [r4, #0]
 800fc00:	2203      	movs	r2, #3
 800fc02:	4650      	mov	r0, sl
 800fc04:	f7f0 faf4 	bl	80001f0 <memchr>
 800fc08:	b138      	cbz	r0, 800fc1a <_vfiprintf_r+0x176>
 800fc0a:	9b04      	ldr	r3, [sp, #16]
 800fc0c:	eba0 000a 	sub.w	r0, r0, sl
 800fc10:	2240      	movs	r2, #64	@ 0x40
 800fc12:	4082      	lsls	r2, r0
 800fc14:	4313      	orrs	r3, r2
 800fc16:	3401      	adds	r4, #1
 800fc18:	9304      	str	r3, [sp, #16]
 800fc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc1e:	4829      	ldr	r0, [pc, #164]	@ (800fcc4 <_vfiprintf_r+0x220>)
 800fc20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc24:	2206      	movs	r2, #6
 800fc26:	f7f0 fae3 	bl	80001f0 <memchr>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d03f      	beq.n	800fcae <_vfiprintf_r+0x20a>
 800fc2e:	4b26      	ldr	r3, [pc, #152]	@ (800fcc8 <_vfiprintf_r+0x224>)
 800fc30:	bb1b      	cbnz	r3, 800fc7a <_vfiprintf_r+0x1d6>
 800fc32:	9b03      	ldr	r3, [sp, #12]
 800fc34:	3307      	adds	r3, #7
 800fc36:	f023 0307 	bic.w	r3, r3, #7
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	9303      	str	r3, [sp, #12]
 800fc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc40:	443b      	add	r3, r7
 800fc42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc44:	e76a      	b.n	800fb1c <_vfiprintf_r+0x78>
 800fc46:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	2001      	movs	r0, #1
 800fc4e:	e7a8      	b.n	800fba2 <_vfiprintf_r+0xfe>
 800fc50:	2300      	movs	r3, #0
 800fc52:	3401      	adds	r4, #1
 800fc54:	9305      	str	r3, [sp, #20]
 800fc56:	4619      	mov	r1, r3
 800fc58:	f04f 0c0a 	mov.w	ip, #10
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc62:	3a30      	subs	r2, #48	@ 0x30
 800fc64:	2a09      	cmp	r2, #9
 800fc66:	d903      	bls.n	800fc70 <_vfiprintf_r+0x1cc>
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d0c6      	beq.n	800fbfa <_vfiprintf_r+0x156>
 800fc6c:	9105      	str	r1, [sp, #20]
 800fc6e:	e7c4      	b.n	800fbfa <_vfiprintf_r+0x156>
 800fc70:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc74:	4604      	mov	r4, r0
 800fc76:	2301      	movs	r3, #1
 800fc78:	e7f0      	b.n	800fc5c <_vfiprintf_r+0x1b8>
 800fc7a:	ab03      	add	r3, sp, #12
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	462a      	mov	r2, r5
 800fc80:	4b12      	ldr	r3, [pc, #72]	@ (800fccc <_vfiprintf_r+0x228>)
 800fc82:	a904      	add	r1, sp, #16
 800fc84:	4630      	mov	r0, r6
 800fc86:	f7fb ff15 	bl	800bab4 <_printf_float>
 800fc8a:	4607      	mov	r7, r0
 800fc8c:	1c78      	adds	r0, r7, #1
 800fc8e:	d1d6      	bne.n	800fc3e <_vfiprintf_r+0x19a>
 800fc90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc92:	07d9      	lsls	r1, r3, #31
 800fc94:	d405      	bmi.n	800fca2 <_vfiprintf_r+0x1fe>
 800fc96:	89ab      	ldrh	r3, [r5, #12]
 800fc98:	059a      	lsls	r2, r3, #22
 800fc9a:	d402      	bmi.n	800fca2 <_vfiprintf_r+0x1fe>
 800fc9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc9e:	f7fc ff07 	bl	800cab0 <__retarget_lock_release_recursive>
 800fca2:	89ab      	ldrh	r3, [r5, #12]
 800fca4:	065b      	lsls	r3, r3, #25
 800fca6:	f53f af1f 	bmi.w	800fae8 <_vfiprintf_r+0x44>
 800fcaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcac:	e71e      	b.n	800faec <_vfiprintf_r+0x48>
 800fcae:	ab03      	add	r3, sp, #12
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	462a      	mov	r2, r5
 800fcb4:	4b05      	ldr	r3, [pc, #20]	@ (800fccc <_vfiprintf_r+0x228>)
 800fcb6:	a904      	add	r1, sp, #16
 800fcb8:	4630      	mov	r0, r6
 800fcba:	f7fc f993 	bl	800bfe4 <_printf_i>
 800fcbe:	e7e4      	b.n	800fc8a <_vfiprintf_r+0x1e6>
 800fcc0:	080127c9 	.word	0x080127c9
 800fcc4:	080127d3 	.word	0x080127d3
 800fcc8:	0800bab5 	.word	0x0800bab5
 800fccc:	0800fa81 	.word	0x0800fa81
 800fcd0:	080127cf 	.word	0x080127cf

0800fcd4 <__swbuf_r>:
 800fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd6:	460e      	mov	r6, r1
 800fcd8:	4614      	mov	r4, r2
 800fcda:	4605      	mov	r5, r0
 800fcdc:	b118      	cbz	r0, 800fce6 <__swbuf_r+0x12>
 800fcde:	6a03      	ldr	r3, [r0, #32]
 800fce0:	b90b      	cbnz	r3, 800fce6 <__swbuf_r+0x12>
 800fce2:	f7fc fd3f 	bl	800c764 <__sinit>
 800fce6:	69a3      	ldr	r3, [r4, #24]
 800fce8:	60a3      	str	r3, [r4, #8]
 800fcea:	89a3      	ldrh	r3, [r4, #12]
 800fcec:	071a      	lsls	r2, r3, #28
 800fcee:	d501      	bpl.n	800fcf4 <__swbuf_r+0x20>
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	b943      	cbnz	r3, 800fd06 <__swbuf_r+0x32>
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f000 f82a 	bl	800fd50 <__swsetup_r>
 800fcfc:	b118      	cbz	r0, 800fd06 <__swbuf_r+0x32>
 800fcfe:	f04f 37ff 	mov.w	r7, #4294967295
 800fd02:	4638      	mov	r0, r7
 800fd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd06:	6823      	ldr	r3, [r4, #0]
 800fd08:	6922      	ldr	r2, [r4, #16]
 800fd0a:	1a98      	subs	r0, r3, r2
 800fd0c:	6963      	ldr	r3, [r4, #20]
 800fd0e:	b2f6      	uxtb	r6, r6
 800fd10:	4283      	cmp	r3, r0
 800fd12:	4637      	mov	r7, r6
 800fd14:	dc05      	bgt.n	800fd22 <__swbuf_r+0x4e>
 800fd16:	4621      	mov	r1, r4
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f7ff fa93 	bl	800f244 <_fflush_r>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d1ed      	bne.n	800fcfe <__swbuf_r+0x2a>
 800fd22:	68a3      	ldr	r3, [r4, #8]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	60a3      	str	r3, [r4, #8]
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	6022      	str	r2, [r4, #0]
 800fd2e:	701e      	strb	r6, [r3, #0]
 800fd30:	6962      	ldr	r2, [r4, #20]
 800fd32:	1c43      	adds	r3, r0, #1
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d004      	beq.n	800fd42 <__swbuf_r+0x6e>
 800fd38:	89a3      	ldrh	r3, [r4, #12]
 800fd3a:	07db      	lsls	r3, r3, #31
 800fd3c:	d5e1      	bpl.n	800fd02 <__swbuf_r+0x2e>
 800fd3e:	2e0a      	cmp	r6, #10
 800fd40:	d1df      	bne.n	800fd02 <__swbuf_r+0x2e>
 800fd42:	4621      	mov	r1, r4
 800fd44:	4628      	mov	r0, r5
 800fd46:	f7ff fa7d 	bl	800f244 <_fflush_r>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	d0d9      	beq.n	800fd02 <__swbuf_r+0x2e>
 800fd4e:	e7d6      	b.n	800fcfe <__swbuf_r+0x2a>

0800fd50 <__swsetup_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4b29      	ldr	r3, [pc, #164]	@ (800fdf8 <__swsetup_r+0xa8>)
 800fd54:	4605      	mov	r5, r0
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	460c      	mov	r4, r1
 800fd5a:	b118      	cbz	r0, 800fd64 <__swsetup_r+0x14>
 800fd5c:	6a03      	ldr	r3, [r0, #32]
 800fd5e:	b90b      	cbnz	r3, 800fd64 <__swsetup_r+0x14>
 800fd60:	f7fc fd00 	bl	800c764 <__sinit>
 800fd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd68:	0719      	lsls	r1, r3, #28
 800fd6a:	d422      	bmi.n	800fdb2 <__swsetup_r+0x62>
 800fd6c:	06da      	lsls	r2, r3, #27
 800fd6e:	d407      	bmi.n	800fd80 <__swsetup_r+0x30>
 800fd70:	2209      	movs	r2, #9
 800fd72:	602a      	str	r2, [r5, #0]
 800fd74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd78:	81a3      	strh	r3, [r4, #12]
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	e033      	b.n	800fde8 <__swsetup_r+0x98>
 800fd80:	0758      	lsls	r0, r3, #29
 800fd82:	d512      	bpl.n	800fdaa <__swsetup_r+0x5a>
 800fd84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd86:	b141      	cbz	r1, 800fd9a <__swsetup_r+0x4a>
 800fd88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd8c:	4299      	cmp	r1, r3
 800fd8e:	d002      	beq.n	800fd96 <__swsetup_r+0x46>
 800fd90:	4628      	mov	r0, r5
 800fd92:	f7fd fcf9 	bl	800d788 <_free_r>
 800fd96:	2300      	movs	r3, #0
 800fd98:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fda0:	81a3      	strh	r3, [r4, #12]
 800fda2:	2300      	movs	r3, #0
 800fda4:	6063      	str	r3, [r4, #4]
 800fda6:	6923      	ldr	r3, [r4, #16]
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f043 0308 	orr.w	r3, r3, #8
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	6923      	ldr	r3, [r4, #16]
 800fdb4:	b94b      	cbnz	r3, 800fdca <__swsetup_r+0x7a>
 800fdb6:	89a3      	ldrh	r3, [r4, #12]
 800fdb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fdbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fdc0:	d003      	beq.n	800fdca <__swsetup_r+0x7a>
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	f000 f883 	bl	800fed0 <__smakebuf_r>
 800fdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdce:	f013 0201 	ands.w	r2, r3, #1
 800fdd2:	d00a      	beq.n	800fdea <__swsetup_r+0x9a>
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	60a2      	str	r2, [r4, #8]
 800fdd8:	6962      	ldr	r2, [r4, #20]
 800fdda:	4252      	negs	r2, r2
 800fddc:	61a2      	str	r2, [r4, #24]
 800fdde:	6922      	ldr	r2, [r4, #16]
 800fde0:	b942      	cbnz	r2, 800fdf4 <__swsetup_r+0xa4>
 800fde2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fde6:	d1c5      	bne.n	800fd74 <__swsetup_r+0x24>
 800fde8:	bd38      	pop	{r3, r4, r5, pc}
 800fdea:	0799      	lsls	r1, r3, #30
 800fdec:	bf58      	it	pl
 800fdee:	6962      	ldrpl	r2, [r4, #20]
 800fdf0:	60a2      	str	r2, [r4, #8]
 800fdf2:	e7f4      	b.n	800fdde <__swsetup_r+0x8e>
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	e7f7      	b.n	800fde8 <__swsetup_r+0x98>
 800fdf8:	20000050 	.word	0x20000050

0800fdfc <_raise_r>:
 800fdfc:	291f      	cmp	r1, #31
 800fdfe:	b538      	push	{r3, r4, r5, lr}
 800fe00:	4605      	mov	r5, r0
 800fe02:	460c      	mov	r4, r1
 800fe04:	d904      	bls.n	800fe10 <_raise_r+0x14>
 800fe06:	2316      	movs	r3, #22
 800fe08:	6003      	str	r3, [r0, #0]
 800fe0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}
 800fe10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe12:	b112      	cbz	r2, 800fe1a <_raise_r+0x1e>
 800fe14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe18:	b94b      	cbnz	r3, 800fe2e <_raise_r+0x32>
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f000 f830 	bl	800fe80 <_getpid_r>
 800fe20:	4622      	mov	r2, r4
 800fe22:	4601      	mov	r1, r0
 800fe24:	4628      	mov	r0, r5
 800fe26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe2a:	f000 b817 	b.w	800fe5c <_kill_r>
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d00a      	beq.n	800fe48 <_raise_r+0x4c>
 800fe32:	1c59      	adds	r1, r3, #1
 800fe34:	d103      	bne.n	800fe3e <_raise_r+0x42>
 800fe36:	2316      	movs	r3, #22
 800fe38:	6003      	str	r3, [r0, #0]
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e7e7      	b.n	800fe0e <_raise_r+0x12>
 800fe3e:	2100      	movs	r1, #0
 800fe40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe44:	4620      	mov	r0, r4
 800fe46:	4798      	blx	r3
 800fe48:	2000      	movs	r0, #0
 800fe4a:	e7e0      	b.n	800fe0e <_raise_r+0x12>

0800fe4c <raise>:
 800fe4c:	4b02      	ldr	r3, [pc, #8]	@ (800fe58 <raise+0xc>)
 800fe4e:	4601      	mov	r1, r0
 800fe50:	6818      	ldr	r0, [r3, #0]
 800fe52:	f7ff bfd3 	b.w	800fdfc <_raise_r>
 800fe56:	bf00      	nop
 800fe58:	20000050 	.word	0x20000050

0800fe5c <_kill_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d07      	ldr	r5, [pc, #28]	@ (800fe7c <_kill_r+0x20>)
 800fe60:	2300      	movs	r3, #0
 800fe62:	4604      	mov	r4, r0
 800fe64:	4608      	mov	r0, r1
 800fe66:	4611      	mov	r1, r2
 800fe68:	602b      	str	r3, [r5, #0]
 800fe6a:	f7f2 fcb1 	bl	80027d0 <_kill>
 800fe6e:	1c43      	adds	r3, r0, #1
 800fe70:	d102      	bne.n	800fe78 <_kill_r+0x1c>
 800fe72:	682b      	ldr	r3, [r5, #0]
 800fe74:	b103      	cbz	r3, 800fe78 <_kill_r+0x1c>
 800fe76:	6023      	str	r3, [r4, #0]
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
 800fe7a:	bf00      	nop
 800fe7c:	2000a004 	.word	0x2000a004

0800fe80 <_getpid_r>:
 800fe80:	f7f2 bc9e 	b.w	80027c0 <_getpid>

0800fe84 <__swhatbuf_r>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	460c      	mov	r4, r1
 800fe88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8c:	2900      	cmp	r1, #0
 800fe8e:	b096      	sub	sp, #88	@ 0x58
 800fe90:	4615      	mov	r5, r2
 800fe92:	461e      	mov	r6, r3
 800fe94:	da0d      	bge.n	800feb2 <__swhatbuf_r+0x2e>
 800fe96:	89a3      	ldrh	r3, [r4, #12]
 800fe98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe9c:	f04f 0100 	mov.w	r1, #0
 800fea0:	bf14      	ite	ne
 800fea2:	2340      	movne	r3, #64	@ 0x40
 800fea4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fea8:	2000      	movs	r0, #0
 800feaa:	6031      	str	r1, [r6, #0]
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	b016      	add	sp, #88	@ 0x58
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	466a      	mov	r2, sp
 800feb4:	f000 f848 	bl	800ff48 <_fstat_r>
 800feb8:	2800      	cmp	r0, #0
 800feba:	dbec      	blt.n	800fe96 <__swhatbuf_r+0x12>
 800febc:	9901      	ldr	r1, [sp, #4]
 800febe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fec2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fec6:	4259      	negs	r1, r3
 800fec8:	4159      	adcs	r1, r3
 800feca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fece:	e7eb      	b.n	800fea8 <__swhatbuf_r+0x24>

0800fed0 <__smakebuf_r>:
 800fed0:	898b      	ldrh	r3, [r1, #12]
 800fed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fed4:	079d      	lsls	r5, r3, #30
 800fed6:	4606      	mov	r6, r0
 800fed8:	460c      	mov	r4, r1
 800feda:	d507      	bpl.n	800feec <__smakebuf_r+0x1c>
 800fedc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	6123      	str	r3, [r4, #16]
 800fee4:	2301      	movs	r3, #1
 800fee6:	6163      	str	r3, [r4, #20]
 800fee8:	b003      	add	sp, #12
 800feea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feec:	ab01      	add	r3, sp, #4
 800feee:	466a      	mov	r2, sp
 800fef0:	f7ff ffc8 	bl	800fe84 <__swhatbuf_r>
 800fef4:	9f00      	ldr	r7, [sp, #0]
 800fef6:	4605      	mov	r5, r0
 800fef8:	4639      	mov	r1, r7
 800fefa:	4630      	mov	r0, r6
 800fefc:	f7fb fc6c 	bl	800b7d8 <_malloc_r>
 800ff00:	b948      	cbnz	r0, 800ff16 <__smakebuf_r+0x46>
 800ff02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff06:	059a      	lsls	r2, r3, #22
 800ff08:	d4ee      	bmi.n	800fee8 <__smakebuf_r+0x18>
 800ff0a:	f023 0303 	bic.w	r3, r3, #3
 800ff0e:	f043 0302 	orr.w	r3, r3, #2
 800ff12:	81a3      	strh	r3, [r4, #12]
 800ff14:	e7e2      	b.n	800fedc <__smakebuf_r+0xc>
 800ff16:	89a3      	ldrh	r3, [r4, #12]
 800ff18:	6020      	str	r0, [r4, #0]
 800ff1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	9b01      	ldr	r3, [sp, #4]
 800ff22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff26:	b15b      	cbz	r3, 800ff40 <__smakebuf_r+0x70>
 800ff28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f000 f81d 	bl	800ff6c <_isatty_r>
 800ff32:	b128      	cbz	r0, 800ff40 <__smakebuf_r+0x70>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f023 0303 	bic.w	r3, r3, #3
 800ff3a:	f043 0301 	orr.w	r3, r3, #1
 800ff3e:	81a3      	strh	r3, [r4, #12]
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	431d      	orrs	r5, r3
 800ff44:	81a5      	strh	r5, [r4, #12]
 800ff46:	e7cf      	b.n	800fee8 <__smakebuf_r+0x18>

0800ff48 <_fstat_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d07      	ldr	r5, [pc, #28]	@ (800ff68 <_fstat_r+0x20>)
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	4604      	mov	r4, r0
 800ff50:	4608      	mov	r0, r1
 800ff52:	4611      	mov	r1, r2
 800ff54:	602b      	str	r3, [r5, #0]
 800ff56:	f7f2 fc9b 	bl	8002890 <_fstat>
 800ff5a:	1c43      	adds	r3, r0, #1
 800ff5c:	d102      	bne.n	800ff64 <_fstat_r+0x1c>
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	b103      	cbz	r3, 800ff64 <_fstat_r+0x1c>
 800ff62:	6023      	str	r3, [r4, #0]
 800ff64:	bd38      	pop	{r3, r4, r5, pc}
 800ff66:	bf00      	nop
 800ff68:	2000a004 	.word	0x2000a004

0800ff6c <_isatty_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4d06      	ldr	r5, [pc, #24]	@ (800ff88 <_isatty_r+0x1c>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4604      	mov	r4, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	602b      	str	r3, [r5, #0]
 800ff78:	f7f2 fc9a 	bl	80028b0 <_isatty>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_isatty_r+0x1a>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_isatty_r+0x1a>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	2000a004 	.word	0x2000a004

0800ff8c <_init>:
 800ff8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8e:	bf00      	nop
 800ff90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff92:	bc08      	pop	{r3}
 800ff94:	469e      	mov	lr, r3
 800ff96:	4770      	bx	lr

0800ff98 <_fini>:
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	bf00      	nop
 800ff9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff9e:	bc08      	pop	{r3}
 800ffa0:	469e      	mov	lr, r3
 800ffa2:	4770      	bx	lr
